<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wwl.app.domain.res.dao.ResDAO">

	<select id="getReserveMtInfo" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO" resultType="camelHashMap">
		<![CDATA[
			/*
			 * SQL ID      : res.getReserveMtInfo
			 * Description : 예약 관리 마스터 정보 조회
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.05.12  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			SELECT 
				   X.GRADE_CODE	-- 등급코드
			     , X.GRADE_NAME	-- 등급명
			     , X.IS_CHECKED	-- 등급사용여부
			  FROM (					   
					SELECT 
						   TMP.GRADE_CODE
						 , TMP.GRADE_NAME
						 , IF(IFNULL(HR.GRADE_CODE, 'N') = 'N', 'N', 'Y') AS IS_CHECKED
					  FROM (SELECT 'G000' AS GRADE_CODE
								 , '초진'  AS GRADE_NAME) TMP
							LEFT OUTER JOIN HOSPITAL_RESERVE_GRADE HR
							  ON TMP.GRADE_CODE = HR.GRADE_CODE
							 AND HR.OFFICE_CODE   = #{officeCode}
					UNION ALL
					SELECT 
						   UG.GRADE_CODE
						 , UG.GRADE_NAME
						 , IF(IFNULL(HG.GRADE_CODE, 'N') = 'N', 'N', 'Y') AS IS_CHECKED
					  FROM USER_GRADE UG
						   LEFT OUTER JOIN HOSPITAL_RESERVE_GRADE HG
							 ON UG.OFFICE_CODE   = HG.OFFICE_CODE
							AND UG.GRADE_CODE    = HG.GRADE_CODE
					 WHERE UG.OFFICE_CODE = #{officeCode}
					) X
		]]>		   
	</select>
	
	<select id="getReserveHoliday" parameterType="hashMap" resultType="com.wwl.app.domain.res.dto.ResReserveDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.getReserveHoliday
			 * Description : 예약 휴무일 리스트 조회
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.05.12  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			SELECT 
				   HOLIDAY_SEQ  -- 휴무일SEQ
				 , HOLIDAY_DATE -- 휴무일 
			 	 , HOLIDAY_NAME -- 휴무일메모		 
			  FROM HOSPITAL_RESERVE_HOLIDAY
			 WHERE OFFICE_CODE	 = #{officeCode}
		]]>		   
	</select>	
	
	<select id="getReserveDayList" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO" resultType="com.wwl.app.domain.res.dto.ResReserveDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.getReserveDayList
			 * Description : 예약 시간,인원 관리 리스트 조회
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.05.12  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			SELECT 
				   X.RES_DATE
			     , X.HHMM	 					-- 시간
			     , GROUP_CONCAT(X.PRD_MST_CODE ORDER BY X.PRD_MST_CODE SEPARATOR '|') PRD_MST_CODE	-- 대분류코드
			     , GROUP_CONCAT(X.RES_CNT ORDER BY X.PRD_MST_CODE SEPARATOR '|') RES_CNT			-- 인원
			     , IFNULL(X.MAX_CNT, 0) MAX_CNT	-- 시간별최대인원	
			  FROM (
					SELECT 
						   A.OFFICE_CODE
						 , A.RES_DATE
						 , A.DATA_DAY
						 , A.PRD_MST_CODE
						 , A.HHMM
						 , A.RES_CNT
						 , A.MAX_CNT
					  FROM HOSPITAL_RESERVE A
						   INNER JOIN PRODUCT_SURGICAL_MASTER B
							  ON A.OFFICE_CODE	 = B.OFFICE_CODE
							 AND A.PRD_MST_CODE	 = B.PRD_MST_CODE
					 WHERE B.DISPLAY_YN = 'Y'
				   ) X
			 WHERE X.OFFICE_CODE   = #{officeCode}
			   AND X.RES_DATE      = #{resDate}
			   AND X.DATA_DAY	   = #{dataDay}
			 GROUP BY 
				X.OFFICE_CODE, X.HHMM			
		]]>		   
	</select>

	<select id="getReserveSubList" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO" resultType="com.wwl.app.domain.res.dto.ResReserveDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.getReserveSubList
			 * Description : 예약 소분류 리스트 조회
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.05.12  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			SELECT				 
				   B.PRD_MST_CODE -- 대분류코드
			     , B.PRD_MST_NAME -- 대분류명
				 , A.PRD_SUB_CODE -- 소분류코드
			     , B.PRD_SUB_NAME -- 소분류명
				 , A.RES_CNT	  -- 예약인원
				 , A.RES_TIME     -- 예약시간
			  FROM HOSPITAL_RESERVE_SUB A 
			       INNER JOIN (
							   SELECT 
							   	      Q1.OFFICE_CODE                        
			                        , Q1.PRD_SUB_CODE
			                        , Q1.PRD_SUB_NAME
			                        , Q1.PRD_MST_CODE
			                        , Q2.PRD_MST_NAME
								 FROM (
									   SELECT 
									   	      PS.OFFICE_CODE								
			                                , PS.PRD_SUB_CODE
			                                , PS.PRD_SUB_NAME
											, P.PRD_MST_CODE
										 FROM PRODUCT_SURGICAL_SUB_TMP PS
											  INNER JOIN PRODUCT_SURGICAL_TMP P
												 ON PS.OFFICE_CODE   = P.OFFICE_CODE
												AND PS.PRD_CODE      = P.PRD_CODE                     
									   ) Q1 INNER JOIN PRODUCT_SURGICAL_MASTER Q2
			                          ON Q1.OFFICE_CODE	  = Q2.OFFICE_CODE
			                         AND Q1.PRD_MST_CODE  = Q2.PRD_MST_CODE
							   ) B
			          ON A.OFFICE_CODE   = B.OFFICE_CODE
			         AND A.PRD_SUB_CODE  = B.PRD_SUB_CODE
			 WHERE A.OFFICE_CODE   = #{officeCode}
			   AND A.RES_DATE 	   = #{resDate}
			   AND A.DATA_DAY 	   = #{dataDay}
			ORDER BY B.PRD_SUB_NAME
		]]>
	</select>
		
	<insert id="insertReserveMt" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.insertReserveMt
			 * Description : 예약 관리 마스터 정보 저장
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.05.13  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			INSERT INTO HOSPITAL_RESERVE_MASTER (
				  OFFICE_CODE
				, RES_DATE				
				, CREATE_USER
				, CREATE_DATE				
			) VALUES (
				  #{officeCode}
				, #{resDate}				
				, #{createUser}
				, NOW()	
			)
			ON DUPLICATE KEY
			UPDATE CREATE_USER = #{createUser}
				 , CREATE_DATE = NOW()	
		]]>
	</insert>
	
	<insert id="insertReserveGrade" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.insertReserveGrade
			 * Description : 등급별 예약 관리 저장
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.07.04  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			INSERT INTO HOSPITAL_RESERVE_GRADE (
				  OFFICE_CODE	
				, GRADE_CODE	
				, CREATE_USER	
				, CREATE_DATE								
			) VALUES (
				  #{officeCode}	
				, #{gradeCode}
				, #{createUser}	
				, NOW()
			)
		]]>
	</insert>
	
	<insert id="deleteReserveGrade" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.deleteReserveGrade
			 * Description : 등급별 예약 설정 삭제
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.08.05  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			DELETE FROM HOSPITAL_RESERVE_GRADE 
			 WHERE OFFICE_CODE   = #{officeCode}	
			   AND GRADE_CODE    = #{gradeCode}
		]]>
	</insert>
	
	<delete id="deleteReserve" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.deleteReserve
			 * Description : 예약 시간,인원 삭제
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.05.12  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			DELETE FROM HOSPITAL_RESERVE
		     WHERE OFFICE_CODE	 = #{officeCode}
			   AND RES_DATE      = #{resDate}
			   AND DATA_DAY	     = #{dataDay}
		]]>
	</delete>
	
	<insert id="insertReserve" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.insertReserve
			 * Description : 예약 시간,인원 저장
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.05.12  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			INSERT INTO HOSPITAL_RESERVE (
				  OFFICE_CODE
				, RES_DATE
				, DATA_DAY
				, HHMM
				, PRD_MST_CODE				
				, RES_CNT
				, MAX_CNT
			) VALUES (
				  #{officeCode}
				, #{resDate}
				, #{dataDay}
				, #{hhmm}
				, #{prdMstCode}				
				, IFNULL(#{resCnt}, '0')
				, #{maxCnt}
			)
		]]>
	</insert>
	
	<select id="getResDateList" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO" resultType="camelHashMap">
		<![CDATA[
			/*
			 * SQL ID      : res.getResDateList
			 * Description : 특정일 리스트 조회
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.05.17  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			SELECT 
				   RES_DATE
				 , DATE_FORMAT(RES_DATE, '%Y년 %m월 %d일') RES_NAME
			  FROM HOSPITAL_RESERVE_MASTER
			 WHERE OFFICE_CODE   = #{officeCode}
			   AND RES_DATE	    <> '00000000'
			  GROUP BY RES_DATE
		]]>
	</select>
	
	<delete id="deleteResDate" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.deleteResDate
			 * Description : 특정일 삭제
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.05.17  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			DELETE R1
				 , R2
			     , R3
			  FROM HOSPITAL_RESERVE_MASTER R1
			       LEFT OUTER JOIN HOSPITAL_RESERVE R2
			         ON R1.OFFICE_CODE	 = R2.OFFICE_CODE
			        AND R1.RES_DATE	     = R2.RES_DATE
				   LEFT OUTER JOIN HOSPITAL_RESERVE_SUB R3
			         ON R1.OFFICE_CODE	 = R3.OFFICE_CODE
			        AND R1.RES_DATE	     = R3.RES_DATE
			WHERE R1.OFFICE_CODE   = #{officeCode}
			  AND R1.RES_DATE      = #{resDate}
		]]>
	</delete>
	
	<insert id="insertReserveCopy" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.insertReserveCopy
			 * Description : 예약 시간,인원 설정 복사
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.05.13  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			INSERT INTO HOSPITAL_RESERVE (
				  OFFICE_CODE
				, RES_DATE
				, DATA_DAY
				, HHMM
				, PRD_MST_CODE				
				, RES_CNT
				, MAX_CNT
			) SELECT 
					OFFICE_CODE
				  , RES_DATE
				  , #{copyDay} DATA_DAY
				  , HHMM
				  , PRD_MST_CODE				  
				  , RES_CNT
				  , MAX_CNT
			   FROM HOSPITAL_RESERVE
			  WHERE OFFICE_CODE   = #{officeCode}
				AND RES_DATE	  = #{resDate}
				AND DATA_DAY  	  = #{dataDay}
		]]>
	</insert>

	<insert id="insertReserveHoliday" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.insertReserveHoliday
			 * Description : 예약 휴무일 저장
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.05.12  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			INSERT INTO HOSPITAL_RESERVE_HOLIDAY (
				  OFFICE_CODE	
				, HOLIDAY_SEQ
				, HOLIDAY_DATE	
			    , HOLIDAY_NAME	
				, CREATE_USER	
				, CREATE_DATE					
			) VALUES (
				  #{officeCode}	
				, IF(#{holidaySeq} = 0, 
						(SELECT IFNULL(MAX(HOLIDAY_SEQ), 0) + 1
						   FROM HOSPITAL_RESERVE_HOLIDAY A
						  WHERE OFFICE_CODE	= #{officeCode}), #{holidaySeq})
				, #{holidayDate}
				, #{holidayName}	
				, #{createUser}	
				, NOW()
			)
			ON DUPLICATE KEY
			UPDATE HOLIDAY_DATE	= #{holidayDate}
				 , HOLIDAY_NAME = #{holidayName}
				 , CREATE_USER  = #{createUser}
				 , CREATE_DATE  = NOW()
		]]>
	</insert>

	<delete id="deleteReserveHoliday" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.deleteReserveHoliday
			 * Description : 예약 휴무일 삭제
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.05.16  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			DELETE FROM HOSPITAL_RESERVE_HOLIDAY
			 WHERE OFFICE_CODE	 = #{officeCode}
			   AND HOLIDAY_DATE  = #{holidayDate}
		]]>
	</delete>

	<insert id="insertReserveSub" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.insertReserveSub
			 * Description : 예약 소분류 추가
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.05.12  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			INSERT INTO HOSPITAL_RESERVE_SUB (
				  OFFICE_CODE	
				, RES_DATE	
				, DATA_DAY	
				, PRD_SUB_CODE	
				, RES_CNT	
				, RES_TIME	
				, CREATE_USER	
				, CREATE_DATE				
			) VALUES (
				  #{officeCode}	
				, #{resDate}
				, #{dataDay}
				, #{prdSubCode}	
				, #{resCnt}
				, #{resTime}
				, #{createUser}	
				, NOW()
			)		
		]]>
	</insert>

	<delete id="deleteReserveSub" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.deleteReserveSub
			 * Description : 예약 소분류 삭제
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.05.12  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			DELETE FROM HOSPITAL_RESERVE_SUB
			 WHERE OFFICE_CODE	 = #{officeCode}
			   AND RES_DATE		 = #{resDate}
			   AND DATA_DAY		 = #{dataDay}
			   AND PRD_SUB_CODE	 = #{prdSubCode}
		]]>
	</delete>
	
	<select id="getReserveCloseList" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO" resultType="com.wwl.app.domain.res.dto.ResReserveDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.getReserveCloseList
			 * Description : 예약 마감 리스트 조회
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.07.06  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			SELECT 
				   RES_DATE
				 , CONCAT('[', SUBSTR(HHMM,1,2), ':', SUBSTR(HHMM,3), '] ') AS HHMM
				 , PRD_MST_NAME
			     , CONTENT
				 , REPLACE(REPLACE(
						DATE_FORMAT(CREATE_DATE,'%p %I:%i')
						,'AM','오전')
					,'PM','오후') AS CREATE_DATE	
			  FROM LOG_RESERVE_CLOSE
			 WHERE OFFICE_CODE = #{officeCode}
			   AND RES_DATE	   = #{resDate}
		]]>	
	</select>
	
	<select id="getReserveCount" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO" resultType="camelHashMap">
		<![CDATA[
			/*
			 * SQL ID      : res.getReserveCount
			 * Description : 예약 신청,변경 개수 구하기
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.05.27  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			SELECT 				 
				   SUM(CASE WHEN X.PAGE_TYPE = 'apply'  THEN 1 ELSE 0 END) AS APPLY_CNT
				 , SUM(CASE WHEN X.PAGE_TYPE = 'apply'  AND X.VISIT_STATUS = 'N' THEN 1 ELSE 0 END) AS APPLY_CHECK_CNT
				 , SUM(CASE WHEN X.PAGE_TYPE = 'change' THEN 1 ELSE 0 END) AS CHANGE_CNT
				 , SUM(CASE WHEN X.PAGE_TYPE = 'change' AND X.VISIT_STATUS = 'N' THEN 1 ELSE 0 END) AS CHANGE_CHECK_CNT		 
			  FROM (
					SELECT 
						   USR.PAGE_TYPE
						 , USR.VISIT_STATUS  
						 , USR.RES_NO
						 , USR.CREATE_DATE
						 , (SELECT IF(COUNT(USER_ID) = 0, '1', '2')
                                    FROM USER_PRODUCT
							 WHERE OFFICE_CODE   = USR.OFFICE_CODE
                                     AND USER_ID 	     = USR.USER_ID) AS VISIT_TYPE
						 , ITM.ITEM_NAME
					  FROM (
							SELECT 
								   'apply' AS PAGE_TYPE
								 , UR.OFFICE_CODE
                                 , UR.USER_ID
								 , UR.RES_NO
								 , UI.NAME
								 , UR.CREATE_DATE
								 , UR.VISIT_STATUS 
							  FROM USER_RESERVE UR
							  	   INNER JOIN USER_INFO UI
									  ON UR.OFFICE_CODE	  = UI.OFFICE_CODE
									 AND UR.USER_ID		  = UI.USER_ID       										   
							 WHERE UR.OFFICE_CODE   = #{officeCode}
							   AND UR.USE_STATUS    = 'Y'
							 UNION ALL
							SELECT 
								   'change' AS PAGE_TYPE
								 , UR.OFFICE_CODE
                                 , UR.USER_ID
								 , UR.RES_NO
								 , UI.NAME
								 , UR.CREATE_DATE
								 , UR.VISIT_STATUS 
							  FROM USER_RESERVE UR
							  	   INNER JOIN USER_INFO UI
									  ON UR.OFFICE_CODE	= UI.OFFICE_CODE
									 AND UR.USER_ID		= UI.USER_ID										   
							 WHERE UR.OFFICE_CODE   = #{officeCode}
							   AND UR.USE_STATUS    = 'C'
							) USR LEFT OUTER JOIN ( -- 남은 시술권
													SELECT 
														   PRD.OFFICE_CODE
														 , PRD.RES_NO			 
														 , CONCAT('[남은 시술권] ', CASE WHEN PRD.ITEM_TYPE = 'C' OR PRD.ITEM_TYPE = 'P' 
														 									  THEN CONCAT(PRD.PRODUCT_TITLE, '\n', GROUP_CONCAT(PRD.ITEM_TITLE ORDER BY PRD.ITEM_TITLE SEPARATOR '\n'))
																						 ELSE PRD.ITEM_TITLE
																					 END) AS ITEM_NAME
													  FROM (
															SELECT 
															 	   X.OFFICE_CODE
																 , X.RES_NO	
																 , X.RES_GROUP_CODE
																 , X.RES_GROUP_SEQ
																 , X.GROUP_SEQ
																 , X.ITEM_TYPE
																 , X.EVENT_PRODUCT_TITLE AS PRODUCT_TITLE
																 , CASE WHEN X.ITEM_TYPE = 'P' THEN 
																 			 CONCAT('[', X.GROUP_SEQ, '회] ', GROUP_CONCAT(IF(X.SERVICE_YN = 'Y', CONCAT('[서비스] ', X.PRD_ITEM_NAME), X.PRD_ITEM_NAME) ORDER BY X.ITEM_SEQ SEPARATOR ' + '))
																		WHEN X.ITEM_TYPE = 'C' THEN 
																			 CONCAT('[', MAX(X.DEDUCT_CNT), 'p] ', GROUP_CONCAT(IF(X.SERVICE_YN = 'Y', CONCAT('[서비스] ', X.PRD_ITEM_NAME), X.PRD_ITEM_NAME) ORDER BY X.ITEM_SEQ SEPARATOR ', '))
																		WHEN X.ITEM_TYPE = 'E' THEN 
																			 X.EVENT_PRODUCT_TITLE
																		ELSE IF(X.SERVICE_YN = 'Y', CONCAT('[서비스] ', X.PRD_ITEM_NAME), X.PRD_ITEM_NAME)
																	END ITEM_TITLE
															   FROM (
																	SELECT /*+ JOIN_FIXED_ORDER() */
																		   URP.OFFICE_CODE
																		 , URP.RES_NO
																		 , URP.RES_GROUP_CODE
																		 , URP.RES_GROUP_SEQ
																		 , UPI.GROUP_SEQ
																		 , UPI.ITEM_TYPE
																		 , EPS.EVENT_PRODUCT_TITLE
																		 , UPI.DEDUCT_CNT
																		 , UPI.PRD_ITEM_NAME
																		 , UPI.SERVICE_YN
																		 , UPI.ITEM_SEQ
																      FROM USER_RESERVE_PRODUCT URP
																		   INNER JOIN (
																						SELECT 
																							   U1.OFFICE_CODE
																							 , U1.RES_NO
																							 , U1.RES_GROUP_CODE
																							 , U1.RES_GROUP_SEQ
																							 , U1.ITEM_TYPE							
																							 , U2.ITEM_SEQ
																							 , U2.GROUP_SEQ
																							 , U2.UPDATE_SEQ
																							 , U2.DEDUCT_CNT
																							 , U2.PRD_ITEM_NAME
																							 , U2.SERVICE_YN
																							 , E1.EVENT_UPDATE_SEQ 
																							 , E1.EVENT_SEQ 
																							 , E1.EVENT_SUB_SEQ 
																							 , E1.EVENT_PRODUCT_CODE 								 
																						  FROM USER_PRODUCT U1                                                                        
																							   INNER JOIN (
																							   				SELECT 
																												   UPI.OFFICE_CODE
																							   				     , UPI.USER_ID
																												 , UPI.RES_NO
																												 , UPI.RES_GROUP_CODE
																												 , UPI.RES_GROUP_SEQ
																							   				     , UPI.ITEM_SEQ
																												 , UPI.GROUP_SEQ
																												 , UPI.UPDATE_SEQ
																												 , UPI.DEDUCT_CNT
																												 , PSI.PRD_ITEM_NAME
																												 , UPI.SERVICE_YN			
																											  FROM USER_PRODUCT_ITEM UPI	
																												   INNER JOIN PRODUCT_SURGICAL_ITEM PSI
																													  ON UPI.OFFICE_CODE   = PSI.OFFICE_CODE
																													 AND UPI.UPDATE_SEQ	   = PSI.UPDATE_SEQ
																													 AND UPI.PRD_ITEM_CODE = PSI.PRD_ITEM_CODE
																											 WHERE UPI.OFFICE_CODE = #{officeCode}
																							   ) U2
																								  ON U1.USER_ID		   = U2.USER_ID
																								 AND U1.RES_NO		   = U2.RES_NO
																								 AND U1.RES_GROUP_CODE = U2.RES_GROUP_CODE
																								 AND U1.RES_GROUP_SEQ  = U2.RES_GROUP_SEQ				
															 								    LEFT OUTER JOIN ALL_EVENT_PRODUCT_INFO E1 
																							      ON U1.OFFICE_CODE    = E1.OFFICE_CODE
															  									 AND U1.RES_GROUP_CODE = E1.ITEM_CODE	
															  									 AND E1.PRD_ITEM_CODE  = 'ROOT'
																						 WHERE U1.OFFICE_CODE = #{officeCode}
																			) UPI 
																			   ON URP.PRD_RES_NO	 = UPI.RES_NO
																			  AND URP.RES_GROUP_CODE = UPI.RES_GROUP_CODE
																			  AND URP.RES_GROUP_SEQ	 = UPI.RES_GROUP_SEQ
																			  AND URP.ITEM_SEQ	     = UPI.ITEM_SEQ		
																			LEFT OUTER JOIN EVENT_PRODUCT_SURGICAL EPS
																	  		  ON UPI.OFFICE_CODE   	    = EPS.OFFICE_CODE
																			 AND UPI.EVENT_UPDATE_SEQ   = EPS.EVENT_UPDATE_SEQ
																			 AND UPI.EVENT_SEQ		    = EPS.EVENT_SEQ
																			 AND UPI.EVENT_SUB_SEQ	    = EPS.EVENT_SUB_SEQ
																			 AND UPI.EVENT_PRODUCT_CODE = EPS.EVENT_PRODUCT_CODE
																	WHERE URP.OFFICE_CODE = #{officeCode}
															   	  ) X
															GROUP BY 
																  X.RES_NO, X.RES_GROUP_CODE, X.RES_GROUP_SEQ, X.GROUP_SEQ
														  	) PRD
														GROUP BY PRD.RES_NO, PRD.RES_GROUP_CODE, PRD.RES_GROUP_SEQ
														UNION ALL
														-- 예약 상품
														SELECT 
															   RES.OFFICE_CODE
															 , RES.RES_NO
															 , GROUP_CONCAT(RES.ITEM_NAME SEPARATOR '\n') AS ITEM_NAME
														  FROM (
																SELECT
																	   U.OFFICE_CODE
																	 , U.RES_NO
																	 , P.PRD_ITEM_NAME AS ITEM_NAME
																  FROM USER_RESERVE_ITEM U
															           INNER JOIN ALL_PRODUCT_INFO A
																	      ON U.OFFICE_CODE    = A.OFFICE_CODE
															             AND U.RES_GROUP_CODE = A.ITEM_CODE
																	   INNER JOIN PRODUCT_SURGICAL_ITEM P
																		  ON A.OFFICE_CODE   = P.OFFICE_CODE
																		 AND A.UPDATE_SEQ	 = P.UPDATE_SEQ
																		 AND A.PRD_ITEM_CODE = P.PRD_ITEM_CODE
																 WHERE U.OFFICE_CODE   = #{officeCode}
																   AND U.ITEM_TYPE 	   = 'N'
																   AND U.ITEM_STATUS   = 'R'
																 UNION ALL
																SELECT
																	   U.OFFICE_CODE
																	 , U.RES_NO
																	 , CONCAT('[EVENT] ', E.EVENT_PRODUCT_TITLE) AS ITEM_NAME
																  FROM USER_RESERVE_ITEM U
																	   INNER JOIN ALL_EVENT_PRODUCT_INFO A
															              ON U.OFFICE_CODE	  = A.OFFICE_CODE
															             AND U.RES_GROUP_CODE = A.ITEM_CODE
																	   INNER JOIN EVENT_PRODUCT_SURGICAL E
																		  ON A.OFFICE_CODE   	  = E.OFFICE_CODE
																		 AND A.EVENT_UPDATE_SEQ   = E.EVENT_UPDATE_SEQ
																		 AND A.EVENT_SEQ          = E.EVENT_SEQ
																		 AND A.EVENT_SUB_SEQ      = E.EVENT_SUB_SEQ
																		 AND A.EVENT_PRODUCT_CODE = E.EVENT_PRODUCT_CODE
																 WHERE U.OFFICE_CODE   = #{officeCode}
																   AND U.ITEM_TYPE     <> 'N'
																   AND U.ITEM_STATUS   = 'R'
															    ) RES
													 	 GROUP BY RES.RES_NO
							        ) ITM 
								   ON USR.RES_NO = ITM.RES_NO	
						WHERE 1=1		
				]]>			
					<if test="start != null and start != '' and end != null and end != ''">	
			 			<![CDATA[
						   AND DATE_FORMAT(USR.CREATE_DATE, '%Y%m%d') BETWEEN #{start} AND #{end}
						]]>
					</if>							
					<if test="field != null and field != ''">	
						AND (USR.NAME LIKE TRIM(CONCAT('%', #{field}, '%')) OR
                 			 ITM.ITEM_NAME LIKE TRIM(CONCAT('%',  #{field}, '%')))
					</if>
					  GROUP BY USR.RES_NO
				) X
		<if test="sort != null and sort != ''">	
			<![CDATA[
				 WHERE X.VISIT_TYPE = #{sort}						 
			]]>
		</if>		
	</select>
	
	<select id="getReserveList" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO" resultType="camelHashMap">
		<![CDATA[
			/*
			 * SQL ID      : res.getReserveList
			 * Description : 예약 대기 리스트 조회
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.05.27  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			SELECT 
				   Z.RES_NO
				 , Z.P_DATE
				 , Z.P_TIME
				 , Z.USER_ID
				 , Z.NAME				-- 이름
				 , Z.GENDER				-- 성별
				 , Z.AGE				-- 나이
				 , Z.MOBILE				-- 휴대폰 번호
				 , Z.GRADE_NAME			-- 등급
 				 , Z.GRADE_CODE			-- 회원등급표시	
				 , Z.GRADE_DISPLAY	    -- 회원등급표시	
                 , Z.GRADE_COLOR		-- 회원등급표시	
				 , Z.RES_TYPE			-- 예약타입명		
				 , Z.RES_TYPE_CODE	    -- 예약타입코드		 
				 , Z.VISIT_TYPE			-- 초진/재진구분
				 , Z.FIXED_DOCTOR_NAME  -- 의료진지정(원장)
				 , Z.FIXED_STAFF_NAME   -- 의료진지정(직원)				 
				 , Z.RES_NOTE			-- 남기실메모
				 , Z.HOSPITAL_NOTE		-- 병원메모
				 , Z.ADVICE_YN			-- 상담여부
				 , Z.USE_STATUS			-- 상태(Y:예약,N:예약취소(회원),C:예약변경,D:예약취소(병원))
				 , Z.VISIT_STATUS		-- 방문상태
				 , Z.CONFIRM_YN			-- 예약확정상태
				 , Z.ALARM_YN			-- 알림톡발송여부
				 , Z.SAVE_YN			-- 시술권저장여부
				 , Z.ITEM_NAME			-- 상품금액
				 , Z.ITEM_PRICE			-- 가격
				 , Z.TOTAL_PRICE		-- 총합계
				 , Z.RES_DATE			-- 희망예약일
				 , Z.CREATE_DATE		-- 예약신청일
				 , Z.RES_DATE_AFTER 	-- 변경후예약일 
				 , Z.RES_DATE_BEFORE	-- 변경전예약일
				 , Z.UPDATE_USER	 	-- 변경한사람/날짜
				 , Z.SEND_PRODUCT_CNT	-- 전송수:남은시술권
				 , Z.SEND_RESERVE_CNT	-- 전송수:주의사항
				 , Z.SEND_CRM_CNT		-- 전송수:CRM
			  FROM (
					SELECT 
						   X.RES_NO
		             	 , X.P_DATE
						 , X.P_TIME			
						 , X.USER_ID
						 , X.NAME
						 , X.GENDER				
						 , X.AGE				
						 , X.MOBILE				
						 , X.VISIT_TYPE			
						 , X.GRADE_NAME	
 						 , X.GRADE_CODE			
						 , X.GRADE_DISPLAY	   
						 , X.GRADE_COLOR				
			 			 , X.RES_TYPE
			 			 , X.RES_TYPE_CODE									 
						 , X.FIXED_DOCTOR_NAME  
		                 , X.FIXED_STAFF_NAME   						 			
						 , X.RES_NOTE		
						 , X.HOSPITAL_NOTE	
						 , X.ADVICE_YN		
						 , X.USE_STATUS	
						 , X.VISIT_STATUS			
						 , X.CONFIRM_YN
						 , X.ALARM_YN			
						 , X.SAVE_YN
						 , X.ITEM_NAME			
						 , X.ITEM_PRICE			
						 , X.TOTAL_PRICE		
						 , X.RES_DATE			
						 , X.CREATE_DATE		
						 , Y.RES_DATE_AFTER 	
						 , Y.RES_DATE_BEFORE	
						 , Y.UPDATE_USER	 	
						 , X.SEND_CRM_CNT
						 , X.SEND_PRODUCT_CNT
						 , X.SEND_RESERVE_CNT
					  FROM (	 
							SELECT 
								   USR.OFFICE_CODE
								 , USR.RES_NO
								 , USR.P_DATE
								 , USR.P_TIME
								 , USR.USER_ID		
								 , USR.NAME
								 , USR.GENDER		
								 , USR.AGE			
								 , USR.MOBILE		
								 , USR.GRADE_NAME
 								 , USR.GRADE_CODE	 
								 , USR.GRADE_DISPLAY  
								 , USR.GRADE_COLOR	
		             			 , USR.RES_TYPE
		             			 , USR.RES_TYPE_CODE									 
								 , USR.VISIT_TYPE
								 , USR.FIXED_DOCTOR_NAME						 
		                         , USR.FIXED_STAFF_NAME									 	
								 , USR.RES_NOTE		
								 , USR.HOSPITAL_NOTE
								 , USR.ADVICE_YN
								 , USR.USE_STATUS
								 , USR.VISIT_STATUS
								 , USR.CONFIRM_YN
								 , USR.ALARM_YN
								 , USR.SAVE_YN
								 , GROUP_CONCAT(ITM.ITEM_NAME SEPARATOR '\n')  AS ITEM_NAME			
							     , GROUP_CONCAT(ITM.ITEM_PRICE SEPARATOR '\n') AS ITEM_PRICE			
							 	 , FORMAT(SUM(ITM.TOTAL_PRICE), 0) 			   AS TOTAL_PRICE									
								 , USR.RES_DATE	
								 , USR.ORDER_DATE
								 , USR.CREATE_DATE
								 , USR.SEND_CRM_CNT
								 , USR.SEND_PRODUCT_CNT
								 , USR.SEND_RESERVE_CNT
							  FROM (
									SELECT 
										   UR.OFFICE_CODE
										 , UR.RES_NO
										 , UR.RES_DATE AS P_DATE
                                         , UR.RES_TIME AS P_TIME										 
										 , UR.USER_ID
										 , UI.NAME
										 , IF(UI.GENDER = 'male', '남', '여') AS GENDER
										 , IF(UI.BIRTHDATE = '', '', (DATE_FORMAT(NOW(), '%Y') - SUBSTR(UI.BIRTHDATE, 1, 4) + 1)) AS AGE 
										 , UI.MOBILE
										 , IFNULL(UG.GRADE_NAME, '일반')  AS GRADE_NAME
 										 , UG.GRADE_CODE	 	
										 , UG.GRADE_DISPLAY  	
										 , UG.GRADE_COLOR	 
										 , (SELECT COMMON_NAME
											  FROM COMMON_CODE
											 WHERE GROUP_CODE  = 'RES001'
											   AND COMMON_CODE = UR.RES_TYPE) AS RES_TYPE
									     , UR.RES_TYPE AS RES_TYPE_CODE
										 , (SELECT IF(COUNT(USER_ID) = 0, '1', '2')
		                                      FROM USER_PRODUCT
											 WHERE OFFICE_CODE   = UR.OFFICE_CODE
		                                       AND USER_ID 	     = UR.USER_ID) AS VISIT_TYPE
										 , (SELECT CONCAT(SUI.SYS_NAME, ' ' , COMMON_NAME)
											  FROM SYS_USER_INFO SUI
												   LEFT OUTER JOIN COMMON_CODE CC
												 	 ON CC.GROUP_CODE	 = 'POS001'
												    AND SUI.SYS_POSITION = CC.COMMON_CODE
											 WHERE SUI.OFFICE_CODE	 = UR.OFFICE_CODE
											   AND SUI.SYS_USER_ID   = UI.FIXED_DOCTOR) AS FIXED_DOCTOR_NAME
										 , (SELECT CONCAT(SUI.SYS_NAME, ' ' , COMMON_NAME)
											  FROM SYS_USER_INFO SUI
												   LEFT OUTER JOIN COMMON_CODE CC
												 	 ON CC.GROUP_CODE	 = 'POS001'
												    AND SUI.SYS_POSITION = CC.COMMON_CODE
											WHERE SUI.OFFICE_CODE	= UR.OFFICE_CODE
											  AND SUI.SYS_USER_ID   = UI.FIXED_STAFF) AS FIXED_STAFF_NAME	
										 , UR.RES_NOTE
										 , UR.HOSPITAL_NOTE								 
										 , UR.ADVICE_YN
										 , UR.USE_STATUS 
										 , UR.VISIT_STATUS
										 , UR.CONFIRM_YN
										 , IFNULL(UR.ALARM_YN, 'N') AS ALARM_YN
										 , UR.SAVE_YN
										 , UR.CREATE_DATE AS ORDER_DATE
										 , CONCAT(DATE_FORMAT(UR.RES_DATE, '%Y년 %m월 %d일')
												 , CASE DAYOFWEEK(UR.RES_DATE) 
														WHEN '1' THEN '(일)'
														WHEN '2' THEN '(월)'		
														WHEN '3' THEN '(화)'		
														WHEN '4' THEN '(수)'		
														WHEN '5' THEN '(목)'		
														WHEN '6' THEN '(금)'		
														WHEN '7' THEN '(토)'
													END
												 , ' '
												 , CASE WHEN SUBSTR(UR.RES_TIME,1,2) > 12 THEN CONCAT('오후 ', IF(SUBSTR(UR.RES_TIME,1,2) - 12 < 10
																								 , CONCAT('0', SUBSTR(UR.RES_TIME,1,2) - 12), SUBSTR(UR.RES_TIME,1,2) - 12)
																								 , ':'
																								 , SUBSTR(UR.RES_TIME,3))
														ELSE CONCAT('오전 ', SUBSTR(UR.RES_TIME,1,2), ':', SUBSTR(UR.RES_TIME,3))
													END) AS RES_DATE
										 , CONCAT(DATE_FORMAT(UR.CREATE_DATE, '%Y년 %m월 %d일')
												, CASE DAYOFWEEK(UR.CREATE_DATE) 
													   WHEN '1' THEN '(일)'
													   WHEN '2' THEN '(월)'		
													   WHEN '3' THEN '(화)'		
													   WHEN '4' THEN '(수)'		
													   WHEN '5' THEN '(목)'		
													   WHEN '6' THEN '(금)'		
													   WHEN '7' THEN '(토)'
												   END
												, ' '
												, CASE WHEN SUBSTR(DATE_FORMAT(UR.CREATE_DATE, '%H%i'),1,2) > 12 THEN CONCAT('오후 ', IF(SUBSTR(DATE_FORMAT(UR.CREATE_DATE, '%H%i'),1,2) - 12 < 10
																						 , CONCAT('0', SUBSTR(DATE_FORMAT(UR.CREATE_DATE, '%H%i'),1,2) - 12), SUBSTR(DATE_FORMAT(UR.CREATE_DATE, '%H%i'),1,2) - 12)
																						 , ':'
																						 , SUBSTR(DATE_FORMAT(UR.CREATE_DATE, '%H%i'),3))
													   ELSE CONCAT('오전 ', SUBSTR(DATE_FORMAT(UR.CREATE_DATE, '%H%i'),1,2), ':', SUBSTR(DATE_FORMAT(UR.CREATE_DATE, '%H%i'),3))
												   END) AS CREATE_DATE
										 , (SELECT COUNT(RES_NO)
											  FROM CRM_DATA_HISTORY
											 WHERE OFFICE_CODE   = UR.OFFICE_CODE
											   AND RES_NO		 = UR.RES_NO) AS SEND_CRM_CNT
                                         , (SELECT COUNT(USER_ID) 
											  FROM USER_PRODUCT_REPLY	
											 WHERE OFFICE_CODE   = UI.OFFICE_CODE
											   AND USER_ID	     = UI.USER_ID
											   AND DATE_FORMAT(REPLY_DATE, '%Y%m%d') = UR.RES_DATE) AS SEND_PRODUCT_CNT
										 , (SELECT COUNT(USER_ID) 
											  FROM USER_RESERVE_REPLY	
											 WHERE OFFICE_CODE   = UI.OFFICE_CODE
											   AND USER_ID	     = UI.USER_ID
											   AND DATE_FORMAT(REPLY_DATE, '%Y%m%d') = UR.RES_DATE) AS SEND_RESERVE_CNT
									  FROM USER_RESERVE UR
										   INNER JOIN USER_INFO UI
											  ON UR.OFFICE_CODE	  = UI.OFFICE_CODE
											 AND UR.USER_ID		  = UI.USER_ID                                  
										    LEFT OUTER JOIN USER_GRADE UG
		                                      ON UI.OFFICE_CODE	  = UG.OFFICE_CODE
		                                     AND UI.GRADE_CODE    = UG.GRADE_CODE		                                   
									 WHERE UR.OFFICE_CODE	= #{officeCode}
						]]>
								<choose>
									<when test="page == 'apply'">
									<![CDATA[ 
										AND UR.USE_STATUS IN ('Y', 'D')
									]]>
									</when>
									<otherwise>										
										AND UR.USE_STATUS IN ('C', 'D')										
									</otherwise>
								</choose>									   
						<![CDATA[ 
									) USR LEFT OUTER JOIN ( -- 예약 상품
															SELECT 
																   RES.OFFICE_CODE
																 , RES.RES_NO
																 , GROUP_CONCAT(CONCAT('<p>', RES.ITEM_NAME, '</p>') SEPARATOR '\n') AS ITEM_NAME			
																 , GROUP_CONCAT(FORMAT(RES.ITEM_PRICE, 0) SEPARATOR '\n') AS ITEM_PRICE	
																 , SUM(RES.ITEM_PRICE) 			 					      AS TOTAL_PRICE
															 FROM (
																    SELECT
																		   U.OFFICE_CODE
																		 , U.RES_NO
																		 , P.PRD_ITEM_NAME AS ITEM_NAME
																		 , P.PRICE 		   AS ITEM_PRICE
																	  FROM USER_RESERVE_ITEM U
																           INNER JOIN ALL_PRODUCT_INFO A
																		      ON U.OFFICE_CODE    = A.OFFICE_CODE
																             AND U.RES_GROUP_CODE = A.ITEM_CODE
																		   INNER JOIN PRODUCT_SURGICAL_ITEM P
																			  ON A.OFFICE_CODE   = P.OFFICE_CODE
																			 AND A.UPDATE_SEQ	 = P.UPDATE_SEQ
																			 AND A.PRD_ITEM_CODE = P.PRD_ITEM_CODE
																	 WHERE U.OFFICE_CODE   = #{officeCode}
																	   AND U.ITEM_TYPE 	   = 'N'
																	   AND U.ITEM_STATUS   = 'R'
																	 UNION ALL
																	SELECT
																		   U.OFFICE_CODE
																		 , U.RES_NO
																		 , CONCAT('[EVENT] ', E.EVENT_PRODUCT_TITLE) AS ITEM_NAME
																		 , E.EVENT_SALE	AS ITEM_PRICE
																	  FROM USER_RESERVE_ITEM U
																		   INNER JOIN ALL_EVENT_PRODUCT_INFO A
																              ON U.OFFICE_CODE	  	  = A.OFFICE_CODE
																             AND U.RES_GROUP_CODE 	  = A.ITEM_CODE
																		   INNER JOIN EVENT_PRODUCT_SURGICAL E
																			  ON A.OFFICE_CODE   	  = E.OFFICE_CODE
																			 AND A.EVENT_UPDATE_SEQ   = E.EVENT_UPDATE_SEQ
																			 AND A.EVENT_SEQ          = E.EVENT_SEQ
																			 AND A.EVENT_SUB_SEQ      = E.EVENT_SUB_SEQ
																			 AND A.EVENT_PRODUCT_CODE = E.EVENT_PRODUCT_CODE
																	 WHERE U.OFFICE_CODE   = #{officeCode}
																	   AND U.ITEM_TYPE     <> 'N'
																	   AND U.ITEM_STATUS   = 'R'
																) RES
															GROUP BY RES.RES_NO
															UNION ALL
															-- 남은 시술권
														    SELECT 
																   Y.OFFICE_CODE
																 , Y.RES_NO			 
																 , CONCAT('<p>[남은 시술권] ', CASE WHEN Y.ITEM_TYPE = 'C' OR Y.ITEM_TYPE = 'P' THEN CONCAT(Y.PRODUCT_TITLE, '\n', GROUP_CONCAT(Y.ITEM_TITLE ORDER BY Y.ITEM_ORDER SEPARATOR '\n'))
																									ELSE Y.ITEM_TITLE
																								END, '</p>') AS ITEM_NAME
																  , 0 AS ITEM_PRICE
																  , 0 AS TOTAL_PRICE	
															  FROM (
																	SELECT 
																		   X.OFFICE_CODE
																		 , X.RES_NO	
																		 , X.RES_GROUP_CODE
																		 , X.RES_GROUP_SEQ
																		 , X.GROUP_SEQ
																		 , X.ITEM_TYPE
																		 , MIN(X.ITEM_SEQ) AS ITEM_ORDER
																		 , IF(X.ITEM_TYPE = 'N', X.PRD_ITEM_NAME, CONCAT('[EVENT] ', X.EVENT_PRODUCT_TITLE)) AS PRODUCT_TITLE
																		 , CASE WHEN X.ITEM_TYPE = 'P' THEN CONCAT('[', X.GROUP_SEQ, '회] ', GROUP_CONCAT(IF(X.CONFIRM_STATUS = 'Y',
																																								CONCAT('<span class="line">', X.PRD_ITEM_NAME, '</span>'),
																																								X.PRD_ITEM_NAME) ORDER BY X.ITEM_SEQ SEPARATOR ' + '))							   
																				WHEN X.ITEM_TYPE = 'C' THEN CONCAT('[', X.DEDUCT_CNT, 'p] ', GROUP_CONCAT(IF(X.CONFIRM_STATUS ='Y',
																																								CONCAT('<span class="line">', X.PRD_ITEM_NAME, '</span>'),
																																								X.PRD_ITEM_NAME) ORDER BY X.ITEM_SEQ))
																				WHEN X.ITEM_TYPE = 'E' THEN IFNULL(CONCAT(X.EVENT_PRODUCT_TITLE, ' + ',
																														GROUP_CONCAT(IF(X.SERVICE_YN = 'N', NULL,
																																		IF(X.CONFIRM_STATUS = 'Y',
																																			CONCAT('<span class="line">', X.PRD_ITEM_NAME, '</span>'),
																																			X.PRD_ITEM_NAME)) ORDER BY X.ITEM_SEQ SEPARATOR ' + ')), X.EVENT_PRODUCT_TITLE)
																				ELSE IF(X.SERVICE_YN = 'Y', CONCAT('[서비스] ', X.PRD_ITEM_NAME), X.PRD_ITEM_NAME)			 
																			END ITEM_TITLE	
																	  FROM (
																			SELECT /*+ JOIN_FIXED_ORDER() */
																				   URP.OFFICE_CODE
																				 , URP.RES_NO
																				 , URP.RES_GROUP_CODE
																				 , URP.RES_GROUP_SEQ
																				 , UPI.GROUP_SEQ
																				 , UPI.ITEM_TYPE
																				 , EPS.EVENT_PRODUCT_TITLE
																				 , UPI.DEDUCT_CNT
																				 , UPI.PRD_ITEM_NAME
																				 , UPI.SERVICE_YN
																				 , UPI.CONFIRM_STATUS
																				 , UPI.ITEM_SEQ
																		      FROM USER_RESERVE_PRODUCT URP
																				   INNER JOIN (
																								SELECT 
																									   U1.OFFICE_CODE
																									 , U1.RES_NO
																									 , U1.RES_GROUP_CODE
																									 , U1.RES_GROUP_SEQ
																									 , U1.ITEM_TYPE							
																									 , U2.ITEM_SEQ
																									 , U2.GROUP_SEQ
																									 , U2.UPDATE_SEQ
																									 , U2.DEDUCT_CNT
																									 , U2.PRD_ITEM_NAME
																									 , U2.SERVICE_YN
																									 , U2.CONFIRM_STATUS
																									 , E1.EVENT_UPDATE_SEQ 
																									 , E1.EVENT_SEQ 
																									 , E1.EVENT_SUB_SEQ 
																									 , E1.EVENT_PRODUCT_CODE 								 
																								  FROM USER_PRODUCT U1                                                                        
																									   INNER JOIN (
																									   				SELECT 
																														   UPI.OFFICE_CODE
																									   				     , UPI.USER_ID
																														 , UPI.RES_NO
																														 , UPI.RES_GROUP_CODE
																														 , UPI.RES_GROUP_SEQ
																									   				     , UPI.ITEM_SEQ
																														 , UPI.GROUP_SEQ
																														 , UPI.UPDATE_SEQ
																														 , UPI.DEDUCT_CNT
																														 , PSI.PRD_ITEM_NAME
																														 , UPI.SERVICE_YN			
																														 , UPI.CONFIRM_STATUS
																													  FROM USER_PRODUCT_ITEM UPI	
																														   INNER JOIN PRODUCT_SURGICAL_ITEM PSI
																															  ON UPI.OFFICE_CODE   = PSI.OFFICE_CODE
																															 AND UPI.UPDATE_SEQ	   = PSI.UPDATE_SEQ
																															 AND UPI.PRD_ITEM_CODE = PSI.PRD_ITEM_CODE
																													 WHERE UPI.OFFICE_CODE = #{officeCode}
																									   ) U2
																										  ON U1.USER_ID		   = U2.USER_ID
																										 AND U1.RES_NO		   = U2.RES_NO
																										 AND U1.RES_GROUP_CODE = U2.RES_GROUP_CODE
																										 AND U1.RES_GROUP_SEQ  = U2.RES_GROUP_SEQ				
																	 								    LEFT OUTER JOIN ALL_EVENT_PRODUCT_INFO E1 
																									      ON U1.OFFICE_CODE    = E1.OFFICE_CODE
																	  									 AND U1.RES_GROUP_CODE = E1.ITEM_CODE	
																	  									 AND E1.PRD_ITEM_CODE  = 'ROOT'
																								 WHERE U1.OFFICE_CODE = #{officeCode}
																					) UPI 
																					   ON URP.PRD_RES_NO	 = UPI.RES_NO
																					  AND URP.RES_GROUP_CODE = UPI.RES_GROUP_CODE
																					  AND URP.RES_GROUP_SEQ	 = UPI.RES_GROUP_SEQ
																					  AND URP.ITEM_SEQ	     = UPI.ITEM_SEQ		
																					LEFT OUTER JOIN EVENT_PRODUCT_SURGICAL EPS
																			  		  ON UPI.OFFICE_CODE   	    = EPS.OFFICE_CODE
																					 AND UPI.EVENT_UPDATE_SEQ   = EPS.EVENT_UPDATE_SEQ
																					 AND UPI.EVENT_SEQ		    = EPS.EVENT_SEQ
																					 AND UPI.EVENT_SUB_SEQ	    = EPS.EVENT_SUB_SEQ
																					 AND UPI.EVENT_PRODUCT_CODE = EPS.EVENT_PRODUCT_CODE
																			WHERE URP.OFFICE_CODE = #{officeCode}
																		) X
																	GROUP BY 
																		  X.RES_NO, X.RES_GROUP_CODE, X.RES_GROUP_SEQ, X.GROUP_SEQ
																  ) Y
															GROUP BY 
																  Y.RES_NO, Y.RES_GROUP_CODE, Y.RES_GROUP_SEQ
							         ) ITM 
								    ON USR.RES_NO = ITM.RES_NO
							  WHERE 1=1
							]]>
							<if test="start != null and start != '' and end != null and end != ''">	
								AND DATE_FORMAT(USR.ORDER_DATE, '%Y%m%d') BETWEEN #{start} AND #{end}
							</if>
							<if test="sort != null and sort != ''">	
								AND USR.VISIT_TYPE = #{sort}
							</if>
							<if test="field != null and field != ''">	
								AND (USR.NAME LIKE TRIM(CONCAT('%', #{field}, '%')) OR
		                 			 ITM.ITEM_NAME LIKE TRIM(CONCAT('%',  #{field}, '%')))
							</if>
							<![CDATA[		 	
								GROUP BY USR.RES_NO
								ORDER BY IF(USR.VISIT_STATUS = 'N', 1, 2) ASC,
									     IF(#{view} = 'create', USR.ORDER_DATE, USR.RES_DATE) DESC								
							) X LEFT OUTER JOIN ( -- 예약일 변경 이력
												SELECT 
													   HS.OFFICE_CODE
													 , HS.RES_NO
													 , GROUP_CONCAT(HS.RES_DATE SEPARATOR '\n')     AS RES_DATE_AFTER
													 , GROUP_CONCAT(HS.RES_DATE_HIS SEPARATOR '\n') AS RES_DATE_BEFORE
													 , GROUP_CONCAT(HS.UPDATE_USER SEPARATOR '\n')  AS UPDATE_USER
												  FROM (
														SELECT H.OFFICE_CODE
															 , H.RES_NO
															 , CONCAT(DATE_FORMAT(H.RES_DATE, '%Y년 %m월 %d일')
																	 , CASE DAYOFWEEK(H.RES_DATE) 
																			WHEN '1' THEN '(일)'
																			WHEN '2' THEN '(월)'		
																			WHEN '3' THEN '(화)'		
																			WHEN '4' THEN '(수)'		
																			WHEN '5' THEN '(목)'		
																			WHEN '6' THEN '(금)'		
																			WHEN '7' THEN '(토)'
																		END
																	 , ' '
																	 , CASE WHEN SUBSTR(H.RES_TIME,1,2) > 12 THEN CONCAT('오후 ', IF(SUBSTR(H.RES_TIME,1,2) - 12 < 10
																													 , CONCAT('0', SUBSTR(H.RES_TIME,1,2) - 12), SUBSTR(H.RES_TIME,1,2) - 12)
																													 , ':'
																													 , SUBSTR(H.RES_TIME,3))
																			ELSE CONCAT('오전 ', SUBSTR(H.RES_TIME,1,2), ':', SUBSTR(H.RES_TIME,3))
																		END) RES_DATE	-- 변경후 예약일
															   , CONCAT(DATE_FORMAT(H.RES_DATE_HIS, '%Y년 %m월 %d일')
																	 , CASE DAYOFWEEK(H.RES_DATE) 
																			WHEN '1' THEN '(일)'
																			WHEN '2' THEN '(월)'		
																			WHEN '3' THEN '(화)'		
																			WHEN '4' THEN '(수)'		
																			WHEN '5' THEN '(목)'		
																			WHEN '6' THEN '(금)'		
																			WHEN '7' THEN '(토)'
																		END
																	 , ' '
																	 , CASE WHEN SUBSTR(H.RES_TIME_HIS,1,2) > 12 THEN CONCAT('오후 ', IF(SUBSTR(H.RES_TIME_HIS,1,2) - 12 < 10
																													 , CONCAT('0', SUBSTR(H.RES_TIME_HIS,1,2) - 12), SUBSTR(H.RES_TIME_HIS,1,2) - 12)
																													 , ':'
																													 , SUBSTR(H.RES_TIME_HIS,3))
																			ELSE CONCAT('오전 ', SUBSTR(H.RES_TIME,1,2), ':', SUBSTR(H.RES_TIME_HIS,3))
																		END) RES_DATE_HIS	-- 변경전 예약일
															, CONCAT(S.SYS_NAME, ' ', SUBSTR(DATE_FORMAT(H.UPDATE_DATE, '%Y.%m.%d %H:%i'),3)) UPDATE_USER
														 FROM USER_RESERVE_DATE_HISTORY H
															  INNER JOIN SYS_USER_INFO S                 
																 ON H.UPDATE_USER = S.SYS_USER_ID
														WHERE H.OFFICE_CODE   = #{officeCode}
														) HS
												GROUP BY HS.RES_NO
							) Y 
			                 ON X.OFFICE_CODE   = Y.OFFICE_CODE
			                AND X.RES_NO	    = Y.RES_NO		                      
		      ) Z           
			LIMIT 15 OFFSET #{offset}
    	]]>
	</select>

	<select id="getReserveStatus" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO" resultType="camelHashMap">
		<![CDATA[
			/*
			 * SQL ID      : res.getReserveStatus
			 * Description : 예약 현황 조회
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.05.31  이승현      최초 생성
		     */
		]]>
		<![CDATA[			
			SELECT 
				   CONCAT(DATE_FORMAT(X.RES_DATE, '%m월 %d일')
						 , CASE DAYOFWEEK(X.RES_DATE) 
								WHEN '1' THEN '(일)'
								WHEN '2' THEN '(월)'		
								WHEN '3' THEN '(화)'		
								WHEN '4' THEN '(수)'		
								WHEN '5' THEN '(목)'		
								WHEN '6' THEN '(금)'		
								WHEN '7' THEN '(토)'
							END
		                 , ' '
		                 , (
						    IF(SUBSTR(X.RES_TIME, 1, 2) > 12, 
							   CONCAT('오후 ', REPLACE(12 - SUBSTR(X.RES_TIME, 1, 2), '-', '0'), ':', SUBSTR(X.RES_TIME, 3)), 
							   CONCAT('오전 ', SUBSTR(X.RES_TIME, 1, 2),  ':', SUBSTR(X.RES_TIME, 3)))                 
							)
				   ) AS RES_DATE   
			     , X.PRD_MST_CODE
                 , X.PRD_MST_NAME
                 , IF(X.PRD_MST_CODE = V.PRD_MST_CODE, 1, 0) AS IS_ACTIVE	-- 신청예약 대분류여부
			     , X.MAX_CNT	 								-- 총 예약가능 인원
			     , IFNULL(Z.TOTAL_RES_CNT, 0) AS TOTAL_RES_CNT	-- 총 예약확정 인원
			     , X.RES_CNT	 								-- 대분류별 신청가능 개수
			     , IFNULL(Y.PRD_RES_CNT, 0)   AS PRD_RES_CNT 	-- 대분류별 예약확정 개수	      
			  FROM (-- 선택 일자별 예약 설정
					SELECT 
						   HR.OFFICE_CODE
						 , #{resDate} 		   AS RES_DATE
						 , SUBSTR(HR.HHMM,1,4) AS RES_TIME
						 , HR.MAX_CNT 
						 , HR.PRD_MST_CODE
						 , PSM.PRD_MST_NAME
						 , HR.RES_CNT
					  FROM HOSPITAL_RESERVE HR
						   LEFT OUTER JOIN PRODUCT_SURGICAL_MASTER PSM
							 ON HR.OFFICE_CODE   = PSM.OFFICE_CODE
						    AND HR.PRD_MST_CODE  = PSM.PRD_MST_CODE
					WHERE HR.OFFICE_CODE   = #{officeCode}
					  AND (HR.RES_DATE, HR.DATA_DAY) IN (SELECT IFNULL(MAX(RES_DATE), '00000000') 
															  , IF(IFNULL(MAX(RES_DATE), '00000000') = '00000000', DAYOFWEEK(#{resDate})-1, '0')
														   FROM HOSPITAL_RESERVE_MASTER A
														  WHERE OFFICE_CODE   = #{officeCode}
															AND RES_DATE      = #{resDate})
					  AND SUBSTR(HR.HHMM,1,4) = #{resTime}
					) X 
					LEFT OUTER JOIN (-- 선택 일자별 대분류 예약 확정 수
									SELECT 
										   UR.OFFICE_CODE 	
										 , UR.PRD_MST_CODE
										 , COUNT(UR.PRD_MST_CODE) AS PRD_RES_CNT
									  FROM (
											SELECT 
												   U4.OFFICE_CODE
												 , U4.RES_NO
												 , U4.UPDATE_SEQ
												 , U4.PRD_SUB_CODE     
												 , PM.PRD_MST_CODE
											  FROM (
													SELECT 
															U1.OFFICE_CODE
														  , U1.RES_NO      
														  , U2.UPDATE_SEQ
														  , U3.PRD_SUB_CODE
													   FROM USER_RESERVE U1
															INNER JOIN (
																		SELECT 
																			   URI.OFFICE_CODE
																			 , URI.RES_NO
																			 , URD.UPDATE_SEQ    
																			 , URD.PRD_ITEM_CODE
																		  FROM USER_RESERVE_ITEM URI
																			   INNER JOIN USER_RESERVE_ITEM_DETAIL URD
																				  ON URI.OFFICE_CODE    = URD.OFFICE_CODE
																				 AND URI.RES_NO	        = URD.RES_NO
																				 AND URI.RES_GROUP_CODE = URD.RES_GROUP_CODE
																				 AND URI.RES_GROUP_SEQ  = URD.RES_GROUP_SEQ
																				 AND URI.RES_GROUP_SEQ  = 1	-- 최초 예약에 관해서만 계산
																				 AND URD.GROUP_SEQ	    = 1	-- 예약 상품의 이벤트 시술은 패키지, 횟수차감을 고려하여 첫번째 시술로 계산한다.
																		 WHERE URI.OFFICE_CODE    = #{officeCode}																		     
																		   AND URI.ITEM_STATUS    = 'R'																
																		 UNION ALL					
																		SELECT 
																			   URP.OFFICE_CODE
																			 , URP.RES_NO
																			 , UPI.UPDATE_SEQ             
																			 , CONCAT('N', UPI.UPDATE_SEQ, UPI.PRD_ITEM_CODE) AS ITEM_CODE
																		  FROM USER_RESERVE_PRODUCT URP
																			   INNER JOIN USER_PRODUCT_ITEM UPI
																				  ON URP.OFFICE_CODE    = UPI.OFFICE_CODE
																				 AND URP.PRD_RES_NO		= UPI.RES_NO
																				 AND URP.RES_GROUP_CODE = UPI.RES_GROUP_CODE
                                                                                 AND URP.RES_GROUP_SEQ  = UPI.RES_GROUP_SEQ																				 
																				 AND URP.ITEM_SEQ       = UPI.ITEM_SEQ
																		 WHERE URP.OFFICE_CODE   = #{officeCode}
															) U2
														    ON U1.OFFICE_CODE   = U2.OFFICE_CODE
														   AND U1.RES_NO		= U2.RES_NO
														 INNER JOIN PRODUCT_SURGICAL_ITEM U3
															ON U2.OFFICE_CODE   = U3.OFFICE_CODE
														   AND U2.UPDATE_SEQ	= U3.UPDATE_SEQ
														   AND U2.PRD_ITEM_CODE = U3.PRD_ITEM_CODE
													 WHERE U1.OFFICE_CODE	= #{officeCode}
													   AND U1.RES_DATE		= #{resDate}
													   AND U1.RES_TIME		= #{resTime}
                                                       AND U1.VISIT_STATUS  = 'Y'
													   AND U1.USE_STATUS	IN ('Y', 'C')													   											   
													) U4
												  INNER JOIN PRODUCT_SURGICAL_SUB PSS
													 ON U4.OFFICE_CODE	 = PSS.OFFICE_CODE
													AND U4.UPDATE_SEQ	 = PSS.UPDATE_SEQ
													AND U4.PRD_SUB_CODE  = PSS.PRD_SUB_CODE     
												  INNER JOIN PRODUCT_SURGICAL PS
													 ON PSS.OFFICE_CODE	  = PS.OFFICE_CODE
													AND PSS.UPDATE_SEQ	  = PS.UPDATE_SEQ
													AND PSS.PRD_CODE      = PS.PRD_CODE     
												  INNER JOIN PRODUCT_SURGICAL_MASTER PM
													 ON PS.OFFICE_CODE	 = PM.OFFICE_CODE         
													AND PS.PRD_MST_CODE  = PM.PRD_MST_CODE	
											   GROUP BY 
													U4.OFFICE_CODE, U4.RES_NO, PM.PRD_MST_CODE
											) UR
										GROUP BY 
											UR.OFFICE_CODE, UR.PRD_MST_CODE									
			    ) Y
				  ON X.OFFICE_CODE	 = Y.OFFICE_CODE
				 AND X.PRD_MST_CODE  = Y.PRD_MST_CODE
				LEFT OUTER JOIN ( -- 총 예약확정 인원
								  SELECT COUNT(RES_NO) AS TOTAL_RES_CNT
									FROM USER_RESERVE
								   WHERE OFFICE_CODE   = #{officeCode}
                                     AND RES_DATE      = #{resDate}
                                     AND RES_TIME      = #{resTime}
									 AND VISIT_STATUS  = 'Y'
			                         AND USE_STATUS	   IN ('Y', 'C')
								   GROUP BY RES_TIME 
				) Z ON 1=1	
				LEFT OUTER JOIN ( -- 선택한 예약정보
								  SELECT 
									     U2.OFFICE_CODE
									   , U2.PRD_MST_CODE
									FROM ( -- 예약 상품 정보
									  	   SELECT 
											      U1.OFFICE_CODE
												, U1.UPDATE_SEQ
												, U1.PRD_ITEM_CODE
												, PM.PRD_MST_CODE
											 FROM (
											 	    SELECT
														   U0.OFFICE_CODE
													     , U0.UPDATE_SEQ
													     , U0.PRD_ITEM_CODE
													     , U0.PRD_SUB_CODE
													  FROM (
															SELECT 
																   I0.OFFICE_CODE
																 , I0.UPDATE_SEQ
																 , I0.PRD_ITEM_CODE
																 , PSI.PRD_SUB_CODE
															  FROM (
																	 SELECT 
																			URI.OFFICE_CODE
																		  , API.UPDATE_SEQ             	  
																		  , API.PRD_ITEM_CODE		  
																	   FROM USER_RESERVE_ITEM URI
																			INNER JOIN ALL_PRODUCT_INFO API
																			   ON URI.OFFICE_CODE    = API.OFFICE_CODE
																			  AND URI.RES_GROUP_CODE = API.ITEM_CODE	
																			  AND URI.RES_GROUP_SEQ  = 1 -- 최초 예약에 관해서만 계산			
																	  WHERE URI.OFFICE_CODE    = #{officeCode}
																		AND URI.RES_NO		   = #{resNo}
																		AND URI.ITEM_TYPE      = 'N'
																		AND URI.ITEM_STATUS    = 'R'
																	UNION ALL
																	SELECT 
																			URI.OFFICE_CODE
																		  , ITM.EVENT_UPDATE_SEQ AS UPDATE_SEQ
																		  , ITM.PRD_ITEM_CODE
																	   FROM USER_RESERVE_ITEM URI
																			INNER JOIN ALL_EVENT_PRODUCT_INFO API
																			   ON URI.OFFICE_CODE    = API.OFFICE_CODE
																			  AND URI.RES_GROUP_CODE = API.ITEM_CODE
																			  AND URI.RES_GROUP_SEQ  = 1 -- 최초 예약에 관해서만 계산		
																			INNER JOIN EVENT_PRODUCT_SURGICAL_ITEM ITM
																			   ON API.OFFICE_CODE   	 = ITM.OFFICE_CODE
																			  AND API.EVENT_UPDATE_SEQ   = ITM.EVENT_UPDATE_SEQ	
																			  AND API.EVENT_SEQ	  	     = ITM.EVENT_SEQ
																			  AND API.EVENT_SUB_SEQ 	 = ITM.EVENT_SUB_SEQ
																			  AND API.EVENT_PRODUCT_CODE = ITM.EVENT_PRODUCT_CODE
																			  -- 예약 상품의 이벤트 시술은 패키지, 횟수차감을 고려하여 첫번째 시술로 계산한다. 
																			  AND ITM.EVENT_DETAIL_SEQ   = 1        
																	  WHERE URI.OFFICE_CODE    = #{officeCode}
																		AND URI.RES_NO		   = #{resNo}
																		AND URI.ITEM_TYPE     <> 'N'
																	    AND URI.ITEM_STATUS    = 'R'
																	) I0 
																	INNER JOIN PRODUCT_SURGICAL_ITEM PSI
																	   ON I0.OFFICE_CODE   = PSI.OFFICE_CODE
																	  AND I0.UPDATE_SEQ    = PSI.UPDATE_SEQ
																	  AND I0.PRD_ITEM_CODE = PSI.PRD_ITEM_CODE
																) U0
											 	      UNION ALL
													  -- 예약 시술권 정보
													  SELECT 
															URP.OFFICE_CODE
														  , UPI.UPDATE_SEQ             
														  , PSI.PRD_ITEM_CODE
														  , PSI.PRD_SUB_CODE
													   FROM USER_RESERVE_PRODUCT URP
															INNER JOIN USER_PRODUCT_ITEM UPI
															   ON URP.OFFICE_CODE    = UPI.OFFICE_CODE
															  AND URP.PRD_RES_NO	 = UPI.RES_NO
															  AND URP.RES_GROUP_CODE = UPI.RES_GROUP_CODE
															  AND URP.RES_GROUP_SEQ  = UPI.RES_GROUP_SEQ
															  AND URP.ITEM_SEQ	     = UPI.ITEM_SEQ
															INNER JOIN PRODUCT_SURGICAL_ITEM PSI
															   ON UPI.OFFICE_CODE    = PSI.OFFICE_CODE
															  AND UPI.UPDATE_SEQ	 = PSI.UPDATE_SEQ
															  AND UPI.PRD_ITEM_CODE  = PSI.PRD_ITEM_CODE
													   WHERE URP.OFFICE_CODE   = #{officeCode}
													 	 AND URP.RES_NO		   = #{resNo}
												  ) U1 
												  INNER JOIN PRODUCT_SURGICAL_SUB PSS
													 ON U1.OFFICE_CODE	 = PSS.OFFICE_CODE
													AND U1.UPDATE_SEQ	 = PSS.UPDATE_SEQ
													AND U1.PRD_SUB_CODE  = PSS.PRD_SUB_CODE     
												  INNER JOIN PRODUCT_SURGICAL PS
													 ON PSS.OFFICE_CODE	  = PS.OFFICE_CODE
													AND PSS.UPDATE_SEQ	  = PS.UPDATE_SEQ
													AND PSS.PRD_CODE      = PS.PRD_CODE     
												  INNER JOIN PRODUCT_SURGICAL_MASTER PM
													 ON PS.OFFICE_CODE	 = PM.OFFICE_CODE         
													AND PS.PRD_MST_CODE  = PM.PRD_MST_CODE		
											) U2
										GROUP BY U2.PRD_MST_CODE            
		            ) V
				  ON X.OFFICE_CODE   = V.OFFICE_CODE
				 AND X.PRD_MST_CODE  = V.PRD_MST_CODE
		]]>
	</select>
	
	<select id="getSubReserveStatus" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO" resultType="camelHashMap">
		<![CDATA[
			/*
			 * SQL ID      : res.getSubReserveStatus
			 * Description : 특정 소분류 예약 현황 조회
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.05.31  이승현      최초 생성
		     */
		]]>
		<![CDATA[			    
			SELECT 
				   HRS.PRD_SUB_CODE							 -- 소분류코드	      
				 , ITM.PRD_SUB_NAME
				 , ITM.PRD_MST_CODE							 -- 대분류코드
				 , ITM.PRD_MST_NAME
				 , IF(HRS.PRD_SUB_CODE = V.PRD_SUB_CODE, 1, 0) AS IS_ACTIVE	-- 신청예약 소분류여부
		         , HRS.RES_CNT								 -- 소분류 예약가능 인원
				 , IFNULL(PRD.PRD_SUB_CNT, 0) AS PRD_SUB_CNT -- 소분류 예약확정 인원         
			 FROM HOSPITAL_RESERVE_SUB HRS
				  LEFT OUTER JOIN ( -- 확정된 예약시술별 소분류 개수					
									SELECT 
										   C.PRD_SUB_CODE
										 , C.UPDATE_SEQ
										 , COUNT(C.PRD_SUB_CODE) AS PRD_SUB_CNT     
									  FROM (
											SELECT 
												   A.RES_NO
												 , A.UPDATE_SEQ
												 , B.PRD_SUB_CODE
											  FROM (
													SELECT 
														   UR.OFFICE_CODE
														 , UR.RES_DATE
														 , UR.RES_NO
														 , UD.UPDATE_SEQ
														 , UD.PRD_ITEM_CODE
													  FROM USER_RESERVE UR
														   INNER JOIN (	-- 예약상품(일반시술)
																		SELECT 
																			   URI.RES_NO
																			 , URD.UPDATE_SEQ    
																			 , URD.PRD_ITEM_CODE
																		  FROM USER_RESERVE_ITEM URI
																			   INNER JOIN USER_RESERVE_ITEM_DETAIL URD
																				  ON URI.OFFICE_CODE    = URD.OFFICE_CODE
																				 AND URI.RES_NO	        = URD.RES_NO
																				 AND URI.RES_GROUP_CODE = URD.RES_GROUP_CODE
																				 AND URI.RES_GROUP_SEQ  = URD.RES_GROUP_SEQ
																				 AND URI.RES_GROUP_SEQ  = 1 -- 최초 예약에 관해서만 계산
																				 AND URD.GROUP_SEQ	    = 1	-- 예약 상품의 이벤트 시술은 패키지, 횟수차감을 고려하여 첫번째 시술로 계산한다.
																		 WHERE URI.OFFICE_CODE    = #{officeCode}																		   																		   																		  
																		   AND URI.ITEM_STATUS    = 'R' 
																		 UNION ALL					
																		SELECT 
																			   URP.RES_NO
																			 , UPI.UPDATE_SEQ             
																			 , UPI.PRD_ITEM_CODE
																		  FROM USER_RESERVE_PRODUCT URP
																			   INNER JOIN USER_PRODUCT_ITEM UPI
																				  ON URP.OFFICE_CODE    = UPI.OFFICE_CODE
																				 AND URP.PRD_RES_NO		= UPI.RES_NO
																				 AND URP.RES_GROUP_CODE = UPI.RES_GROUP_CODE
																				 AND URP.RES_GROUP_SEQ  = UPI.RES_GROUP_SEQ
																				 AND URP.ITEM_SEQ       = UPI.ITEM_SEQ
																		 WHERE URP.OFFICE_CODE   = #{officeCode}
																		 GROUP BY RES_NO, PRD_ITEM_CODE
															) UD
														   ON UR.RES_NO	= UD.RES_NO
													 WHERE UR.OFFICE_CODE   = #{officeCode}
													   AND UR.RES_DATE      = #{resDate}
													   AND UR.RES_TIME 	    = #{resTime}
													   AND UR.VISIT_STATUS	= 'Y'
													   AND UR.USE_STATUS	IN ('Y', 'C')
													) A INNER JOIN (
																	SELECT 
																		   PSI.OFFICE_CODE
																		 , PSI.UPDATE_SEQ
																		 , PSI.PRD_ITEM_CODE
																		 , PSS.PRD_SUB_CODE
																	  FROM PRODUCT_SURGICAL_ITEM PSI	
																		   INNER JOIN PRODUCT_SURGICAL_SUB PSS
																			  ON PSI.OFFICE_CODE   = PSS.OFFICE_CODE        
																			 AND PSI.UPDATE_SEQ    = PSS.UPDATE_SEQ	    	 
																			 AND PSI.PRD_SUB_CODE  = PSS.PRD_SUB_CODE
																	WHERE PSI.OFFICE_CODE   = #{officeCode}
													) B
												  ON A.UPDATE_SEQ    = B.UPDATE_SEQ
												 AND A.PRD_ITEM_CODE = B.PRD_ITEM_CODE
											GROUP BY 
												A.RES_NO, A.UPDATE_SEQ, B.PRD_SUB_CODE
										 ) C
								  GROUP BY 
									  C.UPDATE_SEQ, C.PRD_SUB_CODE
				  ) PRD
					ON HRS.PRD_SUB_CODE = PRD.PRD_SUB_CODE
				  LEFT OUTER JOIN (
								   SELECT 
										   PSS.OFFICE_CODE
										 , PSS.UPDATE_SEQ
										 , PSS.PRD_SUB_CODE
										 , PSS.PRD_SUB_NAME
										 , PSM.PRD_MST_CODE
										 , PSM.PRD_MST_NAME
									  FROM PRODUCT_SURGICAL_SUB PSS									
										   INNER JOIN PRODUCT_SURGICAL PS
											  ON PSS.OFFICE_CODE   = PS.OFFICE_CODE        
											 AND PSS.UPDATE_SEQ    = PS.UPDATE_SEQ	    	 
											 AND PSS.PRD_CODE 	   = PS.PRD_CODE      		 
										   INNER JOIN PRODUCT_SURGICAL_MASTER PSM
											  ON PS.OFFICE_CODE   = PSM.OFFICE_CODE        
											 AND PS.PRD_MST_CODE  = PSM.PRD_MST_CODE
									WHERE PSS.OFFICE_CODE   = #{officeCode}
									  AND PSS.UPDATE_SEQ    = (SELECT IFNULL(MAX(E1.EVENT_UPDATE_SEQ), 
																				(SELECT MAX(EVENT_UPDATE_SEQ)				
																				   FROM EVENT_MASTER
																				  WHERE OFFICE_CODE   = #{officeCode})) UPDATE_SEQ	 
																 FROM EVENT_MASTER E1	   
																WHERE E1.OFFICE_CODE = #{officeCode}
																  AND #{resDate} BETWEEN E1.START_DATE AND E1.END_DATE)
				   ) ITM
				    ON HRS.PRD_SUB_CODE = ITM.PRD_SUB_CODE
		          LEFT OUTER JOIN ( -- 선택한 예약정보
								   SELECT 
										  U2.OFFICE_CODE
									    , U2.PRD_SUB_CODE
									 FROM (  
										   SELECT 
												  U1.OFFICE_CODE
												, U1.UPDATE_SEQ
												, U1.PRD_ITEM_CODE
												, PSS.PRD_SUB_CODE
											 FROM (
													SELECT 
														   A.OFFICE_CODE
														 , A.UPDATE_SEQ
														 , A.PRD_ITEM_CODE
														 , A.PRD_SUB_CODE  
													  FROM (-- 예약 상품 정보
															SELECT
																   U0.OFFICE_CODE
															     , U0.UPDATE_SEQ
															     , U0.PRD_ITEM_CODE
															     , U0.PRD_SUB_CODE
															  FROM (
																	SELECT 
																		   I0.OFFICE_CODE
																		 , I0.UPDATE_SEQ
																		 , I0.PRD_ITEM_CODE
																		 , PSI.PRD_SUB_CODE
																	  FROM (
																			 SELECT 
																					URI.OFFICE_CODE
																				  , API.UPDATE_SEQ             	  
																				  , API.PRD_ITEM_CODE		  
																			   FROM USER_RESERVE_ITEM URI
																					INNER JOIN ALL_PRODUCT_INFO API
																					   ON URI.OFFICE_CODE    = API.OFFICE_CODE
																					  AND URI.RES_GROUP_CODE = API.ITEM_CODE	
																					  AND URI.RES_GROUP_SEQ  = 1	-- 최초 예약에 관해서만 계산
																			  WHERE URI.OFFICE_CODE   = #{officeCode}
																				AND URI.RES_NO		  = #{resNo}
																				AND URI.ITEM_TYPE     = 'N'
																				AND URI.ITEM_STATUS   = 'R'
																			UNION ALL
																			SELECT 
																					URI.OFFICE_CODE
																				  , ITM.EVENT_UPDATE_SEQ AS UPDATE_SEQ
																				  , ITM.PRD_ITEM_CODE
																			   FROM USER_RESERVE_ITEM URI
																					INNER JOIN ALL_EVENT_PRODUCT_INFO API
																					   ON URI.OFFICE_CODE    = API.OFFICE_CODE
																					  AND URI.RES_GROUP_CODE = API.ITEM_CODE
																					  AND URI.RES_GROUP_SEQ  = 1	-- 최초예약
																					INNER JOIN EVENT_PRODUCT_SURGICAL_ITEM ITM
																					   ON API.OFFICE_CODE   	 = ITM.OFFICE_CODE
																					  AND API.EVENT_UPDATE_SEQ   = ITM.EVENT_UPDATE_SEQ	
																					  AND API.EVENT_SEQ	  	     = ITM.EVENT_SEQ
																					  AND API.EVENT_SUB_SEQ 	 = ITM.EVENT_SUB_SEQ
																					  AND API.EVENT_PRODUCT_CODE = ITM.EVENT_PRODUCT_CODE
																					  -- 예약 상품의 이벤트 시술은 패키지, 횟수차감을 고려하여 첫번째 시술로 계산한다. 
																					  AND ITM.EVENT_DETAIL_SEQ   = 1        
																			  WHERE URI.OFFICE_CODE   = #{officeCode}
																				AND URI.RES_NO		  = #{resNo}
																				AND URI.ITEM_TYPE    <> 'N'
																				AND URI.ITEM_STATUS   = 'R'
																			) I0 
																			INNER JOIN PRODUCT_SURGICAL_ITEM PSI
																			   ON I0.OFFICE_CODE   = PSI.OFFICE_CODE
																			  AND I0.UPDATE_SEQ    = PSI.UPDATE_SEQ
																			  AND I0.PRD_ITEM_CODE = PSI.PRD_ITEM_CODE
																	) U0
															UNION ALL
															-- 예약 시술권 정보
															SELECT 
																	URP.OFFICE_CODE
																  , UPI.UPDATE_SEQ             
																  , PSI.PRD_ITEM_CODE
																  , PSI.PRD_SUB_CODE
															   FROM USER_RESERVE_PRODUCT URP
																	INNER JOIN USER_PRODUCT_ITEM UPI
																	   ON URP.OFFICE_CODE    = UPI.OFFICE_CODE
																	  AND URP.PRD_RES_NO	 = UPI.RES_NO
																	  AND URP.RES_GROUP_CODE = UPI.RES_GROUP_CODE
																	  AND URP.RES_GROUP_SEQ  = UPI.RES_GROUP_SEQ
																	  AND URP.ITEM_SEQ	     = UPI.ITEM_SEQ
																	INNER JOIN PRODUCT_SURGICAL_ITEM PSI
																	   ON UPI.OFFICE_CODE    = PSI.OFFICE_CODE
																	  AND UPI.UPDATE_SEQ	 = PSI.UPDATE_SEQ
																	  AND UPI.PRD_ITEM_CODE  = PSI.PRD_ITEM_CODE
															  WHERE URP.OFFICE_CODE   = #{officeCode}
																AND URP.RES_NO		  = #{resNo}
															 ) A
														GROUP BY 
															A.UPDATE_SEQ, A.PRD_ITEM_CODE 
												  ) U1 
												  INNER JOIN PRODUCT_SURGICAL_SUB PSS
													 ON U1.OFFICE_CODE	 = PSS.OFFICE_CODE
													AND U1.UPDATE_SEQ	 = PSS.UPDATE_SEQ
													AND U1.PRD_SUB_CODE  = PSS.PRD_SUB_CODE  												
											) U2
										GROUP BY U2.PRD_SUB_CODE     
		          ) V
		           ON HRS.OFFICE_CODE   = V.OFFICE_CODE
				  AND HRS.PRD_SUB_CODE  = V.PRD_SUB_CODE
			WHERE HRS.OFFICE_CODE = #{officeCode}
			  AND (HRS.RES_DATE, HRS.DATA_DAY) IN (SELECT IFNULL(MAX(RES_DATE), '00000000') 
														, IF(IFNULL(MAX(RES_DATE), '00000000') = '00000000', DAYOFWEEK(#{resDate})-1, '0')
													 FROM HOSPITAL_RESERVE_SUB A
													WHERE OFFICE_CODE   = #{officeCode}
													  AND RES_DATE      = #{resDate})
		]]>
	</select>

	<select id="getAllReserveStatus" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO" resultType="camelHashMap">
		<![CDATA[
			/*
			 * SQL ID      : res.getAllReserveStatus
			 * Description : 전체 예약 현황 조회
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.07.01  이승현      최초 생성
		     */
		]]>
		<![CDATA[			
			SELECT 
				   X.RES_TIME 
			     , X.HHMM	
				 , GROUP_CONCAT(X.PRD_MST_NAME SEPARATOR '\n') AS PRD_MST_NAME	-- 대분류명
				 , X.MAX_CNT  													-- 총 예약가능 인원
				 , IFNULL(Z.TOTAL_RES_CNT, 0) AS TOTAL_RES_CNT					-- 총 예약확정 인원
				 , GROUP_CONCAT(X.RES_CNT SEPARATOR '\n')				   AS RES_CNT		-- 대분류별 신청가능 개수
				 , GROUP_CONCAT(IFNULL(Y.PRD_RES_CNT,0) SEPARATOR '\n')    AS PRD_RES_CNT	-- 대분류별 예약확정 개수     
				 , GROUP_CONCAT((CASE WHEN X.PRD_MST_CODE = V.PRD_MST_CODE AND #{resTime} = X.RES_TIME THEN 1
									  ELSE 0
								  END) SEPARATOR '\n') AS IS_ACTIVE							-- 신청예약 대분류여부
			  FROM (
					-- 선택 일자별 예약 설정
					SELECT 
						   HR.OFFICE_CODE			 
						 , SUBSTR(HR.HHMM,1,4) AS RES_TIME
			             , CONCAT(SUBSTR(HR.HHMM,1,2), ':', SUBSTR(HR.HHMM,3,2),
								  '~',
			                      SUBSTR(HR.HHMM,5,2), ':', SUBSTR(HR.HHMM,7)) AS HHMM
						 , HR.MAX_CNT 
						 , HR.PRD_MST_CODE
						 , PSM.PRD_MST_NAME
						 , HR.RES_CNT
					  FROM HOSPITAL_RESERVE HR
						   LEFT OUTER JOIN PRODUCT_SURGICAL_MASTER PSM
							 ON HR.OFFICE_CODE   = PSM.OFFICE_CODE
							AND HR.PRD_MST_CODE  = PSM.PRD_MST_CODE
					WHERE HR.OFFICE_CODE   = #{officeCode}
					  AND (HR.RES_DATE, HR.DATA_DAY) IN (SELECT IFNULL(MAX(RES_DATE), '00000000') 
															  , IF(IFNULL(MAX(RES_DATE), '00000000') = '00000000', DAYOFWEEK(#{resDate})-1, '0')
														   FROM HOSPITAL_RESERVE_MASTER A
														  WHERE OFFICE_CODE   = #{officeCode}
															AND RES_DATE      = #{resDate})
					) X
				    LEFT OUTER JOIN (
									-- 선택 일자별 대분류 예약 확정 수
									SELECT 
										   UR.RES_TIME
										 , UR.PRD_MST_CODE
										 , COUNT(UR.PRD_MST_CODE) AS PRD_RES_CNT
									  FROM (
											SELECT 
												   U3.OFFICE_CODE
												 , U3.RES_NO
												 , U3.RES_TIME
												 , U3.UPDATE_SEQ
												 , U3.PRD_SUB_CODE     
												 , PM.PRD_MST_CODE
											  FROM (
													SELECT 
															U1.OFFICE_CODE
														  , U1.RES_NO      
														  , U1.RES_TIME
														  , U2.UPDATE_SEQ
														  , U2.PRD_SUB_CODE
														  , U2.PRD_CODE
													   FROM USER_RESERVE U1
															INNER JOIN (
																		SELECT 
																			   A.OFFICE_CODE
																			 , A.RES_NO
																			 , A.UPDATE_SEQ
																			 , B.PRD_SUB_CODE   
																			 , B.PRD_CODE    
																		  FROM ( 																				
																				SELECT 
																					   URI.OFFICE_CODE
																					 , URI.RES_NO
																					 , URD.UPDATE_SEQ    
																					 , URD.PRD_ITEM_CODE
																				  FROM USER_RESERVE_ITEM URI
																					   INNER JOIN USER_RESERVE_ITEM_DETAIL URD
																						  ON URI.OFFICE_CODE    = URD.OFFICE_CODE
																						 AND URI.RES_NO	        = URD.RES_NO
																						 AND URI.RES_GROUP_CODE = URD.RES_GROUP_CODE
																						 AND URI.RES_GROUP_SEQ  = URD.RES_GROUP_SEQ
																						 AND URI.RES_GROUP_SEQ  = 1	-- 최초 예약에 관해서만 계산
																						 AND URD.GROUP_SEQ	    = 1	-- 예약 상품의 이벤트 시술은 패키지, 횟수차감을 고려하여 첫번째 시술로 계산한다.
																				 WHERE URI.OFFICE_CODE    = #{officeCode}																		     
																				   AND URI.ITEM_STATUS    = 'R'						
																				 UNION ALL					
																				SELECT 
																					   URP.OFFICE_CODE
																					 , URP.RES_NO
																					 , UPI.UPDATE_SEQ             
																					 , UPI.PRD_ITEM_CODE
																				  FROM USER_RESERVE_PRODUCT URP
																					   INNER JOIN USER_PRODUCT_ITEM UPI
																						  ON URP.OFFICE_CODE    = UPI.OFFICE_CODE
																						 AND URP.PRD_RES_NO		= UPI.RES_NO
																						 AND URP.RES_GROUP_CODE = UPI.RES_GROUP_CODE
																						 AND URP.RES_GROUP_SEQ  = UPI.RES_GROUP_SEQ
																						 AND URP.ITEM_SEQ       = UPI.ITEM_SEQ
																				 WHERE URP.OFFICE_CODE   = #{officeCode}
																				 GROUP BY RES_NO, PRD_ITEM_CODE
																				) A INNER JOIN (
																								SELECT 
																									   PSI.OFFICE_CODE
																									 , PSI.UPDATE_SEQ
																									 , PSI.PRD_ITEM_CODE
																									 , PSS.PRD_SUB_CODE
																									 , PSS.PRD_CODE
																								  FROM PRODUCT_SURGICAL_ITEM PSI	
																									   INNER JOIN PRODUCT_SURGICAL_SUB PSS
																										  ON PSI.OFFICE_CODE   = PSS.OFFICE_CODE        
																										 AND PSI.UPDATE_SEQ    = PSS.UPDATE_SEQ	    	 
																										 AND PSI.PRD_SUB_CODE  = PSS.PRD_SUB_CODE
																								WHERE PSI.OFFICE_CODE   = #{officeCode}
																				) B 
																			   ON A.UPDATE_SEQ    = B.UPDATE_SEQ
																			  AND A.PRD_ITEM_CODE = B.PRD_ITEM_CODE
															) U2
														   ON U1.OFFICE_CODE   = U2.OFFICE_CODE
														  AND U1.RES_NO		   = U2.RES_NO
													 WHERE U1.OFFICE_CODE	= #{officeCode}
													   AND U1.RES_DATE		= #{resDate}
													   AND U1.VISIT_STATUS  = 'Y'
													   AND U1.USE_STATUS	IN ('Y', 'C')													   											   
													) U3   
												  INNER JOIN PRODUCT_SURGICAL PS
													 ON U3.OFFICE_CODE	 = PS.OFFICE_CODE
													AND U3.UPDATE_SEQ	 = PS.UPDATE_SEQ
													AND U3.PRD_CODE      = PS.PRD_CODE     
												  INNER JOIN PRODUCT_SURGICAL_MASTER PM
													 ON PS.OFFICE_CODE	 = PM.OFFICE_CODE         
													AND PS.PRD_MST_CODE  = PM.PRD_MST_CODE	
											   GROUP BY 
													U3.OFFICE_CODE, U3.RES_TIME, U3.RES_NO, PM.PRD_MST_CODE
											) UR
										GROUP BY 
											UR.OFFICE_CODE, UR.RES_TIME, UR.PRD_MST_CODE				
			        ) Y
					 ON X.RES_TIME	    = Y.RES_TIME
					AND X.PRD_MST_CODE  = Y.PRD_MST_CODE
			        LEFT OUTER JOIN (
									  -- 시간별 총 예약확정 인원
									  SELECT RES_TIME 
										   , COUNT(RES_NO) AS TOTAL_RES_CNT
										FROM USER_RESERVE
									   WHERE OFFICE_CODE   = #{officeCode}
										 AND RES_DATE      = #{resDate}
										 AND VISIT_STATUS  = 'Y'
										 AND USE_STATUS	   IN ('Y', 'C')
									   GROUP BY RES_TIME 
			        ) Z
			         ON X.RES_TIME = Z.RES_TIME
				    LEFT OUTER JOIN (
									-- 선택한 예약정보
									SELECT 
									       U2.OFFICE_CODE
									     , U2.PRD_MST_CODE
									  FROM ( -- 예약 상품 정보
									  	    SELECT 
											       U1.OFFICE_CODE
												 , U1.UPDATE_SEQ
												 , U1.PRD_ITEM_CODE
											 	 , PM.PRD_MST_CODE
											  FROM (
											 	    SELECT
														   U0.OFFICE_CODE
													     , U0.UPDATE_SEQ
													     , U0.PRD_ITEM_CODE
													     , U0.PRD_SUB_CODE
													  FROM (
															SELECT 
																   I0.OFFICE_CODE
																 , I0.UPDATE_SEQ
																 , I0.PRD_ITEM_CODE
																 , PSI.PRD_SUB_CODE
															  FROM (
																	 SELECT 
																			URI.OFFICE_CODE
																		  , API.UPDATE_SEQ             	  
																		  , API.PRD_ITEM_CODE		  
																	   FROM USER_RESERVE_ITEM URI
																			INNER JOIN ALL_PRODUCT_INFO API
																			   ON URI.OFFICE_CODE    = API.OFFICE_CODE
																			  AND URI.RES_GROUP_CODE = API.ITEM_CODE	
																			  AND URI.RES_GROUP_SEQ  = 1 -- 최초 예약에 관해서만 계산			
																	  WHERE URI.OFFICE_CODE    = #{officeCode}
																		AND URI.RES_NO		   = #{resNo}
																		AND URI.ITEM_TYPE      = 'N'
																		AND URI.ITEM_STATUS    = 'R'
																	UNION ALL
																	SELECT 
																			URI.OFFICE_CODE
																		  , ITM.EVENT_UPDATE_SEQ AS UPDATE_SEQ
																		  , ITM.PRD_ITEM_CODE
																	   FROM USER_RESERVE_ITEM URI
																			INNER JOIN ALL_EVENT_PRODUCT_INFO API
																			   ON URI.OFFICE_CODE    = API.OFFICE_CODE
																			  AND URI.RES_GROUP_CODE = API.ITEM_CODE
																			  AND URI.RES_GROUP_SEQ  = 1 -- 최초 예약에 관해서만 계산		
																			INNER JOIN EVENT_PRODUCT_SURGICAL_ITEM ITM
																			   ON API.OFFICE_CODE   	 = ITM.OFFICE_CODE
																			  AND API.EVENT_UPDATE_SEQ   = ITM.EVENT_UPDATE_SEQ	
																			  AND API.EVENT_SEQ	  	     = ITM.EVENT_SEQ
																			  AND API.EVENT_SUB_SEQ 	 = ITM.EVENT_SUB_SEQ
																			  AND API.EVENT_PRODUCT_CODE = ITM.EVENT_PRODUCT_CODE
																			  -- 예약 상품의 이벤트 시술은 패키지, 횟수차감을 고려하여 첫번째 시술로 계산한다. 
																			  AND ITM.EVENT_DETAIL_SEQ   = 1        
																	  WHERE URI.OFFICE_CODE    = #{officeCode}
																		AND URI.RES_NO		   = #{resNo}
																		AND URI.ITEM_TYPE     <> 'N'
																	    AND URI.ITEM_STATUS    = 'R'
																	) I0 
																	INNER JOIN PRODUCT_SURGICAL_ITEM PSI
																	   ON I0.OFFICE_CODE   = PSI.OFFICE_CODE
																	  AND I0.UPDATE_SEQ    = PSI.UPDATE_SEQ
																	  AND I0.PRD_ITEM_CODE = PSI.PRD_ITEM_CODE
																) U0
											 	      UNION ALL
													  -- 예약 시술권 정보
													  SELECT 
															URP.OFFICE_CODE
														  , UPI.UPDATE_SEQ             
														  , PSI.PRD_ITEM_CODE
														  , PSI.PRD_SUB_CODE
													   FROM USER_RESERVE_PRODUCT URP
															INNER JOIN USER_PRODUCT_ITEM UPI
															   ON URP.OFFICE_CODE    = UPI.OFFICE_CODE
															  AND URP.PRD_RES_NO	 = UPI.RES_NO
															  AND URP.RES_GROUP_CODE = UPI.RES_GROUP_CODE
															  AND URP.RES_GROUP_SEQ  = UPI.RES_GROUP_SEQ
															  AND URP.ITEM_SEQ	     = UPI.ITEM_SEQ
															INNER JOIN PRODUCT_SURGICAL_ITEM PSI
															   ON UPI.OFFICE_CODE    = PSI.OFFICE_CODE
															  AND UPI.UPDATE_SEQ	 = PSI.UPDATE_SEQ
															  AND UPI.PRD_ITEM_CODE  = PSI.PRD_ITEM_CODE
													   WHERE URP.OFFICE_CODE   = #{officeCode}
													 	 AND URP.RES_NO		   = #{resNo}
												  ) U1 
												  INNER JOIN PRODUCT_SURGICAL_SUB PSS
													 ON U1.OFFICE_CODE	 = PSS.OFFICE_CODE
													AND U1.UPDATE_SEQ	 = PSS.UPDATE_SEQ
													AND U1.PRD_SUB_CODE  = PSS.PRD_SUB_CODE     
												  INNER JOIN PRODUCT_SURGICAL PS
													 ON PSS.OFFICE_CODE	  = PS.OFFICE_CODE
													AND PSS.UPDATE_SEQ	  = PS.UPDATE_SEQ
													AND PSS.PRD_CODE      = PS.PRD_CODE     
												  INNER JOIN PRODUCT_SURGICAL_MASTER PM
													 ON PS.OFFICE_CODE	 = PM.OFFICE_CODE         
													AND PS.PRD_MST_CODE  = PM.PRD_MST_CODE		
											) U2
										GROUP BY U2.PRD_MST_CODE    
			        ) V
			        ON X.PRD_MST_CODE = V.PRD_MST_CODE
				GROUP BY 
					X.RES_TIME
				ORDER BY 
					X.RES_TIME, X.PRD_MST_CODE
		]]>
	</select>
	
	<update id="updateHospitalNote" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.updateHospitalNote
			 * Description : 병원 메모 저장
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.11.21  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			UPDATE USER_RESERVE
			   SET HOSPITAL_NOTE = #{hospitalNote}   
			 WHERE OFFICE_CODE   = #{officeCode} 
			   AND RES_NO		 = #{resNo}
		]]>			
	</update>

	<update id="updateReserveProc" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.updateReserveProc
			 * Description : 방문 확정/마감 처리
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.05.31  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			UPDATE USER_RESERVE
			   SET VISIT_STATUS  = #{visitStatus}		
			   	 , ALARM_YN	     = #{alarmYn}
			   	 , HOSPITAL_NOTE = #{hospitalNote}
			   	 , RES_STATUS    = IF(#{visitStatus} = 'Y', '0', RES_STATUS)			   	 
			   	 , UPDATE_USER   = #{createUser}
			   	 , UPDATE_DATE   = NOW()		   
			 WHERE OFFICE_CODE   = #{officeCode} 
			   AND RES_NO		 = #{resNo}
		]]>
	</update>	
	
	<update id="updateReserveCancel" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.updateReserveCancel
			 * Description : 예약 취소 처리(병원)
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.07.19  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			UPDATE USER_RESERVE
			   SET USE_STATUS   = 'D'
			   	 , VISIT_STATUS = 'C' 
			 WHERE OFFICE_CODE   = #{officeCode} 
			   AND RES_NO		 = #{resNo}
		]]>
	</update>
	
	<select id="getPrdMstReserveClose" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO" resultType="com.wwl.app.domain.res.dto.ResReserveDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.getPrdMstReserveClose
			 * Description : 대분류 예약 마감 여부
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.07.05  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			SELECT 
				   H1.PRD_MST_CODE  				-- 대분류코드
				 , H1.PRD_MST_NAME					-- 대분류명
				 , H1.PRD_RES_CNT AS TOTAL_RES_CNT	-- 대분류별 예약확정 개수 
				 , H2.RES_CNT						-- 대분류별 신청가능 개수
			  FROM (-- 선택 일자별 대분류 예약 확정 수
					SELECT 
						   UR.PRD_MST_CODE
						 , UR.PRD_MST_NAME
						 , COUNT(UR.PRD_MST_CODE) AS PRD_RES_CNT
					  FROM (
							SELECT 
								   U3.OFFICE_CODE
								 , U3.RES_NO
								 , U3.RES_TIME
								 , U3.UPDATE_SEQ
								 , U3.PRD_SUB_CODE     
								 , PM.PRD_MST_CODE
								 , PM.PRD_MST_NAME
							  FROM (
									SELECT 
											U1.OFFICE_CODE
										  , U1.RES_NO      
										  , U1.RES_TIME
										  , U2.UPDATE_SEQ
										  , U2.PRD_SUB_CODE
										  , U2.PRD_CODE
									   FROM USER_RESERVE U1
											INNER JOIN (
														SELECT 
															   A.OFFICE_CODE
															 , A.RES_NO
															 , B.UPDATE_SEQ             	  
															 , B.PRD_ITEM_CODE
															 , B.PRD_SUB_CODE
														     , B.PRD_CODE
														  FROM (
																SELECT 
																	   URI.OFFICE_CODE
																	 , URI.RES_NO
																	 , URD.UPDATE_SEQ    
																	 , URD.PRD_ITEM_CODE
																  FROM USER_RESERVE_ITEM URI
																	   INNER JOIN USER_RESERVE_ITEM_DETAIL URD
                                                                          ON URI.OFFICE_CODE    = URD.OFFICE_CODE
                                                                         AND URI.RES_NO	        = URD.RES_NO
                                                                         AND URI.RES_GROUP_CODE = URD.RES_GROUP_CODE
                                                                         AND URI.RES_GROUP_SEQ  = URD.RES_GROUP_SEQ
                                                                         AND URI.RES_GROUP_SEQ  = 1 -- 최초 예약에 관해서만 계산
                                                                         AND URD.GROUP_SEQ	    = 1	-- 예약 상품의 이벤트 시술은 패키지, 횟수차감을 고려하여 첫번째 시술로 계산한다.
																 WHERE URI.OFFICE_CODE     = #{officeCode}																												   		   																  
																   AND URI.ITEM_STATUS     = 'R'
																 UNION ALL					
																SELECT 
																	   URP.OFFICE_CODE
																	 , URP.RES_NO
																	 , UPI.UPDATE_SEQ             
																	 , UPI.PRD_ITEM_CODE
																  FROM USER_RESERVE_PRODUCT URP
																	   INNER JOIN USER_PRODUCT_ITEM UPI
																		  ON URP.OFFICE_CODE    = UPI.OFFICE_CODE
																		 AND URP.PRD_RES_NO		= UPI.RES_NO
																		 AND URP.RES_GROUP_CODE = UPI.RES_GROUP_CODE
																		 AND URP.RES_GROUP_SEQ  = UPI.RES_GROUP_SEQ
																		 AND URP.ITEM_SEQ       = UPI.ITEM_SEQ
																 WHERE URP.OFFICE_CODE   = #{officeCode}		
																 GROUP BY RES_NO, PRD_ITEM_CODE
																) A INNER JOIN (
																				SELECT 
																					   PSI.OFFICE_CODE
																					 , PSI.UPDATE_SEQ
																					 , PSI.PRD_ITEM_CODE
																					 , PSS.PRD_SUB_CODE
														                             , PSS.PRD_CODE
																				  FROM PRODUCT_SURGICAL_ITEM PSI	
																					   INNER JOIN PRODUCT_SURGICAL_SUB PSS
																						  ON PSI.OFFICE_CODE   = PSS.OFFICE_CODE        
																						 AND PSI.UPDATE_SEQ    = PSS.UPDATE_SEQ	    	 
																						 AND PSI.PRD_SUB_CODE  = PSS.PRD_SUB_CODE
																				WHERE PSI.OFFICE_CODE   = #{officeCode}  
																) B 
															  ON A.UPDATE_SEQ    = B.UPDATE_SEQ
	 														 AND A.PRD_ITEM_CODE = B.PRD_ITEM_CODE
											) U2
										   ON U1.OFFICE_CODE   = U2.OFFICE_CODE
										  AND U1.RES_NO		   = U2.RES_NO
									 WHERE U1.OFFICE_CODE	= #{officeCode}
									   AND U1.RES_DATE		= #{resDate}
									   AND U1.RES_TIME		= #{resTime}
									   AND U1.VISIT_STATUS  = 'Y'
									   AND U1.USE_STATUS	= 'Y'													   											   
								  ) U3
								  INNER JOIN PRODUCT_SURGICAL PS
									 ON U3.OFFICE_CODE	 = PS.OFFICE_CODE
									AND U3.UPDATE_SEQ	 = PS.UPDATE_SEQ
									AND U3.PRD_CODE      = PS.PRD_CODE     
								  INNER JOIN PRODUCT_SURGICAL_MASTER PM
									 ON PS.OFFICE_CODE	 = PM.OFFICE_CODE         
									AND PS.PRD_MST_CODE  = PM.PRD_MST_CODE	
							   GROUP BY 
									U3.OFFICE_CODE, U3.RES_NO, PM.PRD_MST_CODE
							) UR
						GROUP BY 
							UR.OFFICE_CODE, UR.PRD_MST_CODE	
				   ) H1 
				   INNER JOIN HOSPITAL_RESERVE H2
			          ON H1.PRD_MST_CODE = H2.PRD_MST_CODE
			WHERE H2.OFFICE_CODE      = #{officeCode}
			  AND SUBSTR(H2.HHMM,1,4) = #{resTime}
			  AND (H2.RES_DATE, H2.DATA_DAY) IN (SELECT IFNULL(MAX(RES_DATE), '00000000') 
													  , IF(IFNULL(MAX(RES_DATE), '00000000') = '00000000', DAYOFWEEK(#{resDate})-1, '0')
												   FROM HOSPITAL_RESERVE_MASTER A
												  WHERE OFFICE_CODE   = #{officeCode}
													AND RES_DATE      = #{resDate}) 
			 
		]]>
	</select>
	
	<select id="getAllReserveClose" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO" resultType="com.wwl.app.domain.res.dto.ResReserveDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.getAllReserveClose
			 * Description : 전체 예약마감 여부 확인
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.07.05  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			SELECT 
				   MAX(H1.MAX_CNT) AS MAX_CNT
				 , H2.TOTAL_RES_CNT
			  FROM HOSPITAL_RESERVE H1
				   LEFT OUTER JOIN (
									SELECT RES_TIME
										 , COUNT(RES_NO) AS TOTAL_RES_CNT
									  FROM USER_RESERVE
									 WHERE OFFICE_CODE   = #{officeCode}
									   AND RES_DATE      = #{resDate}
									   AND RES_TIME	 	 = #{resTime}
									   AND USE_STATUS    = 'Y'
									   AND VISIT_STATUS	 = 'Y'									   
			        ) H2
			       ON SUBSTR(H1.HHMM,1,4) = H2.RES_TIME
			 WHERE H1.OFFICE_CODE      = #{officeCode}
			   AND SUBSTR(H1.HHMM,1,4) = #{resTime}
			   AND (H1.RES_DATE, H1.DATA_DAY) IN (SELECT IFNULL(MAX(RES_DATE), '00000000') 
													   , IF(IFNULL(MAX(RES_DATE), '00000000') = '00000000', DAYOFWEEK(#{resDate})-1, '0')
												    FROM HOSPITAL_RESERVE_MASTER A
												   WHERE OFFICE_CODE   = #{officeCode}
													 AND RES_DATE      = #{resDate})		
		]]>
	</select>
	
	<insert id="insertLogReserveClose" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.insertLogReserveClose
			 * Description : 예약마감 기록 저장
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.07.05  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			INSERT INTO LOG_RESERVE_CLOSE (
				  OFFICE_CODE	
				, SEQ	
				, RES_DATE
				, HHMM	
				, PRD_MST_NAME
				, CONTENT	
				, CREATE_DATE					
			) VALUES (
				  #{officeCode}
				, (SELECT IFNULL(MAX(SEQ),0) + 1
				     FROM LOG_RESERVE_CLOSE A
				    WHERE OFFICE_CODE   = #{officeCode})
				, #{resDate}	
				, #{resTime}
				, #{prdMstName}
				, #{content}
				, NOW()	
			)
		]]>	
	</insert>				
	
	<insert id="insertReserveInfoHistory" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.insertReserveInfoHistory
			 * Description : 예약 이력 등록
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.08.18  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			INSERT INTO USER_RESERVE_INFO_HISTORY
			SELECT 
				   RT.OFFICE_CODE
				 , RT.RES_NO
				 , (SELECT IFNULL(MAX(HIS_NO),0) + (@ROWNUM := @ROWNUM + 1)						 
					  FROM USER_RESERVE_INFO_HISTORY A
						   INNER JOIN (SELECT @ROWNUM := 0) TMP
					 WHERE OFFICE_CODE   = #{officeCode}
					   AND RES_NO        = #{resNo}) AS HIS_NO			     
				 , CONCAT(DATE_FORMAT(RT.RES_DATE, '%Y년 %m월 %d일')
						 , CASE DAYOFWEEK(RT.RES_DATE) 
								WHEN '1' THEN '(일)'
								WHEN '2' THEN '(월)'		
								WHEN '3' THEN '(화)'		
								WHEN '4' THEN '(수)'		
								WHEN '5' THEN '(목)'		
								WHEN '6' THEN '(금)'		
								WHEN '7' THEN '(토)'
							END
						 , ' '
						 , CASE WHEN SUBSTR(RT.RES_TIME,1,2) > 12 THEN CONCAT('오후 ', IF(SUBSTR(RT.RES_TIME,1,2) - 12 < 10
																		 , CONCAT('0', SUBSTR(RT.RES_TIME,1,2) - 12), SUBSTR(RT.RES_TIME,1,2) - 12)
																		 , ':'
																		 , SUBSTR(RT.RES_TIME,3))
								ELSE CONCAT('오전 ', SUBSTR(RT.RES_TIME,1,2), ':', SUBSTR(RT.RES_TIME,3))
							END
				   ) AS RES_DATE
				 , GROUP_CONCAT(RT.ITEM_NAME SEPARATOR '\n')  AS HIS_CONTENT			
				 , GROUP_CONCAT(RT.ITEM_PRICE SEPARATOR '\n') AS HIS_PRICE			
				 , FORMAT(SUM(RT.TOTAL_PRICE), 0) 		      AS HIS_TOTAL_PRICE
				 , RT.RES_NOTE
				 , RT.HOSPITAL_NOTE
				 , RT.ADVICE_YN
				 , RT.VISIT_STATUS
				 , RT.ALARM_YN
				 , RT.USE_STATUS
				 , CONCAT(DATE_FORMAT(RT.CREATE_DATE, '%Y년 %m월 %d일')
						 , CASE DAYOFWEEK(RT.CREATE_DATE) 
								WHEN '1' THEN '(일)'
								WHEN '2' THEN '(월)'		
								WHEN '3' THEN '(화)'		
								WHEN '4' THEN '(수)'		
								WHEN '5' THEN '(목)'		
								WHEN '6' THEN '(금)'		
								WHEN '7' THEN '(토)'
							END
						 , ' '
						 , CASE WHEN SUBSTR(DATE_FORMAT(RT.CREATE_DATE, '%H%i'),1,2) > 12 THEN CONCAT('오후 ', IF(SUBSTR(DATE_FORMAT(RT.CREATE_DATE, '%H%i'),1,2) - 12 < 10
																 , CONCAT('0', SUBSTR(DATE_FORMAT(RT.CREATE_DATE, '%H%i'),1,2) - 12), SUBSTR(DATE_FORMAT(RT.CREATE_DATE, '%H%i'),1,2) - 12)
																 , ':'
																 , SUBSTR(DATE_FORMAT(RT.CREATE_DATE, '%H%i'),3))
								ELSE CONCAT('오전 ', SUBSTR(DATE_FORMAT(RT.CREATE_DATE, '%H%i'),1,2), ':', SUBSTR(DATE_FORMAT(RT.CREATE_DATE, '%H%i'),3))
							END
				   ) AS CREATE_DATE	 
			  FROM (
					SELECT 
						   UR.OFFICE_CODE
						 , UR.RES_NO						
						 , UR.RES_DATE
			             , UR.RES_TIME
						 , ITM.ITEM_NAME
						 , ITM.ITEM_PRICE
						 , ITM.TOTAL_PRICE
						 , UR.RES_NOTE
						 , UR.HOSPITAL_NOTE
						 , UR.ADVICE_YN
						 , UR.VISIT_STATUS
						 , UR.ALARM_YN
						 , UR.USE_STATUS
						 , UR.CREATE_DATE	 
					  FROM USER_RESERVE UR
						   LEFT OUTER JOIN (-- 예약 상품
										    SELECT 
												   RES.OFFICE_CODE
												 , RES.RES_NO
												 , GROUP_CONCAT(CONCAT('<p>', RES.ITEM_NAME, '</p>') SEPARATOR '\n') AS ITEM_NAME			
												 , GROUP_CONCAT(FORMAT(RES.ITEM_PRICE, 0) SEPARATOR '\n') AS ITEM_PRICE	
												 , SUM(RES.ITEM_PRICE) 			 					      AS TOTAL_PRICE
											 FROM (
													SELECT
														   U.OFFICE_CODE
														 , U.RES_NO
														 , P.PRD_ITEM_NAME AS ITEM_NAME
														 , P.PRICE 		   AS ITEM_PRICE
													  FROM USER_RESERVE_ITEM U
														   INNER JOIN ALL_PRODUCT_INFO A
															  ON U.OFFICE_CODE    = A.OFFICE_CODE
															 AND U.RES_GROUP_CODE = A.ITEM_CODE
														   INNER JOIN PRODUCT_SURGICAL_ITEM P
															  ON A.OFFICE_CODE   = P.OFFICE_CODE
															 AND A.UPDATE_SEQ	 = P.UPDATE_SEQ
															 AND A.PRD_ITEM_CODE = P.PRD_ITEM_CODE
													 WHERE U.OFFICE_CODE   = #{officeCode}
													   AND U.RES_NO		   = #{resNo}
													   AND U.ITEM_TYPE 	   = 'N'
													   AND U.ITEM_STATUS   = 'R'
													 UNION ALL
													SELECT
														   U.OFFICE_CODE
														 , U.RES_NO
														 , CONCAT('[EVENT] ', E.EVENT_PRODUCT_TITLE) AS ITEM_NAME
														 , E.EVENT_SALE	AS ITEM_PRICE
													  FROM USER_RESERVE_ITEM U
														   INNER JOIN ALL_EVENT_PRODUCT_INFO A
															  ON U.OFFICE_CODE	  	  = A.OFFICE_CODE
															 AND U.RES_GROUP_CODE 	  = A.ITEM_CODE
														   INNER JOIN EVENT_PRODUCT_SURGICAL E
															  ON A.OFFICE_CODE   	  = E.OFFICE_CODE
															 AND A.EVENT_UPDATE_SEQ   = E.EVENT_UPDATE_SEQ
															 AND A.EVENT_SEQ          = E.EVENT_SEQ
															 AND A.EVENT_SUB_SEQ      = E.EVENT_SUB_SEQ
															 AND A.EVENT_PRODUCT_CODE = E.EVENT_PRODUCT_CODE
													 WHERE U.OFFICE_CODE   = #{officeCode}
													   AND U.RES_NO		   = #{resNo}
													   AND U.ITEM_TYPE     <> 'N'
													   AND U.ITEM_STATUS   = 'R'
												) RES
											GROUP BY RES.RES_NO
											UNION ALL
											-- 남은 시술권
											SELECT 
												   X.OFFICE_CODE
												 , X.RES_NO			 
												 , CONCAT('<p>[남은 시술권] ', CASE WHEN X.ITEM_TYPE = 'C' OR X.ITEM_TYPE = 'P' THEN CONCAT(X.PRODUCT_TITLE, '\n', GROUP_CONCAT(X.ITEM_TITLE ORDER BY X.ITEM_ORDER SEPARATOR '\n'))
																					ELSE X.ITEM_TITLE
																				END, '</p>') AS ITEM_NAME
												  , 0 AS ITEM_PRICE
												  , 0 AS TOTAL_PRICE	
											  FROM (
													SELECT 
														   URP.OFFICE_CODE
														 , URP.RES_NO	
														 , URP.RES_GROUP_CODE
														 , URP.RES_GROUP_SEQ
														 , UPI.GROUP_SEQ
														 , UPI.ITEM_TYPE
														 , MIN(URP.ITEM_SEQ) 	   AS ITEM_ORDER
														 , UPI.PRODUCT_TITLE 
														 , CASE WHEN UPI.ITEM_TYPE = 'P' THEN CONCAT('[', UPI.GROUP_SEQ, '회] ', GROUP_CONCAT(IF(UPI.CONFIRM_STATUS = 'Y',
																																				CONCAT('<span class="line">', UPI.PRD_ITEM_NAME, '</span>'),
																																				UPI.PRD_ITEM_NAME) ORDER BY URP.ITEM_SEQ SEPARATOR ' + '))							   
																WHEN UPI.ITEM_TYPE = 'C' THEN CONCAT('[', UPI.DEDUCT_CNT, 'p] ', GROUP_CONCAT(IF(UPI.CONFIRM_STATUS ='Y',
																																				CONCAT('<span class="line">', UPI.PRD_ITEM_NAME, '</span>'),
																																				UPI.PRD_ITEM_NAME) ORDER BY URP.ITEM_SEQ))
																ELSE IFNULL(CONCAT(UPI.PRODUCT_TITLE, ' + ',
																			GROUP_CONCAT(IF(UPI.SERVICE_YN = 'N', NULL,
																							IF(UPI.CONFIRM_STATUS = 'Y',
																								CONCAT('<span class="line">', UPI.PRD_ITEM_NAME, '</span>'),
																								UPI.PRD_ITEM_NAME)) ORDER BY UPI.ITEM_SEQ SEPARATOR ' + ')), UPI.PRODUCT_TITLE)
															END ITEM_TITLE				 
													   FROM USER_RESERVE_PRODUCT URP
															INNER JOIN (
																		SELECT 
																			   U1.RES_NO
																			 , U1.RES_GROUP_CODE
																			 , U1.RES_GROUP_SEQ
																			 , U1.ITEM_TYPE	
																			 , IF(U1.ITEM_TYPE = 'N', P1.PRD_ITEM_NAME, CONCAT('[EVENT] ', E1.EVENT_PRODUCT_TITLE)) AS PRODUCT_TITLE
																			 , U2.ITEM_SEQ
																			 , U2.GROUP_SEQ
																			 , U2.UPDATE_SEQ								 
																			 , IF(U2.SERVICE_YN = 'Y', CONCAT('[서비스] ', P1.PRD_ITEM_NAME), P1.PRD_ITEM_NAME) AS PRD_ITEM_NAME
																			 , U2.DEDUCT_CNT								 
																			 , U2.SERVICE_YN
																			 , U2.CONFIRM_STATUS
																		  FROM USER_PRODUCT U1
																			   INNER JOIN USER_PRODUCT_ITEM U2
																				  ON U1.OFFICE_CODE    	   = U2.OFFICE_CODE
																				 AND U1.USER_ID		   	   = U2.USER_ID
																				 AND U1.RES_NO		   	   = U2.RES_NO
																				 AND U1.RES_GROUP_CODE 	   = U2.RES_GROUP_CODE
																				 AND U1.RES_GROUP_SEQ  	   = U2.RES_GROUP_SEQ
																			   INNER JOIN PRODUCT_SURGICAL_ITEM P1
																				  ON U2.OFFICE_CODE   	   = P1.OFFICE_CODE
																				 AND U2.UPDATE_SEQ	  	   = P1.UPDATE_SEQ
																				 AND U2.PRD_ITEM_CODE	   = P1.PRD_ITEM_CODE
																				LEFT OUTER JOIN ALL_EVENT_PRODUCT_INFO A1
																				  ON U2.OFFICE_CODE    	   = A1.OFFICE_CODE
																				 AND U2.RES_GROUP_CODE 	   = A1.ITEM_CODE
																				LEFT OUTER JOIN EVENT_PRODUCT_SURGICAL E1
																				  ON A1.OFFICE_CODE   	   = E1.OFFICE_CODE
																				 AND A1.EVENT_UPDATE_SEQ   = E1.EVENT_UPDATE_SEQ
																				 AND A1.EVENT_SEQ		   = E1.EVENT_SEQ
																				 AND A1.EVENT_SUB_SEQ	   = E1.EVENT_SUB_SEQ
																				 AND A1.EVENT_PRODUCT_CODE = E1.EVENT_PRODUCT_CODE
																		 WHERE U1.OFFICE_CODE   = #{officeCode}
															) UPI
															   ON URP.RES_GROUP_CODE	= UPI.RES_GROUP_CODE
															  AND URP.RES_GROUP_SEQ 	= UPI.RES_GROUP_SEQ
															  AND URP.ITEM_SEQ	     	= UPI.ITEM_SEQ
													WHERE URP.OFFICE_CODE   = #{officeCode}
													  AND URP.RES_NO		= #{resNo}
													GROUP BY 
														  URP.RES_NO, URP.RES_GROUP_CODE, URP.RES_GROUP_SEQ, UPI.GROUP_SEQ
												  ) X
											GROUP BY X.RES_NO, X.RES_GROUP_CODE, X.RES_GROUP_SEQ									
							) ITM 
						   ON UR.RES_NO = ITM.RES_NO
					WHERE UR.OFFICE_CODE   = #{officeCode}
					  AND UR.RES_NO	       = #{resNo}
				) RT
			GROUP BY RT.RES_NO				
		]]>
	</insert>
	
	<update id="updateReserveDate" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.updateReserveDate
			 * Description : 희망 예약일 변경
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.05.31  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			UPDATE USER_RESERVE
			   SET RES_DATE     = #{resDate}
			   	 , RES_TIME     = #{resTime}
			 WHERE OFFICE_CODE	 = #{officeCode}
			   AND RES_NO	     = #{resNo}
		]]>
	</update>

	<insert id="insertReserveHistory" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.insertReserveHistory
			 * Description : 예약일변경 이력 등록
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.06.02  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			INSERT INTO USER_RESERVE_DATE_HISTORY (
				  OFFICE_CODE	
				, RES_NO	
				, HIS_NO	
				, RES_DATE	
				, RES_TIME	
				, RES_DATE_HIS	
				, RES_TIME_HIS	
				, UPDATE_USER	
				, UPDATE_DATE									
			) VALUES (
				  #{officeCode}
				, #{resNo}	
				, (SELECT IFNULL(MAX(HIS_NO),0) + 1
				     FROM USER_RESERVE_DATE_HISTORY A	
				    WHERE OFFICE_CODE	= #{officeCode}
				      AND RES_NO        = #{resNo})
				, #{resDate}
				, #{resTime}	
				, (SELECT RES_DATE 
				     FROM USER_RESERVE 
					WHERE OFFICE_CODE	= #{officeCode}
					  AND RES_NO		= #{resNo})	
				, (SELECT RES_TIME
				     FROM USER_RESERVE 
					WHERE OFFICE_CODE	= #{officeCode}
					  AND RES_NO		= #{resNo})	
				, #{createUser}	
				, NOW()	
			)
		]]>
	</insert>
	
	<select id="getWishTimeList" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO" resultType="com.wwl.app.domain.res.dto.ResReserveDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.getWishTimeList
			 * Description : 희망 예약시간 조회
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.06.28  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			SELECT 
				   CONCAT(SUBSTR(HR.HHMM,1,2), ':', SUBSTR(HR.HHMM,3,2)) AS HHMM       
			     , MAX(HR.MAX_CNT) AS MAX_CNT					-- 총 예약가능 이원
			     , IFNULL(UR.TOTAL_RES_CNT, 0) AS TOTAL_RES_CNT	-- 총 예약확정 인원
			  FROM HOSPITAL_RESERVE HR
				   LEFT OUTER JOIN (
									-- 총 예약확정 인원
									SELECT RES_TIME
										 , COUNT(RES_NO) AS TOTAL_RES_CNT
									  FROM USER_RESERVE
									 WHERE OFFICE_CODE = #{officeCode}
									   AND (RES_DATE
										  , RES_TIME) IN (
														   SELECT RES_DATE	 
																, RES_TIME
															 FROM USER_RESERVE A
															WHERE OFFICE_CODE	= #{officeCode}
															  AND RES_DATE      = #{resDate}	  
											 )
										AND VISIT_STATUS = 'Y'
									    AND USE_STATUS   = 'Y'
									GROUP BY RES_TIME 
			       ) UR
			       ON SUBSTR(HR.HHMM,1,4) = UR.RES_TIME
			 WHERE HR.OFFICE_CODE   = #{officeCode}
			   AND (HR.RES_DATE, HR.DATA_DAY) IN (SELECT IFNULL(MAX(RES_DATE), '00000000') 
													   , IF(IFNULL(MAX(RES_DATE), '00000000') = '00000000', DAYOFWEEK(#{resDate})-1, '0')
													FROM HOSPITAL_RESERVE_MASTER A
												   WHERE OFFICE_CODE    = #{officeCode}
													 AND RES_DATE       = #{resDate})
			 GROUP BY HR.HHMM
		]]>
	</select>
	
	<select id="getUserReserveReply" parameterType="com.wwl.app.domain.res.dto.ResSendDTO" resultType="com.wwl.app.domain.res.dto.ResSendDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.getUserReserveReply
			 * Description : 주의사항 전송 기록 조회
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.06.27  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			SELECT 
				   U1.REPLY_CONTENT	
				 , S1.SYS_NAME AS REPLY_USER
				 , CONCAT(DATE_FORMAT(U1.REPLY_DATE, '%Y. %m. %d')
												   , CASE DAYOFWEEK(U1.REPLY_DATE) 
														  WHEN '1' THEN '(일)'
														  WHEN '2' THEN '(월)'		
														  WHEN '3' THEN '(화)'		
														  WHEN '4' THEN '(수)'		
														  WHEN '5' THEN '(목)'		
														  WHEN '6' THEN '(금)'		
														  WHEN '7' THEN '(토)'
													  END) AS REPLY_DATE
			 FROM USER_RESERVE_REPLY U1
				  INNER JOIN SYS_USER_INFO S1
			         ON U1.REPLY_USER = S1.SYS_USER_ID
			WHERE U1.OFFICE_CODE   = #{officeCode}
			  AND U1.USER_ID	   = #{userId}
			ORDER BY REPLY_DATE DESC 
		]]>		
	</select>

	<insert id="insertUserReserveReply" parameterType="com.wwl.app.domain.res.dto.ResSendDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.insertUserReserveReply
			 * Description : 고객 주의사항 전송 
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.06.27  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			INSERT INTO USER_RESERVE_REPLY (
				  OFFICE_CODE	
				, USER_ID	
				, REPLY_SEQ	
				, REPLY_CONTENT	
				, REPLY_USER	
				, REPLY_DATE
				, RES_NO								
			) VALUES (
				  #{officeCode}	
				, #{userId}
				, (SELECT IFNULL(MAX(REPLY_SEQ),0) + 1
				     FROM USER_RESERVE_REPLY A
				    WHERE OFFICE_CODE   = #{officeCode}
				      AND USER_ID       = #{userId})	
				, #{replyContent}	
				, #{replyUser}	
				, NOW()	
				, #{resNo}
			)
		]]>	
	</insert>

	<select id="getTemplateList" parameterType="com.wwl.app.domain.res.dto.ResSendDTO" resultType="com.wwl.app.domain.res.dto.ResSendDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.getTemplateList
			 * Description : 주의사항 템플릿 리스트 조회
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.06.27  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			SELECT
				   TEMPLATE_SEQ
			 	 , TITLE
			 	 , CONTENT
			  FROM REPLY_TEMPLATE
			 WHERE OFFICE_CODE	 = #{officeCode}
			   AND TEMPLATE_TYPE = 'reserve'
		]]>
		<if test="templateSeq != null and templateSeq != ''">
			AND TEMPLATE_SEQ = #{templateSeq}
		</if>		
			 ORDER BY TITLE		
	</select>
	
	<select id="getTemplateDetail" parameterType="com.wwl.app.domain.res.dto.ResSendDTO" resultType="com.wwl.app.domain.res.dto.ResSendDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.getTemplateDetail
			 * Description : 주의사항 템플릿 리스트 조회 - 시술 상세
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.12.15    진가영      최초 생성
		     */
		]]>
		<![CDATA[
			SELECT PSS.PRD_SUB_CODE 
			     , PSS.PRD_SUB_NAME
			  FROM PRODUCT_SURGICAL_SUB_DETAIL_TMP AS PSSD
			 INNER JOIN (
							 SELECT PRD_SUB_NAME 
							      , PRD_SUB_CODE 
							  FROM PRODUCT_SURGICAL_SUB_TMP AS PSS
							 WHERE OFFICE_CODE = #{officeCode}
							   AND USE_YN      = 'Y'
			            ) PSS
			    ON PSSD.PRD_SUB_CODE = PSS.PRD_SUB_CODE 
			 WHERE PSSD.OFFICE_CODE  = #{officeCode}
			   AND PSSD.DETAIL_TYPE  = 'F'
			   AND PSSD.DETAIL_CONTENT  IS NOT NULL
			 GROUP BY PRD_SUB_CODE
			 ORDER BY PSS.PRD_SUB_NAME;
		]]>
	</select>
	
	<select id="getTemplateDetailContent" parameterType="com.wwl.app.domain.res.dto.ResSendDTO" resultType="com.wwl.app.domain.res.dto.ResSendDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.getTemplateDetailContent
			 * Description : 주의사항 템플릿 내용 조회 - 시술 상세
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.12.16    진가영      최초 생성
		     */
		]]>
		<![CDATA[
			SELECT DETAIL_CONTENT  
			  FROM PRODUCT_SURGICAL_SUB_DETAIL_TMP
			 WHERE OFFICE_CODE  = #{officeCode}
 			   AND PRD_SUB_CODE = #{prdSubCode}
			   AND DETAIL_TYPE  = 'F'
   			   AND DETAIL_CONTENT  IS NOT NULL;
		]]>
	</select>
	
	<insert id="insertReplyTemplate" parameterType="com.wwl.app.domain.res.dto.ResSendDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.insertReplyTemplate
			 * Description : 주의사항 템플릿 등록
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.06.27  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			INSERT INTO REPLY_TEMPLATE (
				  OFFICE_CODE	
				, TEMPLATE_TYPE
				, TEMPLATE_SEQ
				, TITLE	
				, CONTENT	
				, CREATE_USER	
				, CREATE_DATE				
			) VALUES (
				  #{officeCode}
				, 'reserve'
				, IFNULL(#{templateSeq}, 
					(SELECT IFNULL(MAX(TEMPLATE_SEQ),0) + 1
				       FROM REPLY_TEMPLATE A
				      WHERE OFFICE_CODE   = #{officeCode}
				        AND TEMPLATE_TYPE = 'reserve'))
				, #{title}
				, #{content}	
				, #{createUser}	
				, NOW()
			) 		
			ON DUPLICATE KEY
			UPDATE TITLE  	   = #{title}	
				 , CONTENT 	   = #{content}	
				 , CREATE_USER = #{createUser}
				 , CREATE_DATE = NOW()		
		]]>
	</insert>
	
	<delete id="deleteReplyTemplate" parameterType="com.wwl.app.domain.res.dto.ResSendDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.deleteReplyTemplate
			 * Description : 주의사항 템플릿 삭제
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.06.27  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			DELETE FROM REPLY_TEMPLATE
			 WHERE OFFICE_CODE   = #{officeCode}
			   AND TEMPLATE_TYPE = 'reserve'
			   AND TEMPLATE_SEQ	 = #{templateSeq}
		]]> 
	</delete>	
	
	<select id="getReserveInfo" parameterType="com.wwl.app.domain.res.dto.ResSendDTO" resultType="camelHashMap">
		<![CDATA[
			/*
			 * SQL ID      : res.getReserveInfo
			 * Description : 주의사항 - 예약 정보 조회
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.11.11  이승현      최초 생성
		     */
		]]>
		<![CDATA[	
			 SELECT  
				    UR.RES_NO
				  , UR.RES_NOTE
			      , ITM.RES_TYPE
			      , ITM.ITEM_NAME
			      , ITM.ITEM_PRICE
			   FROM USER_RESERVE UR
			        INNER JOIN (-- 예약 상품
								SELECT 
									   RES.OFFICE_CODE
									 , RES.RES_NO
									 , 'reserve' AS RES_TYPE
									 , RES.ITEM_NAME
									 , RES.ITEM_PRICE
								 FROM (
										SELECT
											   U.OFFICE_CODE
											 , U.RES_NO
											 , P.PRD_ITEM_NAME AS ITEM_NAME
											 , P.PRICE 		   AS ITEM_PRICE
										  FROM USER_RESERVE_ITEM U
											   INNER JOIN ALL_PRODUCT_INFO A
												  ON U.OFFICE_CODE    = A.OFFICE_CODE
												 AND U.RES_GROUP_CODE = A.ITEM_CODE
											   INNER JOIN PRODUCT_SURGICAL_ITEM P
												  ON A.OFFICE_CODE   = P.OFFICE_CODE
												 AND A.UPDATE_SEQ	 = P.UPDATE_SEQ
												 AND A.PRD_ITEM_CODE = P.PRD_ITEM_CODE
										 WHERE U.OFFICE_CODE   = #{officeCode}
										   AND U.RES_NO  	   = #{resNo}
										   AND U.ITEM_TYPE 	   = 'N'
										   AND U.ITEM_STATUS   = 'R'
										 UNION ALL
										SELECT
											   U.OFFICE_CODE
											 , U.RES_NO
											 , CONCAT('[EVENT] ', E.EVENT_PRODUCT_TITLE) AS ITEM_NAME
											 , E.EVENT_SALE	AS ITEM_PRICE
										  FROM USER_RESERVE_ITEM U
											   INNER JOIN ALL_EVENT_PRODUCT_INFO A
												  ON U.OFFICE_CODE	  = A.OFFICE_CODE
												 AND U.RES_GROUP_CODE = A.ITEM_CODE
											   INNER JOIN EVENT_PRODUCT_SURGICAL E
												  ON A.OFFICE_CODE   	  = E.OFFICE_CODE
												 AND A.EVENT_UPDATE_SEQ   = E.EVENT_UPDATE_SEQ
												 AND A.EVENT_SEQ          = E.EVENT_SEQ
												 AND A.EVENT_SUB_SEQ      = E.EVENT_SUB_SEQ
												 AND A.EVENT_PRODUCT_CODE = E.EVENT_PRODUCT_CODE
										 WHERE U.OFFICE_CODE   = #{officeCode}
										   AND U.RES_NO  	   = #{resNo}
										   AND U.ITEM_TYPE     <> 'N'
										   AND U.ITEM_STATUS   = 'R'
									) RES
							   UNION ALL
							  SELECT 
								    X.OFFICE_CODE
								  , X.RES_NO			 
								  , 'product' AS RES_TYPE
								  , CONCAT('[남은 시술권] ', CASE WHEN X.ITEM_TYPE = 'C' OR X.ITEM_TYPE = 'P' THEN CONCAT(X.PRODUCT_TITLE, '\n', GROUP_CONCAT(X.ITEM_TITLE ORDER BY X.ITEM_TITLE SEPARATOR '\n'))
																  ELSE X.ITEM_TITLE
															  END) AS ITEM_NAME
								   , 0 AS ITEM_PRICE	
							   FROM (
									SELECT 
										   URP.OFFICE_CODE
										 , URP.RES_NO	
										 , URP.RES_GROUP_CODE
										 , URP.RES_GROUP_SEQ
										 , UPI.GROUP_SEQ
										 , UPI.ITEM_TYPE
										 , EPS.EVENT_PRODUCT_TITLE AS PRODUCT_TITLE
										 , CASE WHEN UPI.ITEM_TYPE = 'P' THEN CONCAT('[', UPI.GROUP_SEQ, '회] ', GROUP_CONCAT(IF(UPI.SERVICE_YN = 'Y', CONCAT('[서비스] ', UPI.PRD_ITEM_NAME), UPI.PRD_ITEM_NAME) ORDER BY URP.ITEM_SEQ SEPARATOR ' + '))
												WHEN UPI.ITEM_TYPE = 'C' THEN CONCAT('[', MAX(UPI.DEDUCT_CNT), 'p] ', GROUP_CONCAT(IF(UPI.SERVICE_YN = 'Y', CONCAT('[서비스] ', UPI.PRD_ITEM_NAME), UPI.PRD_ITEM_NAME) ORDER BY URP.ITEM_SEQ SEPARATOR ', '))
												WHEN UPI.ITEM_TYPE = 'E' THEN EPS.EVENT_PRODUCT_TITLE
												ELSE IF(UPI.SERVICE_YN = 'Y', CONCAT('[서비스] ', UPI.PRD_ITEM_NAME), UPI.PRD_ITEM_NAME)
											END ITEM_TITLE				 
									   FROM USER_RESERVE_PRODUCT URP
											INNER JOIN (
														SELECT 
															   U1.OFFICE_CODE
															 , U1.RES_NO
															 , U1.RES_GROUP_CODE
															 , U1.RES_GROUP_SEQ
															 , U1.ITEM_TYPE							
															 , U2.ITEM_SEQ
															 , U2.GROUP_SEQ
															 , U2.UPDATE_SEQ
															 , U2.PRD_ITEM_CODE
															 , U2.DEDUCT_CNT
															 , P1.PRD_ITEM_NAME
															 , U2.SERVICE_YN
														  FROM USER_PRODUCT U1
															   INNER JOIN USER_PRODUCT_ITEM U2
																  ON U1.OFFICE_CODE    = U2.OFFICE_CODE
																 AND U1.USER_ID		   = U2.USER_ID
																 AND U1.RES_NO		   = U2.RES_NO
																 AND U1.RES_GROUP_CODE = U2.RES_GROUP_CODE
																 AND U1.RES_GROUP_SEQ  = U2.RES_GROUP_SEQ
															   INNER JOIN PRODUCT_SURGICAL_ITEM P1
																  ON U2.OFFICE_CODE    = P1.OFFICE_CODE
																 AND U2.UPDATE_SEQ	   = P1.UPDATE_SEQ
																 AND U2.PRD_ITEM_CODE  = P1.PRD_ITEM_CODE
														 WHERE U1.OFFICE_CODE   = #{officeCode}			   
											) UPI
											   ON URP.PRD_RES_NO	 	= UPI.RES_NO
											  AND URP.RES_GROUP_CODE	= UPI.RES_GROUP_CODE
											  AND URP.RES_GROUP_SEQ 	= UPI.RES_GROUP_SEQ
											  AND URP.ITEM_SEQ	     	= UPI.ITEM_SEQ
											LEFT OUTER JOIN ALL_EVENT_PRODUCT_INFO API
											  ON UPI.OFFICE_CODE    	= API.OFFICE_CODE
											 AND UPI.RES_GROUP_CODE 	= API.ITEM_CODE
											LEFT OUTER JOIN EVENT_PRODUCT_SURGICAL EPS
											  ON API.OFFICE_CODE   	    = EPS.OFFICE_CODE
											 AND API.EVENT_UPDATE_SEQ   = EPS.EVENT_UPDATE_SEQ
											 AND API.EVENT_SEQ		    = EPS.EVENT_SEQ
											 AND API.EVENT_SUB_SEQ	    = EPS.EVENT_SUB_SEQ
											 AND API.EVENT_PRODUCT_CODE = EPS.EVENT_PRODUCT_CODE
									WHERE URP.OFFICE_CODE   = #{officeCode}
									  AND URP.RES_NO		= #{resNo}
									GROUP BY 
										  URP.RES_NO, URP.RES_GROUP_CODE, URP.RES_GROUP_SEQ, UPI.GROUP_SEQ
								  ) X
							GROUP BY X.RES_NO, X.RES_GROUP_CODE, X.RES_GROUP_SEQ
				  ) ITM
			WHERE UR.OFFICE_CODE   = #{officeCode}
			  AND UR.RES_NO		   = #{resNo}
		]]>
	</select>
	
	<select id="isExistUser" parameterType="com.wwl.app.domain.res.dto.ResUserDTO" resultType="boolean">
		<![CDATA[
			/*
			 * SQL ID      : res.isExistUser
			 * Description : 회원 여부 확인
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.07.18  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			SELECT IF(COUNT(USER_ID) = 1, 1, 0)
			  FROM USER_INFO
			 WHERE OFFICE_CODE   = #{officeCode}
			   AND NAME			 = #{name}
			   AND MOBILE		 = #{mobile}
		]]>
	</select>
	
	<insert id="insertUser" parameterType="com.wwl.app.domain.res.dto.ResUserDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.insertUser
			 * Description : 회원 추가(비회원)
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.07.18  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			INSERT INTO USER_INFO (
				  OFFICE_CODE	
				, USER_ID	
				, USER_PW	
				, GRADE_CODE	
				, PW_SALT	
				, NAME	
				, GENDER	
				, MOBILE	
				, BIRTHDATE	
				, USE_YN	
				, SOCIAL_LOGIN	
				, SOCIAL_TOKEN	
				, MARKETING_YN	
				, START_DATE	
				, FIXED_DOCTOR	
				, FIXED_STAFF	
				, MEMBER_YN						
			) VALUES (
				  #{officeCode}	
				, #{userId}	
				, ''
				, #{gradeCode}
				, ''	
				, #{name}
				, #{gender}
				, #{mobile}
				, #{birthdate}	
				, 'Y'	
				, ''	
				, ''	
				, #{marketingYn}	
				, NOW()
				, #{fixedDoctor}
				, #{fixedStaff}	
				, 'N'			
			)
		]]>
	</insert>
	
	<update id="updateOfficeSetting" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.updateOfficeSetting
			 * Description : 지점 자동승인 설정 변경
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.07.29  이승현      최초 생성
		     */
		]]>
		<![CDATA[	
			UPDATE HOSPITAL_OFFICE_INFO
			   SET AUTO_RESERVE  = #{useYn}
			 WHERE OFFICE_CODE 	 = #{officeCode}
		]]>
	</update>
	
	<select id="getAutoReserveTimeList" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO" resultType="com.wwl.app.domain.res.dto.ResReserveDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.getAutoReserveTimeList
			 * Description : 자동승인 시간 조회
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.08.01  이승현      최초 생성
		     */
		]]>
		<![CDATA[	
			SELECT 
				   DATA_DAY
				 , TIME_SEQ
			     , CONCAT(SUBSTR(START_TIME,1,2), ':', SUBSTR(START_TIME,3)) AS START_TIME
			     , CONCAT(SUBSTR(END_TIME,1,2), ':', SUBSTR(END_TIME,3)) AS END_TIME     
			     , USE_YN
			  FROM HOSPITAL_AUTO_RESERVE
			 WHERE OFFICE_CODE = #{officeCode}
			 ORDER BY DATA_DAY, START_TIME
		]]>
	</select>
	
	<update id="updateAutoReserveTime" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.updateAutoReserveTime
			 * Description : 자동승인 시간 저장
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.08.01  이승현      최초 생성
		     */
		]]>
		<![CDATA[	
			INSERT INTO HOSPITAL_AUTO_RESERVE (
				  OFFICE_CODE	
				, DATA_DAY	
				, TIME_SEQ	
				, START_TIME	
				, END_TIME	
				, USE_YN								
			) VALUES (
				  #{officeCode}	
				, #{dataDay}
				, IF(#{timeSeq} = 0, (SELECT IFNULL(MAX(TIME_SEQ), 0) + 1
									    FROM HOSPITAL_AUTO_RESERVE A
									   WHERE OFFICE_CODE   = #{officeCode}
									     AND DATA_DAY	   = #{dataDay}), #{timeSeq})
				, #{startTime}	
				, #{endTime}	
				, #{useYn}
			)
			ON DUPLICATE KEY
			UPDATE START_TIME = IFNULL(#{startTime}, START_TIME)
			     , END_TIME   = IFNULL(#{endTime}, END_TIME)
		     	 , USE_YN     = #{useYn} 
		]]>
	</update>
	
	<delete id="deleteAutoReserveTime" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.deleteAutoReserveTime
			 * Description : 자동승인 시간 삭제
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.08.01  이승현      최초 생성
		     */
		]]>
		<![CDATA[	
			DELETE FROM HOSPITAL_AUTO_RESERVE
			 WHERE OFFICE_CODE   = #{officeCode}
			   AND DATA_DAY	     = #{dataDay}
			   AND TIME_SEQ 	 = #{timeSeq}
		]]>
	</delete>
	
	<select id="getAutoExceptProduct" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO" resultType="com.wwl.app.domain.res.dto.ResReserveDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.getAutoReserveTimeList
			 * Description : 자동승인 예외 소분류 조회
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.08.01  이승현      최초 생성
		     */
		]]>
		<![CDATA[	
			SELECT 
				   H1.PRD_SUB_CODE
				 , H2.PRD_SUB_NAME
			  FROM HOSPITAL_AUTO_EXCEPT_PRODUCT H1
			       INNER JOIN PRODUCT_SURGICAL_SUB_TMP H2
			         ON H1.OFFICE_CODE   = H2.OFFICE_CODE
			        AND H1.PRD_SUB_CODE  = H2.PRD_SUB_CODE
			 WHERE H1.OFFICE_CODE   = #{officeCode}			
		]]>
	</select>
	
	<insert id="insertAutoExceptProduct" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.insertAutoExceptProduct
			 * Description : 자동예약 예외 소분류 등록
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.08.01  이승현      최초 생성
		     */
		]]>
		<![CDATA[	
			INSERT INTO HOSPITAL_AUTO_EXCEPT_PRODUCT (
				  OFFICE_CODE	
				, PRD_SUB_CODE	
				, CREATE_USER	
				, CREATE_DATE	
			) VALUES (
				  #{officeCode}	
				, #{prdSubCode}	
				, #{createUser}
				, NOW()
			)
		]]>
	</insert>
	
	<delete id="deleteAutoExceptProduct" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.deleteAutoExceptProduct
			 * Description : 자동예약 예외 소분류 삭제
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.08.01  이승현      최초 생성
		     */
		]]>
		<![CDATA[	
			DELETE FROM HOSPITAL_AUTO_EXCEPT_PRODUCT
		     WHERE OFFICE_CODE   = #{officeCode} 
		       AND PRD_SUB_CODE  = #{prdSubCode}
		]]>
	</delete>
	
	<select id="getAutoExceptGrade" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO" resultType="camelHashMap"> 
		<![CDATA[
			/*
			 * SQL ID      : res.getAutoExceptGrade
			 * Description : 자동예약 예외등급 조회
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.08.01  이승현      최초 생성
		     */
		]]>
		<![CDATA[	
			SELECT 
				   X.GRADE_CODE	-- 등급코드
				 , X.GRADE_NAME	-- 등급명
				 , X.USE_YN		-- 등급사용여부
				 , (SELECT AUTO_RESERVE
                      FROM HOSPITAL_OFFICE_INFO 
					 WHERE OFFICE_CODE   = #{officeCode}) AS AUTO_RESERVE
			  FROM (					   
					SELECT 
						   TMP.GRADE_CODE
						 , TMP.GRADE_NAME
						 , IF(IFNULL(HAE.GRADE_CODE, 'N') = 'N', 'N', 'Y') AS USE_YN
					  FROM (SELECT 'G000'      AS GRADE_CODE
								 , '지정 의료진'  AS GRADE_NAME) TMP
							LEFT OUTER JOIN HOSPITAL_AUTO_EXCEPT_GRADE HAE
							  ON TMP.GRADE_CODE    = HAE.GRADE_CODE
							 AND HAE.OFFICE_CODE   = #{officeCode}
					UNION ALL
					SELECT 
						   UG.GRADE_CODE
						 , UG.GRADE_NAME
						 , IF(IFNULL(HAE.GRADE_CODE, 'N') = 'N', 'N', 'Y') AS USE_YN
					  FROM USER_GRADE UG
						   LEFT OUTER JOIN HOSPITAL_AUTO_EXCEPT_GRADE HAE
							 ON UG.OFFICE_CODE   = HAE.OFFICE_CODE
							AND UG.GRADE_CODE    = HAE.GRADE_CODE
					 WHERE UG.OFFICE_CODE   = #{officeCode}
					) X
			ORDER BY X.GRADE_CODE
		]]>
	</select>
	
	<insert id="insertAutoExceptGrade" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.insertAutoExceptGrade
			 * Description : 자동예약 예외등급 저장
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.08.01  이승현      최초 생성
		     */
		]]>
		<![CDATA[	
			INSERT INTO HOSPITAL_AUTO_EXCEPT_GRADE (
			  	  OFFICE_CODE	
				, GRADE_CODE	
				, CREATE_USER	
				, CREATE_DATE				
			) VALUES (
			      #{officeCode}	
				, #{gradeCode}
				, #{createUser}	
				, NOW()
			)				
		]]>
	</insert>
	
	<delete id="deleteAutoExceptGrade" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.deleteAutoExceptGrade
			 * Description : 자동예약 예외등급 삭제
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.08.01  이승현      최초 생성
		     */
		]]>
		<![CDATA[	
			DELETE FROM HOSPITAL_AUTO_EXCEPT_GRADE
			 WHERE OFFICE_CODE   = #{officeCode}
			   AND GRADE_CODE    = #{gradeCode}
		]]>
	</delete>
	
	<select id="getUserReserveCount" parameterType="com.wwl.app.domain.res.dto.ResUserDTO" resultType="camelHashMap">
		<![CDATA[
			/*
			 * SQL ID      : res.getUserReserveCount
			 * Description : 총 예약 건수 조회
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.06.29  이승현      조회 쿼리 수정
		     */
		]]>
		<![CDATA[
			SELECT 
				   A.TOTAL_CNT	-- 총 예약 건수
				 , B.FIRST_CNT	-- 초진 건수
			     , C.SECOND_CNT	-- 재진 건수
			  FROM (
					SELECT COUNT(RES_NO) AS TOTAL_CNT
					  FROM USER_RESERVE
					 WHERE OFFICE_CODE   = #{officeCode}
					   AND RES_DATE		 = #{resDate}
					   AND VISIT_STATUS	 = 'Y'
					) A 
					LEFT OUTER JOIN (
										SELECT COUNT(UR.USER_ID) AS FIRST_CNT
										  FROM USER_RESERVE UR
										 WHERE UR.OFFICE_CODE   = #{officeCode}
										   AND UR.RES_DATE		= #{resDate}
										   AND UR.VISIT_STATUS	= 'Y'
										   AND UR.USER_ID NOT IN (-- 남은 시술권 여부로 초진/재진구분
																  SELECT USER_ID
																	FROM USER_PRODUCT
																   WHERE OFFICE_CODE   = #{officeCode}
																   GROUP BY OFFICE_CODE, USER_ID)							 
			        ) B ON 1=1        
			        LEFT OUTER JOIN (
										SELECT COUNT(UR.USER_ID) AS SECOND_CNT
										  FROM USER_RESERVE UR
										 WHERE UR.OFFICE_CODE   = #{officeCode}
										   AND UR.RES_DATE		= #{resDate}
										   AND UR.VISIT_STATUS	= 'Y'
										   AND UR.USER_ID IN (-- 남은 시술권 여부로 초진/재진구분
															  SELECT USER_ID
																FROM USER_PRODUCT
															   WHERE OFFICE_CODE   = #{officeCode}
															   GROUP BY OFFICE_CODE, USER_ID)
			        ) C ON 1=1
		]]>
	</select>

	<select id="getReserveTime" parameterType="com.wwl.app.domain.res.dto.ResUserDTO" resultType="camelHashMap">
		<![CDATA[
			/*
			 * SQL ID      : res.getReserveTime
			 * Description : 예약시간 조회
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.09.08  이승현      조회 쿼리 수정
		     */
		]]>
		
		<![CDATA[
			SELECT SUBSTR(HHMM,1,4) AS RES_KEY
				 , CONCAT(SUBSTR(HHMM,1,2), ':' , SUBSTR(HHMM,3,2)) AS RES_VALUE
			  FROM HOSPITAL_RESERVE
			 WHERE OFFICE_CODE	 = #{officeCode}
			 GROUP BY HHMM
		 ]]>
	</select>

	<select id="getReserveUserList" parameterType="com.wwl.app.domain.res.dto.ResUserDTO" resultType="camelHashMap">
		<![CDATA[
			/*
			 * SQL ID      : res.getReserveUserList
			 * Description : 예약 현황 리스트 조회
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.06.08  이승현      조회 쿼리 수정
		     */
		]]>
		<![CDATA[					
			SELECT 
				   X.RES_STATUS			-- 예약회원상태(0:예약,1:도착,2:상담대기,3:CRM전송,4:시술확인)
				 , X.STATUS_COLOR		-- 상태색상  
				 , X.RES_TIME			-- 예약시간
				 , X.CHECKIN_TIME		-- 예약시간,도착시간비교값 
				 , X.USER_ID		    -- 회원아이디
				 , X.RES_NO				-- 예약번호
				 , X.RES_TYPE			-- 예약타입(RES001)				 
				 , X.RES_NOTE			-- 예약메모
				 , X.ITEM_NAME			-- 예약시술
				 , X.ITEM_PRICE			-- 시술가격
				 , X.ADVICE_YN			-- 상담희망여부
				 , X.MEMBER_YN			-- 회원유무
				 , X.USER_ID			-- 회원아이디
				 , X.GRADE_CODE			-- 회원등급코드
				 , X.GRADE_DISPLAY		-- 회원등급표시
				 , X.GRADE_COLOR		-- 회원등급표시
				 , X.NAME				-- 회원명
				 , X.GENDER				-- 성별
				 , X.MOBILE				-- 휴대전화	
				 , X.BIRTHDATE			-- 생년월일
				 , X.AGE				-- 나이
				 , X.CONFIRM_YN 		-- 예약확인여부   
				 , X.CONFIRM_DATE		-- 예약확인시간
				 , X.CHECKIN_DATE		-- 회원도착시간
				 , X.MARKETING_YN		-- 마케팅동의여부
				 , X.PUSH_RESERVE_YN	-- 앱푸시동의여부
				 , X.FIXED_DOCTOR		-- 의료진지정(원장)사번
				 , X.FIXED_STAFF		-- 의료진지정(직원)사번	
				 , X.FIXED_DOCTOR_NAME	-- 의료진지정(원장)
				 , X.FIXED_STAFF_NAME   -- 의료진지정(직원)
				 , X.VISIT_TYPE			-- 초진/재진구분
				 , X.SEND_PRODUCT_CNT	-- 전송수:남은시술권
				 , X.SEND_RESERVE_CNT	-- 전송수:주의사항
				 , X.SEND_CRM_CNT		-- 전송수:CRM 
			  FROM (
					 SELECT 
							UR.OFFICE_CODE
						  , UR.RES_NO			
						  , (SELECT COMMON_NAME
							   FROM COMMON_CODE
							  WHERE GROUP_CODE  = 'RES001'
								AND COMMON_CODE = UR.RES_TYPE) AS RES_TYPE					  
						  , UR.RES_DATE
						  , UR.RES_TIME
						  -- 예약 시간(+30분)보다 일찍 온 경우
						  , CASE WHEN DATE_FORMAT(DATE_ADD(UR.CHECKIN_DATE, INTERVAL 30 MINUTE), '%H%i') < UR.RES_TIME THEN 
									CONCAT(SUBSTR(UR.RES_TIME,1,2), ':', SUBSTR(UR.RES_TIME,3), ' → ',
										   IF(SUBSTR(TIMEDIFF(DATE_FORMAT(DATE_ADD(UR.CHECKIN_DATE, INTERVAL 90 MINUTE), '%H00'), DATE_FORMAT(DATE_ADD(UR.CHECKIN_DATE, INTERVAL 30 MINUTE), '%H%i')), 7, 2) > 30,
												DATE_FORMAT(DATE_ADD(UR.CHECKIN_DATE, INTERVAL 30 MINUTE), '%H:00'),
												DATE_FORMAT(UR.CHECKIN_DATE, '%H:30')
											)
									)
								 ELSE CONCAT(SUBSTR(UR.RES_TIME,1,2), ':', SUBSTR(UR.RES_TIME,3))
							 END CHECKIN_TIME
						  , UR.RES_STATUS  
						  , (SELECT STATUS_COLOR
							   FROM USER_RESERVE_STATUS
							  WHERE OFFICE_CODE   = UR.OFFICE_CODE
								AND STATUS_CODE   = UR.RES_STATUS) AS STATUS_COLOR
						  , UR.RES_NOTE                                                  
						  , ITM.ITEM_NAME
						  , ITM.ITEM_PRICE
						  , UR.ADVICE_YN												  
						  , UR.USER_ID
						  , UI.MEMBER_YN
						  , UI.GRADE_CODE
						  , UI.GRADE_DISPLAY
						  , UI.GRADE_COLOR
						  , UI.NAME 
						  , UI.GENDER 
						  , UI.MOBILE
						  , UI.BIRTHDATE
						  , UI.AGE
						  , UR.CONFIRM_YN                                              
						  , DATE_FORMAT(UR.CONFIRM_DATE, '%H:%i') AS CONFIRM_DATE
						  , DATE_FORMAT(UR.CHECKIN_DATE, '%H:%i') AS CHECKIN_DATE
                          , (SELECT COUNT(RES_NO)
							   FROM CRM_DATA_HISTORY
							  WHERE OFFICE_CODE = UR.OFFICE_CODE
                                AND RES_NO		= UR.RES_NO) AS SEND_CRM_CNT
                          , IFNULL(PRD_CNT.SEND_PRODUCT_CNT, 0) AS SEND_PRODUCT_CNT
                          , IFNULL(RES_CNT.SEND_RESERVE_CNT, 0) AS SEND_RESERVE_CNT
						  , UI.MARKETING_YN
						  , UI.PUSH_RESERVE_YN
						  , UI.FIXED_DOCTOR
						  , UI.FIXED_STAFF
						  , UI.FIXED_DOCTOR_NAME
						  , UI.FIXED_STAFF_NAME
						  , UI.VISIT_TYPE
					   FROM USER_RESERVE UR
							INNER JOIN (
										SELECT
											  U1.OFFICE_CODE
											, U1.USER_ID
											, U1.MEMBER_YN
											, U1.GRADE_CODE
											, U2.GRADE_DISPLAY
											, U2.GRADE_COLOR
											, U1.NAME 
											, IF(U1.GENDER = 'male', '남', '여') GENDER 
											, U1.MOBILE
											, U1.BIRTHDATE
											, IF(U1.BIRTHDATE = '', '', (DATE_FORMAT(NOW(), '%Y') - SUBSTR(U1.BIRTHDATE, 1, 4) + 1)) AGE
											, U1.MARKETING_YN		
											, U1.PUSH_RESERVE_YN					
											, U1.FIXED_DOCTOR
											, U1.FIXED_STAFF
											, (SELECT CONCAT('(', CC.COMMON_NAME, ')', SUI.SYS_NAME)
												 FROM SYS_USER_INFO SUI
													  LEFT OUTER JOIN COMMON_CODE CC
														ON CC.GROUP_CODE	= 'POS001'
													   AND SUI.SYS_POSITION = CC.COMMON_CODE
												WHERE SUI.OFFICE_CODE	= U1.OFFICE_CODE
												  AND SUI.SYS_USER_ID   = U1.FIXED_DOCTOR) FIXED_DOCTOR_NAME
											, (SELECT CONCAT('(', CC.COMMON_NAME, ')', SUI.SYS_NAME)
												 FROM SYS_USER_INFO SUI
													  LEFT OUTER JOIN COMMON_CODE CC
														ON CC.GROUP_CODE	= 'POS001'
													   AND SUI.SYS_POSITION = CC.COMMON_CODE
												WHERE SUI.OFFICE_CODE	= U1.OFFICE_CODE
												  AND SUI.SYS_USER_ID   = U1.FIXED_STAFF) FIXED_STAFF_NAME
											 , IF(IFNULL(U3.USER_ID, 'Y') = 'Y', '초진', '재진') AS VISIT_TYPE
										  FROM USER_INFO U1															   
											  LEFT OUTER JOIN USER_GRADE U2
												ON U1.OFFICE_CODE   = U2.OFFICE_CODE
											   AND U1.GRADE_CODE    = U2.GRADE_CODE
											  LEFT OUTER JOIN ( -- 남은 시술권 여부로 초진/재진구분
																SELECT OFFICE_CODE
																	 , USER_ID
																 FROM USER_PRODUCT
																GROUP BY OFFICE_CODE, USER_ID 
												) U3
												ON U1.OFFICE_CODE   = U3.OFFICE_CODE
											   AND U1.USER_ID		 = U3.USER_ID
										 WHERE U1.OFFICE_CODE   = #{officeCode}
							) UI 
							 ON UR.OFFICE_CODE	 = UI.OFFICE_CODE
							AND UR.USER_ID		 = UI.USER_ID
						   LEFT OUTER JOIN (
						   					SELECT  
												   RST.RES_NO
												 , GROUP_CONCAT(RST.ITEM_NAME SEPARATOR '\n') AS ITEM_NAME
												 , GROUP_CONCAT(RST.ITEM_PRICE SEPARATOR '\n') AS ITEM_PRICE       
											  FROM (
										  	        -- 예약 상품
													SELECT 
														   URD.RES_NO
														 , GROUP_CONCAT(CONCAT('<div><label>', URD.ITEM_NAME, ' - ', FORMAT(URD.ITEM_PRICE, 0), '원</label></div>') SEPARATOR '\n') AS ITEM_NAME
														 , GROUP_CONCAT(URD.ITEM_PRICE SEPARATOR '\n') AS ITEM_PRICE                                                                                       
													  FROM (
															SELECT 
																   U.OFFICE_CODE
																 , U.RES_NO
																 , P.PRD_ITEM_NAME AS ITEM_NAME
																 , P.PRICE 		   AS ITEM_PRICE 
															  FROM USER_RESERVE_ITEM U
																   INNER JOIN ALL_PRODUCT_INFO A
																	  ON U.OFFICE_CODE    = A.OFFICE_CODE
																	 AND U.RES_GROUP_CODE = A.ITEM_CODE
																	 AND U.RES_GROUP_SEQ  = 1	-- 최초 예약에 관해서만 계산
																   INNER JOIN PRODUCT_SURGICAL_ITEM P
																	  ON A.OFFICE_CODE   = P.OFFICE_CODE
																	 AND A.UPDATE_SEQ    = P.UPDATE_SEQ
																	 AND A.PRD_ITEM_CODE = P.PRD_ITEM_CODE
															 WHERE U.OFFICE_CODE   = #{officeCode}
															   AND U.ITEM_TYPE	   = 'N'
															   AND U.ITEM_STATUS   = 'R'
															 UNION ALL 
															 SELECT
																   U.OFFICE_CODE
																 , U.RES_NO			 
																 , CONCAT('[EVENT] ', EVENT_PRODUCT_TITLE) AS ITEM_NAME
																 , EVENT_SALE AS ITEM_PRICE
															  FROM USER_RESERVE_ITEM U
																   INNER JOIN ALL_EVENT_PRODUCT_INFO A
																	  ON U.OFFICE_CODE    = A.OFFICE_CODE
																	 AND U.RES_GROUP_CODE = A.ITEM_CODE
																	 AND U.RES_GROUP_SEQ  = 1 -- 최초 예약에 관해서만 계산
																   INNER JOIN EVENT_PRODUCT_SURGICAL E
																	  ON A.OFFICE_CODE   	  = E.OFFICE_CODE
																	 AND A.EVENT_UPDATE_SEQ   = E.EVENT_UPDATE_SEQ
																	 AND A.EVENT_SEQ	 	  = E.EVENT_SEQ
																	 AND A.EVENT_SUB_SEQ 	  = E.EVENT_SUB_SEQ
																	 AND A.EVENT_PRODUCT_CODE = E.EVENT_PRODUCT_CODE                 
															 WHERE U.OFFICE_CODE   = #{officeCode}
															   AND U.ITEM_TYPE	  <> 'N'
															   AND U.ITEM_STATUS   = 'R'
														   ) URD
													 GROUP BY URD.RES_NO	
													 UNION ALL
													 -- 남은 시술권
													 SELECT 
															PRD.RES_NO
														  , GROUP_CONCAT(PRD.ITEM_TITLE SEPARATOR '\n') AS ITEM_NAME     
														  , 0 AS ITEM_PRICE
													   FROM (
															 SELECT 
																    X.OFFICE_CODE
																  , X.RES_NO
													              , X.RES_GROUP_CODE
																  , X.ITEM_TYPE             
													              , CASE WHEN X.ITEM_TYPE = 'C' OR X.ITEM_TYPE = 'P' THEN CONCAT('<label>[남은 시술권] ', X.PRODUCT_TITLE, '</label>\n',
																																GROUP_CONCAT(X.ITEM_TITLE ORDER BY X.ITEM_ORDER SEPARATOR '\n'))
																	 	 ELSE CONCAT('<label>[남은 시술권] ', X.ITEM_TITLE, '</label>')
																	 END ITEM_TITLE				
															   FROM (
																	 SELECT 
																		   URP.OFFICE_CODE
																		 , URP.RES_NO	
																		 , URP.RES_GROUP_CODE
																		 , URP.RES_GROUP_SEQ
																		 , UPI.GROUP_SEQ
																		 , UPI.ITEM_TYPE                                          
																		 , EPS.EVENT_PRODUCT_TITLE AS PRODUCT_TITLE                     
													                     , MIN(UPI.ITEM_SEQ) AS ITEM_ORDER
													                     , CONCAT(
																			'<div>', 
																			 CASE WHEN UPI.ITEM_TYPE = 'P' THEN CONCAT('[', UPI.GROUP_SEQ, '회] ', GROUP_CONCAT(IF(UPI.SERVICE_YN = 'Y', 
																																								CONCAT('[서비스] ', UPI.PRD_ITEM_NAME), 
																																								UPI.PRD_ITEM_NAME) ORDER BY URP.ITEM_SEQ SEPARATOR ' + '))
																				  WHEN UPI.ITEM_TYPE = 'C' THEN CONCAT('[', MAX(UPI.DEDUCT_CNT), 'p] ', GROUP_CONCAT(IF(UPI.SERVICE_YN = 'Y',
																																									CONCAT('[서비스] ', UPI.PRD_ITEM_NAME), 
													                                                                                                                UPI.PRD_ITEM_NAME) ORDER BY URP.ITEM_SEQ SEPARATOR ', '))
																				  WHEN UPI.ITEM_TYPE = 'E' THEN EPS.EVENT_PRODUCT_TITLE
																				  ELSE IF(UPI.SERVICE_YN = 'Y', CONCAT('[서비스] ', UPI.PRD_ITEM_NAME), UPI.PRD_ITEM_NAME)
																			  END,
																			'</div>') AS ITEM_TITLE						 
																	   FROM USER_RESERVE_PRODUCT URP
																			INNER JOIN (
																						SELECT 
																							   U1.OFFICE_CODE
																							 , U1.RES_NO
																							 , U1.RES_GROUP_CODE
																							 , U1.RES_GROUP_SEQ                                        
																							 , U1.ITEM_TYPE							
																							 , U2.ITEM_SEQ
																							 , U2.GROUP_SEQ
																							 , U2.UPDATE_SEQ
																							 , U2.PRD_ITEM_CODE
																							 , U2.DEDUCT_CNT
																							 , P1.PRD_ITEM_NAME
																							 , U2.SERVICE_YN
																						  FROM USER_PRODUCT U1
																							   INNER JOIN USER_PRODUCT_ITEM U2
																								  ON U1.OFFICE_CODE    = U2.OFFICE_CODE
																								 AND U1.USER_ID		   = U2.USER_ID
																								 AND U1.RES_NO		   = U2.RES_NO
																								 AND U1.RES_GROUP_CODE = U2.RES_GROUP_CODE
																								 AND U1.RES_GROUP_SEQ  = U2.RES_GROUP_SEQ
																							   INNER JOIN PRODUCT_SURGICAL_ITEM P1
																								  ON U2.OFFICE_CODE    = P1.OFFICE_CODE
																								 AND U2.UPDATE_SEQ	   = P1.UPDATE_SEQ
																								 AND U2.PRD_ITEM_CODE  = P1.PRD_ITEM_CODE
																						 WHERE U1.OFFICE_CODE   = #{officeCode}
																			) UPI
																			   ON URP.OFFICE_CODE    	 = UPI.OFFICE_CODE
																			  AND URP.PRD_RES_NO	 	 = UPI.RES_NO
																			  AND URP.RES_GROUP_CODE 	 = UPI.RES_GROUP_CODE                                                                                  
																			  AND URP.RES_GROUP_SEQ	 	 = UPI.RES_GROUP_SEQ
																			  AND URP.ITEM_SEQ	     	 = UPI.ITEM_SEQ	
																			 LEFT OUTER JOIN ALL_EVENT_PRODUCT_INFO API
																			   ON URP.OFFICE_CODE    	 = API.OFFICE_CODE
																			  AND URP.RES_GROUP_CODE     = API.ITEM_CODE
																			 LEFT OUTER JOIN EVENT_PRODUCT_SURGICAL EPS
																			   ON API.OFFICE_CODE   	 = EPS.OFFICE_CODE
																			  AND API.EVENT_UPDATE_SEQ   = EPS.EVENT_UPDATE_SEQ
																			  AND API.EVENT_SEQ		     = EPS.EVENT_SEQ
																			  AND API.EVENT_SUB_SEQ	     = EPS.EVENT_SUB_SEQ
																			  AND API.EVENT_PRODUCT_CODE = EPS.EVENT_PRODUCT_CODE		  
																		WHERE URP.OFFICE_CODE   = #{officeCode}
																		GROUP BY 
																			URP.RES_NO, URP.RES_GROUP_CODE, URP.RES_GROUP_SEQ, UPI.GROUP_SEQ
																		) X
																GROUP BY 
																	X.RES_NO, X.RES_GROUP_CODE, X.RES_GROUP_SEQ
																) PRD
														GROUP BY PRD.RES_NO
												) RST
											GROUP BY RST.RES_NO									       											       
							 ) ITM 
							ON UR.RES_NO = ITM.RES_NO
							LEFT OUTER JOIN (
											SELECT 
												   USER_ID
												 , RES_NO
												 , COUNT(RES_NO) AS SEND_RESERVE_CNT
											  FROM USER_RESERVE_REPLY	
											 WHERE OFFICE_CODE   = #{officeCode}																	   
											 GROUP BY USER_ID, RES_NO															
                                  ) RES_CNT 
                                    ON UR.USER_ID	 = RES_CNT.USER_ID
                                   AND UR.RES_NO   = RES_CNT.RES_NO
                                  LEFT OUTER JOIN (
											SELECT 
												   USER_ID 
												 , RES_NO
												 , COUNT(RES_NO) AS SEND_PRODUCT_CNT
											  FROM USER_PRODUCT_REPLY	
											 WHERE OFFICE_CODE   = #{officeCode}																	   
											 GROUP BY USER_ID, RES_NO
                                 ) PRD_CNT
                                  ON UR.USER_ID = PRD_CNT.USER_ID 
                                 AND UR.RES_NO  = PRD_CNT.RES_NO
					  WHERE UR.OFFICE_CODE   = #{officeCode}
						AND UR.RES_DATE      = #{resDate}
						AND UR.VISIT_STATUS	 = 'Y'							
					) X 					
			ORDER BY IF(X.RES_STATUS = 3, 2, 1), X.RES_TIME				
		]]>
	</select>		
	
	<select id="getMedicalDirector" parameterType="com.wwl.app.domain.sys.dto.SysUserDTO" resultType="camelHashMap">
		<![CDATA[
			/*
			 * SQL ID      : res.getMedicalDirector
			 * Description : 의료인 원장 리스트 조회
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.06.01  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			SELECT 
				   SYS_USER_ID
				 , SYS_NAME
			  FROM SYS_USER_INFO 
			 WHERE OFFICE_CODE	 = #{officeCode}
			   AND SYS_POSITION  = 'A'
			   AND ROLE_CODE     <> 'ROLE_WWL'
			   AND USE_YN		 = 'Y'
		]]>
	</select>
	
	<select id="getMedicalStaff" parameterType="com.wwl.app.domain.sys.dto.SysUserDTO" resultType="camelHashMap">
		<![CDATA[
			/*
			 * SQL ID      : res.getMedicalStaff
			 * Description : 의료인 원장 리스트 조회
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.06.01  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			SELECT 
				   SYS_USER_ID
				 , SYS_NAME
			  FROM SYS_USER_INFO 
			 WHERE OFFICE_CODE	 = #{officeCode}
			   AND SYS_POSITION  <> 'A'
			   AND ROLE_CODE     <> 'ROLE_WWL'
			   AND USE_YN		 = 'Y'
		]]>
	</select>
	
	<update id="updateUserInfo" parameterType="com.wwl.app.domain.res.dto.ResUserDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.updateUserInfo
			 * Description : 회원정보 수정
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.06.08  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			UPDATE USER_INFO 
			   SET GRADE_CODE 	 	= #{gradeCode} 
			     , GENDER		 	= #{gender}
			   	 , NAME			 	= #{name}
			   	 , MOBILE		 	= #{mobile}
			   	 , BIRTHDATE	 	= #{birthdate}
			   	 , FIXED_DOCTOR	 	= #{fixedDoctor}
			   	 , FIXED_STAFF   	= #{fixedStaff}
			   	 , MARKETING_YN  	= #{marketingYn}
			   	 , PUSH_RESERVE_YN  = #{pushReserveYn}
			   	 , TEMP_NOTE		= #{tempNote}
			 WHERE OFFICE_CODE	 	= #{officeCode}
			   AND USER_ID		 	= #{userId}
		]]>
	</update>
	
	<select id="getReserveStatusList" parameterType="com.wwl.app.domain.res.dto.ResUserDTO" resultType="camelHashMap">
		<![CDATA[
			/*
			 * SQL ID      : res.getReserveStatusList
			 * Description : 예약회원구분 색상설정 리스트 조회
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.06.29  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			SELECT 
				   MAX(IF(STATUS_CODE = 1, STATUS_COLOR, '')) AS CODE1_COLOR
				 , MAX(IF(STATUS_CODE = 2, STATUS_COLOR, '')) AS CODE2_COLOR
				 , MAX(IF(STATUS_CODE = 3, STATUS_COLOR, '')) AS CODE3_COLOR
				 , MAX(IF(STATUS_CODE = 4, STATUS_COLOR, '')) AS CODE4_COLOR		
			  FROM USER_RESERVE_STATUS
			 WHERE OFFICE_CODE   = #{officeCode}
			   AND STATUS_CODE  <> 0
		]]>
	</select>
	
	<update id="updateReserveStatus" parameterType="com.wwl.app.domain.res.dto.ResUserDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.updateReserveStatus
			 * Description : 예약회원구분 색상저장
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.06.29  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			INSERT INTO USER_RESERVE_STATUS (
				  OFFICE_CODE	
				, STATUS_CODE
				, STATUS_COLOR
				, STATUS_NAME
				, CREATE_USER
				, CREATE_DATE
			) VALUES (
				  #{officeCode}		
				, #{statusCode}
				, #{statusColor}
				, #{statusName}
				, #{createUser}
				, NOW()
			)
			ON DUPLICATE KEY
			UPDATE STATUS_COLOR = #{statusColor}
			     , CREATE_USER  = #{createUser}
			     , CREATE_DATE  = NOW()
		]]>
	</update>
	
	<update id="updateCheckIn" parameterType="com.wwl.app.domain.res.dto.ResUserDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.updateCheckIn
			 * Description : 예약회원 도착처리
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.06.29  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			UPDATE USER_RESERVE
			   SET RES_STATUS   = 1
			     , CHECKIN_USER = #{createUser}
			     , CHECKIN_DATE = NOW()
			 WHERE OFFICE_CODE   = #{officeCode}
			   AND RES_NO		 = #{resNo} 
		]]>
	</update>
	
	<update id="updateResStatus" parameterType="com.wwl.app.domain.res.dto.ResUserDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.updateResStatus
			 * Description : 예약회원 상태 변경
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.06.29  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			UPDATE USER_RESERVE
			   SET RES_STATUS   = IF(#{isCancel} = 'Y',
			   						 CASE WHEN #{statusCode} = 2 OR #{statusCode} = 3 THEN 1
			   						      ELSE #{statusCode} - 1
			   						  END, 
			   						 #{statusCode} + 1) 
			     , CHECKIN_USER = IF(#{isCancel} = 'Y',
			     					 CASE WHEN #{statusCode} - 1 = 0 THEN ''
			     					      ELSE CHECKIN_USER
			     					  END, CHECKIN_USER)
			     , CHECKIN_DATE = IF(#{isCancel} = 'Y',
			     					 CASE WHEN #{statusCode} - 1 = 0 THEN NULL
			     					      ELSE CHECKIN_DATE
			     					  END, CHECKIN_DATE)					  			     
			 WHERE OFFICE_CODE   = #{officeCode}
			   AND RES_NO		 = #{resNo} 
		]]>
	</update>
	
	<update id="updateNotCheckIn" parameterType="com.wwl.app.domain.res.dto.ResUserDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.updateNotCheckIn
			 * Description : 예약회원 미도착처리
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.06.29  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			UPDATE USER_RESERVE
			   SET RES_STATUS = 5			   	
			 WHERE OFFICE_CODE   = #{officeCode}
			   AND RES_NO		 = #{resNo} 
		]]>
	</update>
	
	<select id="getUnusedUserProduct" parameterType="com.wwl.app.domain.res.dto.ResUserDTO" resultType="camelHashMap">
		<![CDATA[
			/*
			 * SQL ID      : res.getUnusedUserProduct
			 * Description : 예약 확인/접수 - 남은 시술권(미사용) 조회
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.06.10  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			SELECT 		   
				   Z.RES_NO 		  -- 예약번호
				 , Z.RES_GROUP_CODE	  -- 예약상품그룹코드
				 , Z.RES_GROUP_SEQ    -- 예약상품그룹SEQ
				 , Z.GROUP_SEQ		  -- 그룹번호		      
				 , Z.GROUP_TITLE 	  -- Y일때 시술명 사용	 
				 , Z.ITEM_TYPE		  -- 시술타입	 	 	 	 
			     , Z.PRODUCT_TITLE 	  -- 시술명    					 
				 , Z.PRODUCT_PRICE    -- 시술가격
				 , Z.ITEM_TITLE		  -- 패키지횟수타이틀
				 , Z.PRD_ITEM_NAME	  -- 시술상품리스트
				 , Z.PRD_ITEM_PRICE	  -- 일반시술가격(서비스시술가격 표시에 사용)
				 , Z.ITEM_SEQ		  -- 시술상품코드
				 , Z.SERVICE_YN	      -- 서비스시술여부
				 , Z.CONFIRM_STATUS	  -- 사용여부	 
				 , IF(Z.GROUP_TITLE = 'Y', IF(IFNULL(Z.NOTE_SEQ, '') = '', 'N', 'Y'), '') AS NOTE_YN -- 시술메모여부
     			 , IF(IFNULL(Z.CONTENT, '') = '', 'N', 'Y') AS MESSAGE_YN -- 홈페이지메세지여부
				 , Z.MAX_CNT		  -- 이벤트차감인경우 제한횟수
				 , Z.DEDUCT_CNT		  -- 이벤트차감인경우 차감횟수			     
				 , Z.REFUND_CNT		  -- 환불횟수(차감사용)
				 , Z.REFUND_AMOUNT	  -- 환불금액	
				 , Z.CRM_SEND_YN  	  -- CRM전송여부
     			 , Z.CRM_SEND_CNT 	  -- CRM전송여부(차감사용개수)
				 , Z.TOTAL_DEDUCT_CNT -- 총차감횟수	 
			  FROM (	
					SELECT 
						   X.OFFICE_CODE
						 , IF(X.GROUP_CODE = LAG(X.GROUP_CODE) OVER (ORDER BY X.CREATE_DATE DESC, X.RES_NO, X.GROUP_CODE, X.GROUP_SEQ), 'N', 'Y') AS GROUP_TITLE	 	 
						 , X.RES_NO
						 , X.RES_GROUP_CODE
						 , X.RES_GROUP_SEQ
						 , X.GROUP_SEQ
						 , X.UPDATE_SEQ
						 , X.ITEM_TYPE
						 , X.MAX_CNT
						 , X.DEDUCT_CNT
						 , X.ITEM_SEQ
			             , X.PRODUCT_TITLE
			             , X.PRODUCT_PRICE
						 , X.ITEM_TITLE
						 , X.PRD_ITEM_NAME
						 , X.PRD_ITEM_PRICE
						 , X.SERVICE_YN
						 , X.CONFIRM_STATUS
						 , X.REFUND_CNT
						 , X.REFUND_AMOUNT
						 , X.CRM_SEND_YN
			 			 , X.CRM_SEND_CNT
						 , X.TOTAL_DEDUCT_CNT
						 , Y.NOTE_SEQ
             			 , V.CONTENT
					  FROM (
							-- 보유중인 시술권 중 미사용한 일반/이벤트(이벤트,패키지) 시술권
							SELECT 
								   UP.OFFICE_CODE
								 , UP.RES_NO
								 , UP.RES_GROUP_CODE	
								 , UP.RES_GROUP_SEQ 
								 , CONCAT(UP.RES_NO, '-', UP.RES_GROUP_CODE, UP.RES_GROUP_SEQ) AS GROUP_CODE
								 , UPI.GROUP_SEQ
								 , UPI.UPDATE_SEQ
								 , UP.ITEM_TYPE 	 
								 , GROUP_CONCAT(UPI.ITEM_SEQ ORDER BY UPI.ITEM_SEQ SEPARATOR '\n') 						  AS ITEM_SEQ
								 , IF(UP.ITEM_TYPE = 'N', TTL.PRD_ITEM_NAME, CONCAT('[EVENT] ', EPS.EVENT_PRODUCT_TITLE)) AS PRODUCT_TITLE
								 , FORMAT(IF(UP.ITEM_TYPE = 'N', PSI.PRICE, EPS.EVENT_SALE) ,0) 						  AS PRODUCT_PRICE
								 , CASE WHEN UP.ITEM_TYPE = 'P' THEN CONCAT('<bold>[', UPI.GROUP_SEQ, '회]</bold> ', CONCAT('<span>', TTL.ITEM_TITLE , '</span>'))
										WHEN UP.ITEM_TYPE = 'E' THEN GROUP_CONCAT(IF(UPI.SERVICE_YN = 'N' , PSI.PRD_ITEM_NAME ,  NULL) ORDER BY UPI.ITEM_SEQ SEPARATOR ' + ')
										ELSE PSI.PRD_ITEM_NAME
									END ITEM_TITLE
								 , GROUP_CONCAT(PSI.PRD_ITEM_NAME	ORDER BY UPI.ITEM_SEQ SEPARATOR '\n') AS PRD_ITEM_NAME	
								 , GROUP_CONCAT(FORMAT(PSI.PRICE,0) ORDER BY UPI.ITEM_SEQ SEPARATOR '\n') AS PRD_ITEM_PRICE
								 , GROUP_CONCAT(UPI.SERVICE_YN 		ORDER BY UPI.ITEM_SEQ SEPARATOR '\n') AS SERVICE_YN
								 , GROUP_CONCAT(IF(UPI.ITEM_SEQ = URP.ITEM_SEQ, 'Y', UPI.CONFIRM_STATUS) ORDER BY UPI.ITEM_SEQ SEPARATOR '\n') AS CONFIRM_STATUS	           
								 , 0 AS MAX_CNT
								 , 0 AS DEDUCT_CNT
								 , 0 AS REFUND_CNT
								 , GROUP_CONCAT(IF(UPI.SERVICE_YN = 'N', FORMAT(IFNULL(UFP.REFUND_AMOUNT,0), 0), 0) ORDER BY UPI.ITEM_SEQ SEPARATOR '\n') AS REFUND_AMOUNT
								 , GROUP_CONCAT(UPI.CRM_SEND_YN ORDER BY UPI.ITEM_SEQ SEPARATOR '\n')  AS CRM_SEND_YN
                     			 , GROUP_CONCAT(UPI.CRM_SEND_CNT ORDER BY UPI.ITEM_SEQ SEPARATOR '\n') AS CRM_SEND_CNT
								 , 0 AS TOTAL_DEDUCT_CNT
								 , UP.CREATE_DATE
							  FROM USER_PRODUCT UP
								   INNER JOIN USER_PRODUCT_ITEM UPI
									  ON UP.OFFICE_CODE     = UPI.OFFICE_CODE
									 AND UP.USER_ID		    = UPI.USER_ID
									 AND UP.RES_NO		    = UPI.RES_NO
									 AND UP.RES_GROUP_CODE  = UPI.RES_GROUP_CODE
									 AND UP.RES_GROUP_SEQ   = UPI.RES_GROUP_SEQ                          
									 AND UPI.DELETE_STATUS  = 'N'
									 AND UPI.CONFIRM_STATUS = 'N'
								   INNER JOIN ( -- 상품수 - (사용수 + 환불수) = 전체 상품 사용
												SELECT 
													   U3.RES_NO
													 , U3.RES_GROUP_CODE
													 , U3.RES_GROUP_SEQ
			                                         , U3.GROUP_SEQ
												  FROM (
														SELECT 
															   U0.RES_NO
															 , U0.RES_GROUP_CODE
															 , U0.RES_GROUP_SEQ
															 , U1.GROUP_SEQ     
															 , COUNT(U1.ITEM_SEQ)  AS ITEM_CNT	  -- 상품수(서비스포함)
															 , IFNULL(SUM(U1.CONFIRM_CNT), 0) AS CONFIRM_CNT -- 사용수     
															 , IF(IFNULL(SUM(U2.REFUND_AMOUNT), 0) = 0, 0, COUNT(U2.ITEM_SEQ)) AS REFUND_CNT -- 환불수
														  FROM USER_PRODUCT U0
															   INNER JOIN USER_PRODUCT_ITEM U1
			                                                      ON U0.OFFICE_CODE    = U1.OFFICE_CODE
			                                                     AND U0.USER_ID		   = U1.USER_ID
			                                                     AND U0.RES_NO		   = U1.RES_NO
																 AND U0.RES_GROUP_CODE = U1.RES_GROUP_CODE
																 AND U0.RES_GROUP_SEQ  = U1.RES_GROUP_SEQ
															   LEFT OUTER JOIN USER_REFUND_PRODUCT U2
																  ON U1.OFFICE_CODE    = U2.OFFICE_CODE
																 AND U1.RES_NO		   = U2.RES_NO
																 AND U1.RES_GROUP_CODE = U2.RES_GROUP_CODE
																 AND U1.RES_GROUP_SEQ  = U2.RES_GROUP_SEQ
																 AND U1.ITEM_SEQ	   = U2.ITEM_SEQ
														 WHERE U0.OFFICE_CODE   = #{officeCode}
														   AND U0.USER_ID	    = #{userId}
			                                               AND U0.ITEM_TYPE    <> 'C'
														 GROUP BY 
														 	U0.RES_NO, U0.RES_GROUP_CODE, U0.RES_GROUP_SEQ, U1.GROUP_SEQ 
													 ) U3
												 WHERE U3.ITEM_CNT > U3.CONFIRM_CNT + U3.REFUND_CNT
			                       ) AVR
			                          ON UPI.RES_NO		    = AVR.RES_NO
									 AND UPI.RES_GROUP_CODE = AVR.RES_GROUP_CODE
			                         AND UPI.RES_GROUP_SEQ  = AVR.RES_GROUP_SEQ
			                         AND UPI.GROUP_SEQ		= AVR.GROUP_SEQ
								   INNER JOIN PRODUCT_SURGICAL_ITEM PSI
									  ON UPI.OFFICE_CODE    = PSI.OFFICE_CODE
									 AND UPI.UPDATE_SEQ	    = PSI.UPDATE_SEQ
									 AND UPI.PRD_ITEM_CODE  = PSI.PRD_ITEM_CODE	
									LEFT OUTER JOIN USER_RESERVE_PRODUCT URP
								      ON UPI.OFFICE_CODE    = URP.OFFICE_CODE
								  	 AND UPI.RES_NO         = URP.PRD_RES_NO
								     AND UPI.RES_GROUP_CODE = URP.RES_GROUP_CODE
								     AND UPI.RES_GROUP_SEQ  = URP.RES_GROUP_SEQ
								     AND UPI.ITEM_SEQ       = URP.ITEM_SEQ
			                         AND URP.RES_NO		    = #{resNo}
								    LEFT OUTER JOIN USER_REFUND_PRODUCT UFP
								      ON UPI.OFFICE_CODE    = UFP.OFFICE_CODE
								     AND UPI.RES_NO		 	= UFP.RES_NO
								     AND UPI.RES_GROUP_CODE = UFP.RES_GROUP_CODE	   
								     AND UPI.RES_GROUP_SEQ  = UFP.RES_GROUP_SEQ
								     AND UPI.ITEM_SEQ		= UFP.ITEM_SEQ
								    LEFT OUTER JOIN (
													SELECT 
														   U1.RES_NO
														 , U1.RES_GROUP_CODE
														 , U1.RES_GROUP_SEQ
														 , U1.GROUP_SEQ
														 , U2.PRD_ITEM_NAME
														 , GROUP_CONCAT(IF(U1.CONFIRM_STATUS = 'Y', 
																		CONCAT('<span class="line">', U2.PRD_ITEM_NAME, '</span>'),
																		U2.PRD_ITEM_NAME) SEPARATOR ' + ') AS ITEM_TITLE 
													  FROM USER_PRODUCT_ITEM U1
														   INNER JOIN PRODUCT_SURGICAL_ITEM U2
															  ON U1.OFFICE_CODE   = U2.OFFICE_CODE
															 AND U1.UPDATE_SEQ	  = U2.UPDATE_SEQ
															 AND U1.PRD_ITEM_CODE = U2.PRD_ITEM_CODE
													 WHERE U1.OFFICE_CODE   = #{officeCode}
													   AND U1.USER_ID       = #{userId}
													   AND U1.SERVICE_YN	= 'N'	-- 서비스 제외
													 GROUP BY 
														U1.RES_NO, U1.RES_GROUP_CODE, U1.RES_GROUP_SEQ, U1.GROUP_SEQ
								    ) TTL
									ON UPI.RES_NO 		  	  = TTL.RES_NO
								   AND UPI.RES_GROUP_CODE	  = TTL.RES_GROUP_CODE
								   AND UPI.RES_GROUP_SEQ  	  = TTL.RES_GROUP_SEQ
								   AND UPI.GROUP_SEQ	 	  = TTL.GROUP_SEQ
								  LEFT OUTER JOIN ALL_EVENT_PRODUCT_INFO API
									ON UPI.OFFICE_CODE   	  = API.OFFICE_CODE
								   AND UPI.RES_GROUP_CODE	  = API.ITEM_CODE
								  LEFT OUTER JOIN EVENT_PRODUCT_SURGICAL EPS
									ON API.OFFICE_CODE   	  = EPS.OFFICE_CODE
								   AND API.EVENT_UPDATE_SEQ   = EPS.EVENT_UPDATE_SEQ
								   AND API.EVENT_SEQ		  = EPS.EVENT_SEQ
								   AND API.EVENT_SUB_SEQ      = EPS.EVENT_SUB_SEQ
								   AND API.EVENT_PRODUCT_CODE = EPS.EVENT_PRODUCT_CODE
							 WHERE UP.OFFICE_CODE   = #{officeCode}
							   AND UP.USER_ID       = #{userId}
							   AND UP.ITEM_TYPE     <> 'C'		
							 GROUP BY 
								UP.RES_NO, UP.RES_GROUP_CODE, UP.RES_GROUP_SEQ, UPI.GROUP_SEQ
							UNION ALL
							-- 보유중인 시술권 중 차감 횟수가 남은 이벤트(차감) 시술권				
							SELECT 
								   C.OFFICE_CODE
								 , C.RES_NO
								 , C.RES_GROUP_CODE		
								 , C.RES_GROUP_SEQ			 
								 , C.GROUP_CODE
								 , C.GROUP_SEQ
								 , C.UPDATE_SEQ
								 , C.ITEM_TYPE 
								 , C.ITEM_SEQ
			                     , C.PRODUCT_TITLE
			                     , C.PRODUCT_PRICE
								 , C.ITEM_TITLE
								 , C.PRD_ITEM_NAME
								 , C.PRD_ITEM_PRICE
								 , C.SERVICE_YN
								 , C.CONFIRM_STATUS	
								 , C.MAX_CNT
								 , C.DEDUCT_CNT
								 , C.REFUND_CNT					     
								 , C.REFUND_AMOUNT 
								 , C.CRM_SEND_YN
                     			 , C.CRM_SEND_CNT    
								 , C.TOTAL_DEDUCT_CNT  
								 , C.CREATE_DATE
							  FROM (
									SELECT 
										   UP.OFFICE_CODE
										 , UP.RES_NO
										 , UP.RES_GROUP_CODE			
										 , UP.RES_GROUP_SEQ 
										 , CONCAT(UP.RES_NO, '-', UP.RES_GROUP_CODE, UP.RES_GROUP_SEQ) AS GROUP_CODE
										 , UPI.GROUP_SEQ
										 , UPI.UPDATE_SEQ
										 , UP.ITEM_TYPE										 
										 , MAX(UPI.MAX_CNT)    AS MAX_CNT
										 , MAX(UPI.DEDUCT_CNT) AS DEDUCT_CNT
										 , GROUP_CONCAT(UPI.ITEM_SEQ ORDER BY UPI.ITEM_SEQ SEPARATOR '\n')		  AS ITEM_SEQ
			                             , CONCAT('[EVENT] ', EPS.EVENT_PRODUCT_TITLE) 					  		  AS PRODUCT_TITLE
			                             , FORMAT(EPS.EVENT_SALE, 0)				  					   		  AS PRODUCT_PRICE
										 , CONCAT('<bold>[', MAX(UPI.DEDUCT_CNT), ' Point 차감]</bold>') 	   	      AS ITEM_TITLE
										 , GROUP_CONCAT(PSI.PRD_ITEM_NAME 	ORDER BY UPI.ITEM_SEQ SEPARATOR '\n') AS PRD_ITEM_NAME	
										 , GROUP_CONCAT(FORMAT(PSI.PRICE,0) ORDER BY UPI.ITEM_SEQ SEPARATOR '\n') AS PRD_ITEM_PRICE
										 , GROUP_CONCAT(UPI.SERVICE_YN 		ORDER BY UPI.ITEM_SEQ SEPARATOR '\n') AS SERVICE_YN
										 , GROUP_CONCAT(IF(UPI.ITEM_SEQ = URP.ITEM_SEQ, 'Y', UPI.CONFIRM_STATUS) ORDER BY UPI.ITEM_SEQ SEPARATOR '\n') AS CONFIRM_STATUS	
										 , IFNULL(UFP.REFUND_CNT, 0) AS REFUND_CNT
										 , IFNULL(CONCAT('남은 횟수 ', UFP.REFUND_CNT, ' Point 차감', ' (-', FORMAT(UFP.REFUND_AMOUNT, 0), '원)'), 0) AS REFUND_AMOUNT
										 , GROUP_CONCAT(UPI.CRM_SEND_YN ORDER BY UPI.ITEM_SEQ SEPARATOR '\n')  AS CRM_SEND_YN
							 		     , GROUP_CONCAT(UPI.CRM_SEND_CNT ORDER BY UPI.ITEM_SEQ SEPARATOR '\n') AS CRM_SEND_CNT 
										 , IFNULL(DCT.USE_CNT,0) AS TOTAL_DEDUCT_CNT      
										 , UP.CREATE_DATE        
									  FROM USER_PRODUCT UP
										   INNER JOIN USER_PRODUCT_ITEM UPI
											  ON UP.OFFICE_CODE    = UPI.OFFICE_CODE
											 AND UP.USER_ID		   = UPI.USER_ID
											 AND UP.RES_NO		   = UPI.RES_NO
											 AND UP.RES_GROUP_CODE = UPI.RES_GROUP_CODE
											 AND UP.RES_GROUP_SEQ  = UPI.RES_GROUP_SEQ
											 AND UPI.DELETE_STATUS = 'N'
											 AND CASE WHEN UPI.SERVICE_YN = 'Y' THEN UPI.CONFIRM_STATUS = 'N'
													  ELSE UPI.CONFIRM_STATUS IN ('Y', 'N')
												  END
										   INNER JOIN PRODUCT_SURGICAL_ITEM PSI
											  ON UPI.OFFICE_CODE   = PSI.OFFICE_CODE
											 AND UPI.UPDATE_SEQ	   = PSI.UPDATE_SEQ
											 AND UPI.PRD_ITEM_CODE = PSI.PRD_ITEM_CODE
											LEFT OUTER JOIN (-- 차감 이벤트 총 사용 횟수
															 SELECT 
																	A.RES_NO
																  , A.RES_GROUP_CODE
																  , A.RES_GROUP_SEQ
																  , SUM(A.DEDUCT_CNT * A.USE_CNT) AS USE_CNT
															   FROM (
																	 SELECT 
																			UPI.RES_NO    
																		  , UPI.RES_GROUP_CODE
																		  , UPI.RES_GROUP_SEQ
																		  , UPI.GROUP_SEQ
																		  , MAX(UPI.MAX_CNT) 	 AS MAX_CNT
																		  , MAX(UPI.DEDUCT_CNT)  AS DEDUCT_CNT
																		  , SUM(UPI.CONFIRM_CNT) AS USE_CNT
																	   FROM USER_PRODUCT UP
																			INNER JOIN USER_PRODUCT_ITEM UPI 
																			   ON UP.OFFICE_CODE    = UPI.OFFICE_CODE
																			  AND UP.RES_NO		    = UPI.RES_NO
																			  AND UP.RES_GROUP_CODE = UPI.RES_GROUP_CODE
																			  AND UP.RES_GROUP_SEQ  = UPI.RES_GROUP_SEQ
																			  AND UPI.SERVICE_YN    = 'N'
																	 WHERE UP.OFFICE_CODE   = #{officeCode}
																	   AND UP.USER_ID       = #{userId}
																	   AND UP.ITEM_TYPE	    = 'C'
																	 GROUP BY 
																		 UPI.RES_NO, UPI.RES_GROUP_CODE, UPI.RES_GROUP_SEQ, UPI.GROUP_SEQ
																	) A
															 GROUP BY A.RES_NO, A.RES_GROUP_CODE, A.RES_GROUP_SEQ
											 ) DCT
										    ON UPI.RES_NO         	  = DCT.RES_NO 
										   AND UPI.RES_GROUP_CODE 	  = DCT.RES_GROUP_CODE
										   AND UPI.RES_GROUP_SEQ  	  = DCT.RES_GROUP_SEQ								
										  LEFT OUTER JOIN USER_RESERVE_PRODUCT URP
											ON UPI.OFFICE_CODE		  = URP.OFFICE_CODE
										   AND UPI.RES_NO         	  = URP.PRD_RES_NO
										   AND UPI.RES_GROUP_CODE 	  = URP.RES_GROUP_CODE
										   AND UPI.RES_GROUP_SEQ  	  = URP.RES_GROUP_SEQ
										   AND UPI.ITEM_SEQ	      	  = URP.ITEM_SEQ
										   AND URP.RES_NO       	  = #{resNo}
										  LEFT OUTER JOIN USER_REFUND_PRODUCT UFP
											ON UPI.OFFICE_CODE    	  = UFP.OFFICE_CODE
										   AND UPI.RES_NO		  	  = UFP.RES_NO
										   AND UPI.RES_GROUP_CODE 	  = UFP.RES_GROUP_CODE	
										   AND UPI.RES_GROUP_SEQ  	  = UFP.RES_GROUP_SEQ   
										 INNER JOIN ALL_EVENT_PRODUCT_INFO API
											ON UPI.OFFICE_CODE   	  = API.OFFICE_CODE
										   AND UPI.RES_GROUP_CODE	  = API.ITEM_CODE
										 INNER JOIN EVENT_PRODUCT_SURGICAL EPS
											ON API.OFFICE_CODE   	  = EPS.OFFICE_CODE
										   AND API.EVENT_UPDATE_SEQ   = EPS.EVENT_UPDATE_SEQ
										   AND API.EVENT_SEQ		  = EPS.EVENT_SEQ
										   AND API.EVENT_SUB_SEQ      = EPS.EVENT_SUB_SEQ
										   AND API.EVENT_PRODUCT_CODE = EPS.EVENT_PRODUCT_CODE
									 WHERE UP.OFFICE_CODE   = #{officeCode}
									   AND UP.USER_ID       = #{userId}
									   AND (UP.RES_NO, UP.RES_GROUP_CODE, UP.RES_GROUP_SEQ) IN 
										   (
											SELECT 
												   B.RES_NO
												 , B.RES_GROUP_CODE
												 , B.RES_GROUP_SEQ
											  FROM (
													SELECT 
														   A.RES_NO
														 , A.RES_GROUP_CODE
														 , A.RES_GROUP_SEQ
														 , A.MAX_CNT
														 , SUM(A.USE_CNT) + A.REFUND_CNT AS USE_CNT
													  FROM (
															SELECT 
																   UP.RES_NO
																 , UP.RES_GROUP_CODE
																 , UP.RES_GROUP_SEQ
																 , MAX(UPI.MAX_CNT)    	  AS MAX_CNT
																 , MAX(UPI.DEDUCT_CNT) * SUM(UPI.CONFIRM_CNT) AS USE_CNT 
																 , IFNULL(UFP.REFUND_CNT,0) AS REFUND_CNT
															  FROM USER_PRODUCT UP
																   INNER JOIN USER_PRODUCT_ITEM UPI
																	  ON UP.OFFICE_CODE     = UPI.OFFICE_CODE
																	 AND UP.USER_ID		    = UPI.USER_ID
																	 AND UP.RES_NO		    = UPI.RES_NO
																	 AND UP.RES_GROUP_CODE  = UPI.RES_GROUP_CODE
																	 AND UP.RES_GROUP_SEQ   = UPI.RES_GROUP_SEQ
																	 AND UPI.SERVICE_YN     = 'N'
																	LEFT OUTER JOIN USER_REFUND_PRODUCT UFP
																	  ON UPI.OFFICE_CODE    = UFP.OFFICE_CODE
																	 AND UPI.RES_NO		    = UFP.RES_NO
																	 AND UPI.RES_GROUP_CODE = UFP.RES_GROUP_CODE	
																	 AND UPI.RES_GROUP_SEQ  = UFP.RES_GROUP_SEQ 
																WHERE UP.OFFICE_CODE   = #{officeCode}
																  AND UP.USER_ID	   = #{userId}
																  AND UP.ITEM_TYPE     = 'C'   																  
																 GROUP BY 
																	UP.RES_NO, UP.RES_GROUP_CODE, UP.RES_GROUP_SEQ, UPI.GROUP_SEQ
																) A
															GROUP BY 
																A.RES_NO, A.RES_GROUP_CODE, A.RES_GROUP_SEQ
														) B
												WHERE B.MAX_CNT > B.USE_CNT
												) 
										GROUP BY 
											UP.RES_NO, UP.RES_GROUP_CODE, UP.RES_GROUP_SEQ, UPI.GROUP_SEQ
									) C
							) X LEFT OUTER JOIN USER_PRODUCT_NOTE Y
			                 ON X.OFFICE_CODE    = Y.OFFICE_CODE
			                AND X.RES_NO		 = Y.RES_NO
			                AND X.RES_GROUP_CODE = Y.RES_GROUP_CODE
			                AND X.RES_GROUP_SEQ  = Y.RES_GROUP_SEQ
			                LEFT OUTER JOIN USER_PRODUCT_MESSAGE V
			                 ON X.OFFICE_CODE    = V.OFFICE_CODE
			                AND X.RES_NO		 = V.RES_NO
			                AND X.RES_GROUP_CODE = V.RES_GROUP_CODE
			                AND X.RES_GROUP_SEQ  = V.RES_GROUP_SEQ
			                AND X.GROUP_SEQ      = V.GROUP_SEQ
					) Z
		]]>
	</select>
	
	<select id="getUserProductNote" parameterType="com.wwl.app.domain.res.dto.ResNoteDTO" resultType="com.wwl.app.domain.res.dto.ResNoteDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.getUserProductNote
			 * Description : 남은 시술권 메모 조회
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.06.30  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			SELECT 
			       U.RES_NO
			     , U.RES_GROUP_CODE
			     , U.RES_GROUP_SEQ
			     , U.NOTE_SEQ
				 , U.CONTENT
				 , S.SYS_NAME AS CREATE_USER
				 , CONCAT(DATE_FORMAT(U.CREATE_DATE, '%Y. %m. %d')
									, CASE DAYOFWEEK(U.CREATE_DATE) 
										   WHEN '1' THEN '(일)'
										   WHEN '2' THEN '(월)'		
										   WHEN '3' THEN '(화)'	
										   WHEN '4' THEN '(수)'		
										   WHEN '5' THEN '(목)'		
										   WHEN '6' THEN '(금)'		
										   WHEN '7' THEN '(토)'
									   END) AS CREATE_DATE
			  FROM USER_PRODUCT_NOTE U
			  	   INNER JOIN SYS_USER_INFO S
			  	      ON U.CREATE_USER = S.SYS_USER_ID
			 WHERE U.OFFICE_CODE	= #{officeCode}
			   AND U.RES_NO		    = #{resNo}
			   AND U.RES_GROUP_CODE = #{resGroupCode}
			   AND U.RES_GROUP_SEQ  = #{resGroupSeq}
			 ORDER BY U.CREATE_DATE DESC 
		]]>      
	</select>

	<update id="updateUserProductNote" parameterType="com.wwl.app.domain.res.dto.ResNoteDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.updateUserProductNote
			 * Description : 남은 시술권 메모 저장
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.06.30  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			INSERT INTO USER_PRODUCT_NOTE (
				  OFFICE_CODE	
				, RES_NO	
				, RES_GROUP_CODE	
				, RES_GROUP_SEQ
				, NOTE_SEQ	
				, CONTENT	
				, CREATE_USER	
				, CREATE_DATE				
			) VALUES (
				  #{officeCode}	
				, #{resNo}	
				, #{resGroupCode}
				, #{resGroupSeq}
				, IF(#{noteSeq} = 0, 
					(SELECT IFNULL(MAX(NOTE_SEQ),0) + 1
				       FROM USER_PRODUCT_NOTE A
				      WHERE OFFICE_CODE    = #{officeCode}
				        AND RES_NO 		   = #{resNo}
				        AND RES_GROUP_CODE = #{resGroupCode}
				        AND RES_GROUP_SEQ  = #{resGroupSeq}), #{noteSeq})	
				, #{content}	
				, #{createUser}	
				, NOW()		
			) 		
			ON DUPLICATE KEY
			UPDATE CONTENT 	   = #{content}	
				 , CREATE_USER = #{createUser}
				 , CREATE_DATE = NOW()	
		]]>	
	</update>

	<delete id="deleteUserProductNote" parameterType="com.wwl.app.domain.res.dto.ResNoteDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.deleteUserProductNote
			 * Description : 남은 시술권 메모 삭제
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.06.30  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			DELETE FROM USER_PRODUCT_NOTE
			 WHERE OFFICE_CODE    = #{officeCode}
			   AND RES_NO		  = #{resNo}
			   AND RES_GROUP_CODE = #{resGroupCode}
			   AND RES_GROUP_SEQ  = #{resGroupSeq}
			   AND NOTE_SEQ		  = #{noteSeq}
		]]>
	</delete>

	<select id="getUserProductMessage" parameterType="com.wwl.app.domain.res.dto.ResNoteDTO" resultType="com.wwl.app.domain.res.dto.ResNoteDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.getUserProductMessage
			 * Description : 홈페이지 메세지 조회
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.06.30  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			SELECT 
			       U.RES_NO
			     , U.RES_GROUP_CODE
			     , U.RES_GROUP_SEQ
			     , U.GROUP_SEQ
				 , U.CONTENT
				 , S.SYS_NAME AS CREATE_USER
				 , CONCAT(DATE_FORMAT(U.CREATE_DATE, '%Y. %m. %d')
									, CASE DAYOFWEEK(U.CREATE_DATE) 
										   WHEN '1' THEN '(일)'
										   WHEN '2' THEN '(월)'		
										   WHEN '3' THEN '(화)'		
										   WHEN '4' THEN '(수)'		
										   WHEN '5' THEN '(목)'		
										   WHEN '6' THEN '(금)'		
										   WHEN '7' THEN '(토)'
									   END) AS CREATE_DATE
			  FROM USER_PRODUCT_MESSAGE U
			  	   INNER JOIN SYS_USER_INFO S
			  	      ON U.CREATE_USER = S.SYS_USER_ID
			 WHERE U.OFFICE_CODE	= #{officeCode}
			   AND U.RES_NO		    = #{resNo}
			   AND U.RES_GROUP_CODE = #{resGroupCode}
			   AND U.RES_GROUP_SEQ  = #{resGroupSeq}
			   AND U.GROUP_SEQ		= #{groupSeq}			 
		]]>      
	</select>
	
	<update id="updateUserProductMessage" parameterType="com.wwl.app.domain.res.dto.ResNoteDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.updateUserProductMessage
			 * Description : 홈페이지 메세지 저장
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.06.30  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			INSERT INTO USER_PRODUCT_MESSAGE (
				  OFFICE_CODE	
				, RES_NO	
				, RES_GROUP_CODE	
				, RES_GROUP_SEQ
				, GROUP_SEQ	
				, CONTENT	
				, CREATE_USER	
				, CREATE_DATE				
			) VALUES (
				  #{officeCode}	
				, #{resNo}	
				, #{resGroupCode}	
				, #{resGroupSeq}
				, #{groupSeq}
				, #{content}	
				, #{createUser}	
				, NOW()		
			) 		
			ON DUPLICATE KEY
			UPDATE CONTENT 	   = #{content}	
				 , CREATE_USER = #{createUser}
				 , CREATE_DATE = NOW()	
		]]>	
	</update>	
	
	<select id="getUserPayment" parameterType="com.wwl.app.domain.res.dto.ResUserDTO" resultType="com.wwl.app.domain.res.dto.ResNoteDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.getUserPayment
			 * Description : 고객 남은 금액 확인
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.06.30  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			SELECT 
				   UP.PAY_SEQ
			     , UP.PAY_AMOUNT		 
			     , IF(UP.PAY_TYPE = 1, '추가', '사용') AS PAY_TYPE
			     , (SELECT SUM(PAY_AMOUNT * PAY_TYPE) 
			          FROM USER_PAYMENT A
					 WHERE OFFICE_CODE   = UP.OFFICE_CODE
			           AND USER_ID	     = UP.USER_ID
			           AND PAY_SEQ		<= UP.PAY_SEQ) AS REMAIN_AMOUNT
				 , SU.SYS_NAME AS CREATE_USER
			     , CONCAT(DATE_FORMAT(UP.CREATE_DATE, '%Y. %m. %d')
									, CASE DAYOFWEEK(UP.CREATE_DATE) 
										   WHEN '1' THEN '(일)'
										   WHEN '2' THEN '(월)'		
										   WHEN '3' THEN '(화)'		
										   WHEN '4' THEN '(수)'		
										   WHEN '5' THEN '(목)'		
										   WHEN '6' THEN '(금)'		
										   WHEN '7' THEN '(토)'
									   END) AS CREATE_DATE     
			  FROM USER_PAYMENT UP
				   INNER JOIN SYS_USER_INFO SU
			          ON UP.CREATE_USER = SU.SYS_USER_ID
			 WHERE UP.OFFICE_CODE   = #{officeCode}
			   AND UP.USER_ID	    = #{userId}
			 ORDER BY UP.PAY_SEQ 			 
		]]>
	</select>
	
	<insert id="insertUserPayment" parameterType="com.wwl.app.domain.res.dto.ResUserDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.insertUserPayment
			 * Description : 고객 금액 결제,차감
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.06.30  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			INSERT INTO USER_PAYMENT (
				  OFFICE_CODE	
				, USER_ID	
				, PAY_SEQ	
				, PAY_AMOUNT	
				, PAY_TYPE	
				, CREATE_USER	
				, CREATE_DATE						
			) VALUES (
				  #{officeCode}	
				, #{userId}
				, (SELECT IFNULL(MAX(PAY_SEQ),0) + 1
				     FROM USER_PAYMENT UP
				    WHERE UP.OFFICE_CODE = #{officeCode}
				      AND UP.USER_ID	 = #{userId})	
				, REPLACE(#{payAmount},',','')	
				, #{payType}	
				, #{createUser}	
				, NOW()
			)
		]]>
	</insert>
	
	<update id="updateUserPayment" parameterType="com.wwl.app.domain.res.dto.ResUserDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.updateUserPayment
			 * Description : 고객 금액 수정
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.06.30  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			UPDATE USER_PAYMENT
			   SET PAY_AMOUNT  = REPLACE(#{payAmount},',','')
			     , PAY_TYPE    = #{payType}
			     , CREATE_USER = #{createUser}
			     , CREATE_DATE = NOW()
			 WHERE OFFICE_CODE   = #{officeCode}
			   AND USER_ID		 = #{userId}
			   AND PAY_SEQ		 = #{paySeq}
		]]>
	</update>
	
	<delete id="deleteUserPayment" parameterType="com.wwl.app.domain.res.dto.ResUserDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.deleteUserPayment
			 * Description : 고객 금액 삭제
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.06.30  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			DELETE FROM USER_PAYMENT			 
			 WHERE OFFICE_CODE   = #{officeCode}
			   AND USER_ID		 = #{userId}
			   AND PAY_SEQ		 = #{paySeq}
		]]>
	</delete>
	
	<select id="getProductItem" parameterType="com.wwl.app.domain.prd.dto.PrdProductDTO" resultType="camelHashMap">
		<![CDATA[
			/*
			 * SQL ID      : res.getProductItem
			 * Description : 시술명 검색 
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.06.08  이승현      최초 생성
			 * 2022.10.27  이승현      회원 관리 재기획
		     */
		]]>
		<![CDATA[
			SELECT 
				   X.ITEM_CODE
				 , X.ITEM_NAME     
				 , FORMAT(X.ITEM_PRICE, 0) AS ITEM_PRICE
			  FROM (
					-- 일반시술
					SELECT 
						  'N' AS ITEM_TYPE			 
						 , CONCAT('N', A.UPDATE_SEQ, A.PRD_ITEM_CODE) AS ITEM_CODE			 
						 , A.PRD_ITEM_NAME  AS ITEM_NAME	 
						 , A.PRICE 			AS ITEM_PRICE			
						 , D.PRD_CODE		-- 중분류코드
						 , D.PRD_SUB_CODE	-- 소분류코드						 
					  FROM PRODUCT_SURGICAL_ITEM A
						   INNER JOIN (
										SELECT MAX(EVENT_UPDATE_SEQ) UPDATE_SEQ
										  FROM EVENT_MASTER
										 WHERE OFFICE_CODE   = #{officeCode}
										   AND DATE_FORMAT(NOW(), '%Y%m%d') BETWEEN START_DATE AND END_DATE
						   ) B
						   ON A.UPDATE_SEQ = B.UPDATE_SEQ
						   LEFT OUTER JOIN (
											SELECT 
												  PSS.UPDATE_SEQ
												, PSS.PRD_SUB_CODE
												, PSS.PRD_CODE
											 FROM PRODUCT_SURGICAL_SUB PSS
												  INNER JOIN PRODUCT_SURGICAL PS
													 ON PSS.OFFICE_CODE   = PS.OFFICE_CODE
													AND PSS.UPDATE_SEQ	  = PS.UPDATE_SEQ
													AND PSS.PRD_CODE      = PS.PRD_CODE
											 WHERE PSS.OFFICE_CODE   = #{officeCode}
											 GROUP BY PSS.UPDATE_SEQ, PSS.PRD_SUB_CODE
							) D
							ON A.UPDATE_SEQ   = D.UPDATE_SEQ
						   AND A.PRD_SUB_CODE = D.PRD_SUB_CODE    
					 WHERE A.OFFICE_CODE   = #{officeCode}
					 UNION ALL
					 -- 이벤트시술
					SELECT	
						  'E' AS ITEM_TYPE			 
						 , E.ITEM_CODE
						 , E.ITEM_NAME
						 , E.ITEM_PRICE
						 , GROUP_CONCAT(E.PRD_CODE)     AS PRD_CODE		-- 중분류코드
						 , GROUP_CONCAT(E.PRD_SUB_CODE) AS PRD_SUB_CODE	-- 소분류코드						 
					  FROM (
							SELECT
								   CONCAT('E', A.EVENT_UPDATE_SEQ, A.EVENT_SEQ, A.EVENT_SUB_SEQ, A.EVENT_PRODUCT_CODE) AS ITEM_CODE             
								 , CONCAT('[EVENT] ', A.EVENT_PRODUCT_TITLE) AS ITEM_NAME
								 , A.EVENT_SALE AS ITEM_PRICE     			 
								 , D.PRD_CODE
								 , C.PRD_SUB_CODE								 
							 FROM EVENT_PRODUCT_SURGICAL A
								  INNER JOIN (
											   SELECT MAX(EVENT_UPDATE_SEQ) UPDATE_SEQ
												 FROM EVENT_MASTER
												WHERE OFFICE_CODE   = #{officeCode}
												  AND DATE_FORMAT(NOW(), '%Y%m%d') BETWEEN START_DATE AND END_DATE
								   ) B
									ON A.EVENT_UPDATE_SEQ = B.UPDATE_SEQ
								  INNER JOIN EVENT_PRODUCT_PAGE C
									 ON A.OFFICE_CODE        = C.OFFICE_CODE
									AND A.EVENT_UPDATE_SEQ   = C.EVENT_UPDATE_SEQ
									AND A.EVENT_SEQ		     = C.EVENT_SEQ
									AND A.EVENT_SUB_SEQ	     = C.EVENT_SUB_SEQ
									AND A.EVENT_PRODUCT_CODE = C.EVENT_PRODUCT_CODE
								  LEFT OUTER JOIN (
												   SELECT 
														  PSS.UPDATE_SEQ
														, PSS.PRD_SUB_CODE
														, PSS.PRD_CODE
													 FROM PRODUCT_SURGICAL_SUB PSS
														  INNER JOIN PRODUCT_SURGICAL PS
															 ON PSS.OFFICE_CODE   = PS.OFFICE_CODE
															AND PSS.UPDATE_SEQ	  = PS.UPDATE_SEQ
															AND PSS.PRD_CODE      = PS.PRD_CODE
													 WHERE PSS.OFFICE_CODE   = #{officeCode}
													 GROUP BY PSS.UPDATE_SEQ, PSS.PRD_SUB_CODE
								  ) D
								   ON C.EVENT_UPDATE_SEQ = D.UPDATE_SEQ
								  AND C.PRD_SUB_CODE	 = D.PRD_SUB_CODE      
							WHERE A.OFFICE_CODE   = #{officeCode}
							) E
					 GROUP BY E.ITEM_CODE
					) X
				WHERE X.ITEM_NAME LIKE TRIM(CONCAT('%', #{field}, '%'))			      
		]]>
		<if test="prdCode != null and prdCode != ''">		<!-- 중분류 검색 -->
			AND X.PRD_CODE LIKE CONCAT('%', #{prdCode}, '%')
		</if>
		<if test="prdSubCode != null and prdSubCode != ''">	<!-- 소분류 검색 -->			
			AND X.PRD_SUB_CODE LIKE CONCAT('%', #{prdSubCode}, '%')
		</if>				
		ORDER BY IF(X.ITEM_TYPE	= 'E', 1, 2)
	</select>	
	
	<select id="getUserReserveInfo" parameterType="com.wwl.app.domain.res.dto.ResUserDTO" resultType="camelHashMap">
		<![CDATA[
			/*
			 * SQL ID      : res.getUserReserveInfo
			 * Description : 예약내용 조회
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.06.02  이승현      최초 생성
			 * 2022.10.27  이승현      회원 관리 재기획
		     */
		]]>
		<![CDATA[			
			SELECT 
				   UR.USER_ID
				 , UI.NAME								-- 이름
				 , IF(UI.GENDER = 'male', '남', '여') AS GENDER	 -- 성별
				 , FN_GET_AGE(UI.BIRTHDATE) AS AGE		-- 나이
				 , UI.MOBILE							-- 휴대폰 번호
				 , DATE_FORMAT(UR.RES_DATE, '%Y년 %m월 %d일') AS RES_DATE	-- 예약날짜
				 , UR.RES_TIME							-- 예약시간
				 , UR.RES_TYPE 							-- 예약타입
				 , UR.RES_NOTE							-- 남기실메모
				 , FORMAT(UR.RES_SALE,0) AS RES_SALE	-- 할인금액
				 , UR.HOSPITAL_NOTE						-- 병원메모
				 , UR.ADVICE_YN							-- 상담희망여부
				 , UR.CONFIRM_YN						-- 예약최종확인	 	 
			     , FORMAT(IFNULL(
						   (SELECT SUM(PAY_AMOUNT * PAY_TYPE) 
							  FROM USER_PAYMENT
							 WHERE OFFICE_CODE   = UR.OFFICE_CODE
							   AND USER_ID		 = UR.USER_ID
							   AND PAY_SEQ	    <= (SELECT MAX(PAY_SEQ)
													FROM USER_PAYMENT A							 
													WHERE OFFICE_CODE   = UR.OFFICE_CODE
													  AND USER_ID		= UR.USER_ID)), 0), 0) AS REMAIN_AMOUNT	-- 남은금액
			  FROM USER_RESERVE UR
				   INNER JOIN USER_INFO UI
					  ON UR.OFFICE_CODE	  = UI.OFFICE_CODE
					 AND UR.USER_ID		  = UI.USER_ID	
			 WHERE UR.OFFICE_CODE   = #{officeCode}
			   AND UR.RES_NO  	    = #{resNo}
		]]>
	</select>
	
	<select id="getUserReserveItem" parameterType="com.wwl.app.domain.res.dto.ResUserDTO" resultType="camelHashMap">
		<![CDATA[
			/*
			 * SQL ID      : res.getUserReserveItem
			 * Description : 예약 상품 조회
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.10.27  이승현      최초 생성
		     */
		]]>
		<![CDATA[						
			SELECT 
				   X.RES_NO 
				 , X.RES_GROUP_CODE
				 , X.RES_GROUP_SEQ
				 , X.GROUP_SEQ
				 , X.GROUP_TITLE
			     , X.PRODUCT_TITLE
			     , X.ITEM_TYPE
			     , X.ITEM_PRICE     
			     , X.ITEM_TITLE
			     , X.UPDATE_SEQ
			     , X.PRD_ITEM_CODE
			     , X.PRD_ITEM_NAME
			     , X.PRD_ITEM_PRICE   
			     , X.ITEM_SEQ
			     , X.MAX_CNT
     			 , X.DEDUCT_CNT
     			 , X.SERVICE_YN
     			 , X.CRM_SEND_YN
                 , X.CRM_SEND_CNT
     			 , X.CREATE_DATE
			  FROM (
					SELECT 
						   PRD.RES_NO
						 , PRD.RES_GROUP_CODE	 
						 , PRD.RES_GROUP_SEQ
						 , 1				  AS GROUP_SEQ
						 , 'Y' 				  AS GROUP_TITLE
						 , PRD.ITEM_TITLE     AS PRODUCT_TITLE
						 , 'N' 			      AS ITEM_TYPE
						 , PRD.PRICE          AS ITEM_PRICE			 
						 , PRD.ITEM_TITLE     AS ITEM_TITLE
						 , PRD.UPDATE_SEQ
						 , GROUP_CONCAT(PRD.PRD_ITEM_CODE 	ORDER BY PRD.ITEM_SEQ SEPARATOR '\n') AS PRD_ITEM_CODE
						 , GROUP_CONCAT(PRD.PRD_ITEM_NAME 	ORDER BY PRD.ITEM_SEQ SEPARATOR '\n') AS PRD_ITEM_NAME
						 , GROUP_CONCAT(FORMAT(PRD.PRICE,0) ORDER BY PRD.ITEM_SEQ SEPARATOR '\n') AS PRD_ITEM_PRICE
						 , GROUP_CONCAT(PRD.ITEM_SEQ 		ORDER BY PRD.ITEM_SEQ SEPARATOR '\n') AS ITEM_SEQ
						 , 0 AS MAX_CNT
						 , 0 AS DEDUCT_CNT
						 , GROUP_CONCAT(PRD.SERVICE_YN ORDER BY PRD.ITEM_SEQ SEPARATOR '\n')   AS SERVICE_YN
						 , GROUP_CONCAT(PRD.CRM_SEND_YN ORDER BY PRD.ITEM_SEQ SEPARATOR '\n')  AS CRM_SEND_YN
                         , GROUP_CONCAT(PRD.CRM_SEND_CNT ORDER BY PRD.ITEM_SEQ SEPARATOR '\n') AS CRM_SEND_CNT
						 , PRD.CREATE_DATE
					  FROM (
							SELECT 
								   UR.RES_NO
								 , URI.RES_GROUP_CODE	 
								 , URI.RES_GROUP_SEQ
								 , PSI.PRD_ITEM_NAME  AS PRODUCT_TITLE
								 , PSI.PRICE 		  AS ITEM_PRICE			 
								 , PSI.PRD_ITEM_NAME  AS ITEM_TITLE
								 , PSI.UPDATE_SEQ                                 
								 , PSI.PRD_ITEM_CODE
								 , PSI.PRD_ITEM_NAME
								 , PSI.PRICE
								 , URD.ITEM_SEQ
								 , URD.SERVICE_YN
								 , URD.CRM_SEND_YN
								 , URD.CRM_SEND_CNT
								 , URI.CREATE_DATE
							  FROM USER_RESERVE UR
								   INNER JOIN USER_RESERVE_ITEM URI
									  ON UR.OFFICE_CODE     = URI.OFFICE_CODE
									 AND UR.RES_NO	        = URI.RES_NO
									 AND URI.ITEM_TYPE	    = 'N'							 
									 AND (CASE WHEN UR.SAVE_YN = 'Y' THEN URI.ITEM_STATUS = 'N'
											   ELSE URI.ITEM_STATUS IN ('R', 'N')
										   END)
								   INNER JOIN USER_RESERVE_ITEM_DETAIL URD
									  ON URI.OFFICE_CODE    = URD.OFFICE_CODE
									 AND URI.RES_NO		    = URD.RES_NO
									 AND URI.RES_GROUP_CODE = URD.RES_GROUP_CODE
									 AND URI.RES_GROUP_SEQ	= URD.RES_GROUP_SEQ
								   INNER JOIN PRODUCT_SURGICAL_ITEM PSI
									  ON URD.OFFICE_CODE   = PSI.OFFICE_CODE
									 AND URD.UPDATE_SEQ	   = PSI.UPDATE_SEQ
									 AND URD.PRD_ITEM_CODE = PSI.PRD_ITEM_CODE
							 WHERE UR.OFFICE_CODE   = #{officeCode}
							   AND UR.RES_NO		= #{resNo}
						) PRD
					 GROUP BY PRD.RES_NO, PRD.RES_GROUP_CODE, PRD.RES_GROUP_SEQ					 
					 UNION ALL
					SELECT
						   EVT.RES_NO 
						 , EVT.RES_GROUP_CODE
						 , EVT.RES_GROUP_SEQ
						 , EVT.GROUP_SEQ
						 , IF(EVT.RES_GROUP_CODE = LAG(EVT.RES_GROUP_CODE) OVER (ORDER BY EVT.RES_GROUP_CODE, EVT.RES_GROUP_SEQ, EVT.GROUP_SEQ), 'N', 'Y') AS GROUP_TITLE	     
						 , EVT.PRODUCT_TITLE
						 , EVT.EVENT_PRODUCT_TYPE AS ITEM_TYPE
						 , EVT.ITEM_PRICE				
						 , CASE WHEN EVT.EVENT_PRODUCT_TYPE = 'P' THEN CONCAT('<bold>', EVT.ITEM_WORD, '</bold> ', 
																				GROUP_CONCAT(IF(EVT.SERVICE_YN = 'N', EVT.PRD_ITEM_NAME, NULL) SEPARATOR ' + '))
								WHEN EVT.EVENT_PRODUCT_TYPE = 'C' THEN CONCAT('<bold>[', MAX(EVT.DEDUCT_CNT), ' Point 차감]</bold>')
								ELSE GROUP_CONCAT(IF(EVT.SERVICE_YN = 'N' , EVT.PRD_ITEM_NAME, NULL) SEPARATOR '+')
							END ITEM_TITLE
						 , EVT.EVENT_UPDATE_SEQ AS UPDATE_SEQ
			             , GROUP_CONCAT(EVT.PRD_ITEM_CODE ORDER BY EVT.ITEM_SEQ SEPARATOR '\n') AS PRD_ITEM_CODE
						 , CASE WHEN EVT.EVENT_PRODUCT_TYPE = 'P' THEN GROUP_CONCAT(EVT.PRD_ITEM_NAME ORDER BY EVT.ITEM_SEQ SEPARATOR '\n')
						 		WHEN EVT.EVENT_PRODUCT_TYPE = 'C' THEN GROUP_CONCAT(EVT.PRD_ITEM_NAME ORDER BY EVT.ITEM_SEQ SEPARATOR '\n')
								ELSE GROUP_CONCAT(EVT.PRD_ITEM_NAME ORDER BY EVT.ITEM_SEQ SEPARATOR '\n')
							END PRD_ITEM_NAME
						 , GROUP_CONCAT(FORMAT(EVT.PRICE, 0) ORDER BY EVT.ITEM_SEQ SEPARATOR '\n') AS PRD_ITEM_PRICE
						 , GROUP_CONCAT(EVT.ITEM_SEQ ORDER BY EVT.ITEM_SEQ SEPARATOR '\n') AS ITEM_SEQ
						 , MAX(EVT.MAX_CNT) AS MAX_CNT
             			 , MAX(EVT.DEDUCT_CNT) AS DEDUCT_CNT
             			 , GROUP_CONCAT(EVT.SERVICE_YN ORDER BY EVT.ITEM_SEQ SEPARATOR '\n')   AS SERVICE_YN
             			 , GROUP_CONCAT(EVT.CRM_SEND_YN ORDER BY EVT.ITEM_SEQ SEPARATOR '\n')  AS CRM_SEND_YN
                         , GROUP_CONCAT(EVT.CRM_SEND_CNT ORDER BY EVT.ITEM_SEQ SEPARATOR '\n') AS CRM_SEND_CNT
             			 , EVT.CREATE_DATE
					  FROM (
							SELECT 	   
								   UR.RES_NO 
								 , URI.RES_GROUP_CODE	
								 , URI.RES_GROUP_SEQ	 
								 , CONCAT('[EVENT] ', E1.EVENT_PRODUCT_TITLE) AS PRODUCT_TITLE
								 , E1.EVENT_UPDATE_SEQ
								 , E1.EVENT_PRODUCT_TYPE
								 , CASE WHEN URI.ITEM_TYPE = 'P' THEN CONCAT('[', URD.GROUP_SEQ, '회]')
										ELSE ''
									END ITEM_WORD
								 , E1.EVENT_SALE AS ITEM_PRICE	 
								 , URD.ITEM_SEQ
								 , URD.GROUP_SEQ
								 , URD.MAX_CNT
					 			 , URD.DEDUCT_CNT
					 			 , URD.SERVICE_YN
					 			 , URD.CRM_SEND_YN
								 , URD.CRM_SEND_CNT
								 , P1.PRD_ITEM_CODE
								 , P1.PRD_ITEM_NAME
								 , P1.PRICE       
								 , URI.CREATE_DATE    
							  FROM USER_RESERVE UR
								   INNER JOIN USER_RESERVE_ITEM URI
									  ON UR.OFFICE_CODE     = URI.OFFICE_CODE
									 AND UR.RES_NO		    = URI.RES_NO
									 AND URI.ITEM_TYPE	   <> 'N'
									 AND (CASE WHEN UR.SAVE_YN = 'Y' THEN URI.ITEM_STATUS = 'N'
											   ELSE URI.ITEM_STATUS IN ('R', 'N')
										   END)
								   INNER JOIN USER_RESERVE_ITEM_DETAIL URD
									  ON URI.OFFICE_CODE    	 = URD.OFFICE_CODE
									 AND URI.RES_NO		    	 = URD.RES_NO
									 AND URI.RES_GROUP_CODE 	 = URD.RES_GROUP_CODE
									 AND URI.RES_GROUP_SEQ  	 = URD.RES_GROUP_SEQ
								   INNER JOIN ALL_EVENT_PRODUCT_INFO API
									  ON URI.OFFICE_CODE   	     = API.OFFICE_CODE
									 AND URI.RES_GROUP_CODE 	 = API.ITEM_CODE
								   INNER JOIN EVENT_PRODUCT_SURGICAL E1
									   ON API.OFFICE_CODE        = E1.OFFICE_CODE
									  AND API.EVENT_UPDATE_SEQ   = E1.EVENT_UPDATE_SEQ
									  AND API.EVENT_SEQ		     = E1.EVENT_SEQ
									  AND API.EVENT_SUB_SEQ      = E1.EVENT_SUB_SEQ
									  AND API.EVENT_PRODUCT_CODE = E1.EVENT_PRODUCT_CODE   		
									INNER JOIN PRODUCT_SURGICAL_ITEM P1
									   ON URD.OFFICE_CODE		 = P1.OFFICE_CODE
									  AND URD.UPDATE_SEQ 		 = P1.UPDATE_SEQ
									  AND URD.PRD_ITEM_CODE 	 = P1.PRD_ITEM_CODE
							 WHERE UR.OFFICE_CODE   = #{officeCode}
							   AND UR.RES_NO		= #{resNo}
							) EVT
						GROUP BY EVT.RES_GROUP_CODE, EVT.RES_GROUP_SEQ, EVT.GROUP_SEQ
					) X
			 ORDER BY 
			 	X.CREATE_DATE DESC, X.RES_GROUP_CODE, X.RES_GROUP_SEQ, X.GROUP_SEQ
		]]>
	</select>
	
	<select id="getTmpReserveItem" parameterType="com.wwl.app.domain.res.dto.ResUserDTO" resultType="camelHashMap">
		<![CDATA[
			/*
			 * SQL ID      : res.getTmpReserveItem
			 * Description : 임시 예약 상품 조회
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.11.12  이승현      최초 생성			 
		     */
		]]>
		<![CDATA[	
			SELECT 
				   X.RES_NO 
				 , X.RES_GROUP_CODE
				 , X.RES_GROUP_SEQ
				 , X.GROUP_SEQ
				 , X.GROUP_TITLE
				 , X.PRODUCT_TITLE
				 , X.ITEM_TYPE
				 , X.ITEM_PRICE     
				 , X.ITEM_TITLE
				 , X.UPDATE_SEQ
				 , X.PRD_ITEM_CODE
				 , X.PRD_ITEM_NAME
				 , X.PRD_ITEM_PRICE   
				 , X.ITEM_SEQ
				 , X.MAX_CNT
				 , X.DEDUCT_CNT
				 , X.SERVICE_YN
				 , X.CRM_SEND_YN
				 , X.CRM_SEND_CNT			
				 , X.CREATE_DATE	 
			  FROM (
					SELECT 
						   PRD.RES_NO
						 , PRD.RES_GROUP_CODE	 
						 , PRD.RES_GROUP_SEQ
						 , 1				  AS GROUP_SEQ
						 , 'Y' 				  AS GROUP_TITLE
						 , PRD.ITEM_TITLE     AS PRODUCT_TITLE
						 , 'N' 			      AS ITEM_TYPE
						 , PRD.PRICE          AS ITEM_PRICE			 
						 , PRD.ITEM_TITLE     AS ITEM_TITLE
						 , PRD.UPDATE_SEQ
						 , GROUP_CONCAT(PRD.PRD_ITEM_CODE 	ORDER BY PRD.ITEM_SEQ SEPARATOR '\n') AS PRD_ITEM_CODE
						 , GROUP_CONCAT(PRD.PRD_ITEM_NAME 	ORDER BY PRD.ITEM_SEQ SEPARATOR '\n') AS PRD_ITEM_NAME
						 , GROUP_CONCAT(FORMAT(PRD.PRICE,0) ORDER BY PRD.ITEM_SEQ SEPARATOR '\n') AS PRD_ITEM_PRICE
						 , GROUP_CONCAT(PRD.ITEM_SEQ 		ORDER BY PRD.ITEM_SEQ SEPARATOR '\n') AS ITEM_SEQ
						 , 0 AS MAX_CNT
						 , 0 AS DEDUCT_CNT
						 , GROUP_CONCAT(PRD.SERVICE_YN ORDER BY PRD.ITEM_SEQ SEPARATOR '\n') AS SERVICE_YN
						 , GROUP_CONCAT(PRD.CRM_SEND_YN ORDER BY PRD.ITEM_SEQ SEPARATOR '\n') AS CRM_SEND_YN
						 , GROUP_CONCAT(PRD.CRM_SEND_CNT ORDER BY PRD.ITEM_SEQ SEPARATOR '\n') AS CRM_SEND_CNT
						 , PRD.CREATE_DATE
					  FROM (
							SELECT 
								   URI.RES_NO
								 , URI.RES_GROUP_CODE	 
								 , URI.RES_GROUP_SEQ
								 , PSI.PRD_ITEM_NAME  AS PRODUCT_TITLE
								 , PSI.PRICE 		  AS ITEM_PRICE			 
								 , PSI.PRD_ITEM_NAME  AS ITEM_TITLE
								 , PSI.UPDATE_SEQ                                 
								 , PSI.PRD_ITEM_CODE
								 , PSI.PRD_ITEM_NAME
								 , PSI.PRICE
								 , URD.ITEM_SEQ
								 , URD.SERVICE_YN
								 , URD.CRM_SEND_YN
								 , URD.CRM_SEND_CNT
								 , URI.CREATE_DATE
							  FROM USER_RESERVE_ITEM_TMP URI
								   INNER JOIN USER_RESERVE_ITEM_DETAIL_TMP URD
									  ON URI.OFFICE_CODE    = URD.OFFICE_CODE
									 AND URI.RES_NO		    = URD.RES_NO
									 AND URI.RES_GROUP_CODE = URD.RES_GROUP_CODE
									 AND URI.RES_GROUP_SEQ	= URD.RES_GROUP_SEQ
									 AND URI.ITEM_TYPE		= 'N'
								   INNER JOIN PRODUCT_SURGICAL_ITEM PSI
									  ON URD.OFFICE_CODE   = PSI.OFFICE_CODE
									 AND URD.UPDATE_SEQ	   = PSI.UPDATE_SEQ
									 AND URD.PRD_ITEM_CODE = PSI.PRD_ITEM_CODE
							 WHERE URI.OFFICE_CODE   = #{officeCode}
							   AND URI.RES_NO		 = #{resNo}
						) PRD
					 GROUP BY 
					 	PRD.RES_NO, PRD.RES_GROUP_CODE, PRD.RES_GROUP_SEQ		
					 UNION ALL
					 SELECT
						    EVT.RES_NO 
						  , EVT.RES_GROUP_CODE
						  , EVT.RES_GROUP_SEQ
						  , EVT.GROUP_SEQ
						  , IF(EVT.RES_GROUP_CODE = LAG(EVT.RES_GROUP_CODE) OVER (ORDER BY EVT.RES_GROUP_CODE, EVT.RES_GROUP_SEQ, EVT.GROUP_SEQ), 'N', 'Y') AS GROUP_TITLE	     
						  , EVT.PRODUCT_TITLE
						  , EVT.EVENT_PRODUCT_TYPE AS ITEM_TYPE
						  , EVT.ITEM_PRICE				
						  , CASE WHEN EVT.EVENT_PRODUCT_TYPE = 'P' THEN CONCAT('<bold>', EVT.ITEM_WORD, '</bold> ', 
																				GROUP_CONCAT(IF(EVT.SERVICE_YN = 'N', EVT.PRD_ITEM_NAME, NULL) SEPARATOR ' + '))
								 WHEN EVT.EVENT_PRODUCT_TYPE = 'C' THEN CONCAT('<bold>[', EVT.DEDUCT_CNT, ' Point 차감]</bold>')
								 ELSE GROUP_CONCAT(EVT.PRD_ITEM_NAME ORDER BY EVT.ITEM_SEQ SEPARATOR ' + ')
							 END ITEM_TITLE
						  , EVT.EVENT_UPDATE_SEQ AS UPDATE_SEQ
						  , GROUP_CONCAT(EVT.PRD_ITEM_CODE ORDER BY EVT.ITEM_SEQ SEPARATOR '\n') AS PRD_ITEM_CODE
						  , CASE WHEN EVT.EVENT_PRODUCT_TYPE = 'P' THEN GROUP_CONCAT(EVT.PRD_ITEM_NAME ORDER BY EVT.ITEM_SEQ SEPARATOR '\n')
								 WHEN EVT.EVENT_PRODUCT_TYPE = 'C' THEN GROUP_CONCAT(EVT.PRD_ITEM_NAME ORDER BY EVT.ITEM_SEQ SEPARATOR '\n')
								 ELSE GROUP_CONCAT(EVT.PRD_ITEM_NAME ORDER BY EVT.ITEM_SEQ SEPARATOR '\n')								 
							 END PRD_ITEM_NAME
						  , GROUP_CONCAT(FORMAT(EVT.PRICE, 0) ORDER BY EVT.ITEM_SEQ SEPARATOR '\n') AS PRD_ITEM_PRICE
						  , GROUP_CONCAT(EVT.ITEM_SEQ ORDER BY EVT.ITEM_SEQ SEPARATOR '\n') AS ITEM_SEQ
						  , EVT.MAX_CNT
						  , EVT.DEDUCT_CNT
						  , GROUP_CONCAT(EVT.SERVICE_YN ORDER BY EVT.ITEM_SEQ SEPARATOR '\n') AS SERVICE_YN
						  , GROUP_CONCAT(EVT.CRM_SEND_YN ORDER BY EVT.ITEM_SEQ SEPARATOR '\n') AS CRM_SEND_YN
						  , GROUP_CONCAT(EVT.CRM_SEND_CNT ORDER BY EVT.ITEM_SEQ SEPARATOR '\n') AS CRM_SEND_CNT
						  , EVT.CREATE_DATE
					   FROM (
							 SELECT 	   
								   URI.RES_NO 
								 , URI.RES_GROUP_CODE	
								 , URI.RES_GROUP_SEQ	 
								 , CONCAT('[EVENT] ', E1.EVENT_PRODUCT_TITLE) AS PRODUCT_TITLE
								 , E1.EVENT_UPDATE_SEQ
								 , E1.EVENT_PRODUCT_TYPE
								 , CASE WHEN URI.ITEM_TYPE = 'P' THEN CONCAT('[', URD.GROUP_SEQ, '회]')
										ELSE ''
									END ITEM_WORD
								 , E1.EVENT_SALE AS ITEM_PRICE	 
								 , URD.ITEM_SEQ
								 , URD.GROUP_SEQ
								 , URD.MAX_CNT
								 , URD.DEDUCT_CNT
								 , URD.SERVICE_YN
								 , URD.CRM_SEND_YN
								 , URD.CRM_SEND_CNT
								 , P1.PRD_ITEM_CODE
								 , P1.PRD_ITEM_NAME
								 , P1.PRICE           
								 , URI.CREATE_DATE
							  FROM USER_RESERVE_ITEM_TMP URI				
								   INNER JOIN USER_RESERVE_ITEM_DETAIL_TMP URD
									  ON URI.OFFICE_CODE    	 = URD.OFFICE_CODE
									 AND URI.RES_NO		    	 = URD.RES_NO
									 AND URI.RES_GROUP_CODE 	 = URD.RES_GROUP_CODE
									 AND URI.RES_GROUP_SEQ  	 = URD.RES_GROUP_SEQ
	                                 AND URI.ITEM_TYPE	 		  <> 'N'
								   INNER JOIN ALL_EVENT_PRODUCT_INFO API
									  ON URI.OFFICE_CODE   	     = API.OFFICE_CODE
									 AND URI.RES_GROUP_CODE 	 = API.ITEM_CODE
								   INNER JOIN EVENT_PRODUCT_SURGICAL E1
									   ON API.OFFICE_CODE        = E1.OFFICE_CODE
									  AND API.EVENT_UPDATE_SEQ   = E1.EVENT_UPDATE_SEQ
									  AND API.EVENT_SEQ		     = E1.EVENT_SEQ
									  AND API.EVENT_SUB_SEQ      = E1.EVENT_SUB_SEQ
									  AND API.EVENT_PRODUCT_CODE = E1.EVENT_PRODUCT_CODE   		
									INNER JOIN PRODUCT_SURGICAL_ITEM P1
									   ON URD.OFFICE_CODE		 = P1.OFFICE_CODE
									  AND URD.UPDATE_SEQ 		 = P1.UPDATE_SEQ
									  AND URD.PRD_ITEM_CODE 	 = P1.PRD_ITEM_CODE
							 WHERE URI.OFFICE_CODE   = #{officeCode}
							   AND URI.RES_NO		 = #{resNo}
							) EVT
						GROUP BY 
							EVT.RES_GROUP_CODE, EVT.RES_GROUP_SEQ, EVT.GROUP_SEQ			 
					) X
				ORDER BY 
					X.CREATE_DATE DESC, X.RES_GROUP_CODE, X.RES_GROUP_SEQ, X.GROUP_SEQ
		]]>
	</select>
	
	<select id="getResGroupSeq" parameterType="com.wwl.app.domain.res.dto.ResUserDTO" resultType="int">
		<![CDATA[
			/*
			 * SQL ID      : res.getResGroupSeq
			 * Description : 예약상품그룹 SEQ 가져오기
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.11.04  이승현      최초 생성
			 * 2022.11.12  이승현      신규 접수시 임시 테이블 사용
		     */
		]]>
		<choose>
			<when test='isNew == "Y"'>	<!-- 신규 접수 -->
				<![CDATA[
					SELECT IFNULL(MAX(RES_GROUP_SEQ), 0) + 1
			          FROM USER_RESERVE_ITEM_TMP 
			 		 WHERE OFFICE_CODE    = #{officeCode}
			           AND RES_NO         = #{resNo}
			           AND RES_GROUP_CODE = #{resGroupCode}
				]]>
			</when>
			<otherwise>
				<![CDATA[
					SELECT IFNULL(MAX(RES_GROUP_SEQ), 0) + 1
				      FROM USER_RESERVE_ITEM
				 	 WHERE OFFICE_CODE    = #{officeCode}
				       AND RES_NO         = #{resNo}
				       AND RES_GROUP_CODE = #{resGroupCode}
				]]>
			</otherwise>
		</choose>		
	</select>
	
	<insert id="insertUserReserveItem" parameterType="com.wwl.app.domain.res.dto.ResUserDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.insertUserReserveItem
			 * Description : 고객 예약상품 저장
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.11.01  이승현      최초 생성
			 * 2022.11.12  이승현      신규 접수시 임시 테이블 사용
		     */
		]]>
		<choose>
			<when test='isNew == "Y"'>	<!-- 신규 접수 -->
				INSERT INTO USER_RESERVE_ITEM_TMP
			</when>
			<otherwise>
				INSERT INTO USER_RESERVE_ITEM
			</otherwise>
		</choose>
		<![CDATA[
			SELECT 
				   Y.OFFICE_CODE
				 , #{resNo} AS RES_NO  				-- 예약번호
				 , Y.RES_GROUP_CODE	   				-- 예약상품그룹코드
				 , #{resGroupSeq} AS RES_GROUP_SEQ	-- 예약상품그룹SEQ
				 , Y.ITEM_TYPE		   				-- N:일반시술,E:이벤트,P:패키지,C:횟수차감
				 , 'N'   AS ITEM_STATUS			    -- R:최초예약,N:신규
				 , NOW() AS CREATE_DATE				-- 상품등록일 
			  FROM ( -- 일반시술
				    SELECT 
					       OFFICE_CODE
					     , 'N' AS ITEM_TYPE
					 	 , ITEM_CODE AS RES_GROUP_CODE
				  	  FROM ALL_PRODUCT_INFO
				 	 WHERE OFFICE_CODE   = #{officeCode}
				   	   AND ITEM_CODE     = #{resGroupCode}
					UNION ALL
					-- 이벤트시술
					SELECT 
						   X.OFFICE_CODE   
						 , X.EVENT_PRODUCT_TYPE	AS ITEM_TYPE				 
						 , X.ITEM_CODE 			AS RES_GROUP_CODE
					  FROM (
							SELECT
								   E1.OFFICE_CODE 									 								 
                                 , E1.ITEM_CODE
                                 , E2.EVENT_PRODUCT_TYPE								 
							 FROM ALL_EVENT_PRODUCT_INFO E1
								  INNER JOIN EVENT_PRODUCT_SURGICAL E2
									 ON E1.OFFICE_CODE	      = E2.OFFICE_CODE
									AND E1.EVENT_UPDATE_SEQ   = E2.EVENT_UPDATE_SEQ
									AND E1.EVENT_SEQ	 	  = E2.EVENT_SEQ
									AND E1.EVENT_SUB_SEQ 	  = E2.EVENT_SUB_SEQ
									AND E1.EVENT_PRODUCT_CODE = E2.EVENT_PRODUCT_CODE
							WHERE E1.OFFICE_CODE   = #{officeCode}
							  AND E1.ITEM_CODE     = #{resGroupCode}
						) X
					) Y 
				GROUP BY Y.RES_GROUP_CODE	 
				ORDER BY Y.RES_GROUP_CODE
		]]>		
	</insert>
	
	<insert id="insertUserReserveItemDetail" parameterType="com.wwl.app.domain.res.dto.ResUserDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.insertUserReserveItemDetail
			 * Description : 고객 예약상품 상세내용 저장
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.11.01  이승현      최초 생성
			 * 2022.11.12  이승현      신규 접수시 임시 테이블 사용
		     */
		]]>
		<choose>
			<when test='isNew == "Y"'>	<!-- 신규 접수 -->
				<![CDATA[
					SET @ROWNUM := (SELECT IFNULL(MAX(ITEM_SEQ), 0)
									  FROM USER_RESERVE_ITEM_DETAIL_TMP
									 WHERE OFFICE_CODE   = #{officeCode}
									   AND RES_NO		 = #{resNo});
		                                      
					INSERT INTO USER_RESERVE_ITEM_DETAIL_TMP
				]]>
			</when>			
			<otherwise>
				<![CDATA[
					SET @ROWNUM := (SELECT IFNULL(MAX(ITEM_SEQ), 0)
									  FROM USER_RESERVE_ITEM_DETAIL
									 WHERE OFFICE_CODE   = #{officeCode}
									   AND RES_NO		 = #{resNo});
		                                      
					INSERT INTO USER_RESERVE_ITEM_DETAIL
				]]>
			</otherwise>
		</choose>
		<![CDATA[		
			SELECT 
				   Y.OFFICE_CODE
				 , #{resNo}	 AS RES_NO				  -- 예약번호
				 , Y.RES_GROUP_CODE					  -- 예약상품그룹코드
				 , #{resGroupSeq} AS RES_GROUP_SEQ	  -- 예약상품그룹SEQ		
				 , @ROWNUM := @ROWNUM + 1 AS ITEM_SEQ -- 아이템SEQ	     			     			     
			     , Y.GROUP_SEQ 						  -- 그룹SEQ
			     , Y.UPDATE_SEQ						  -- 업데이트코드
			     , Y.PRD_ITEM_CODE					  -- 일반시술코드
			     , Y.EVENT_CNT						  -- 횟수차감시제한
			     , Y.DEDUCT_CNT						  -- 차감횟수			 
				 , 'N' AS SERVICE_YN		  		  -- N:일반,Y:서비스상품				 
				 , 'N' AS CRM_SEND_YN				  -- CRM전송여부	
				 , 0   AS CRM_SEND_CNT				  -- CRM전송여부(차감사용개수)		 		
			  FROM ( -- 일반시술
					SELECT 
						   A.OFFICE_CODE
						 , 'N' AS ITEM_TYPE						 
						 , 1   AS GROUP_SEQ
						 , A.UPDATE_SEQ
						 , A.PRD_ITEM_CODE
						 , 0   AS EVENT_CNT
						 , 0   AS DEDUCT_CNT
						 , A.ITEM_CODE AS RES_GROUP_CODE
						 , 1   AS SORT_ORDER
					  FROM ALL_PRODUCT_INFO A
					  	   INNER JOIN PRODUCT_SURGICAL_ITEM P
					  	      ON A.OFFICE_CODE   = P.OFFICE_CODE
					  	     AND A.UPDATE_SEQ	 = P.UPDATE_SEQ
					  	     AND A.PRD_ITEM_CODE = P.PRD_ITEM_CODE
					 WHERE A.OFFICE_CODE   = #{officeCode}
					   AND A.ITEM_CODE     = #{resGroupCode}
					UNION ALL
			        -- 이벤트시술
					SELECT 
						   X.OFFICE_CODE   
						 , X.EVENT_PRODUCT_TYPE	 AS ITEM_TYPE
						 , X.EVENT_DETAIL_SEQ 	 AS GROUP_SEQ  
						 , X.EVENT_UPDATE_SEQ 	 AS UPDATE_SEQ	
						 , X.PRD_ITEM_CODE
						 , X.EVENT_CNT 		  	 AS EVENT_CNT
						 , IF(X.REMARK='', 0, IFNULL(X.REMARK,0)) AS DEDUCT_CNT	
						 , CONCAT('E'
					 		, X.EVENT_UPDATE_SEQ
							, X.EVENT_SEQ
							, X.EVENT_SUB_SEQ
							, X.EVENT_PRODUCT_CODE) AS RES_GROUP_CODE
					      , X.SORT_ORDER
					  FROM (
							SELECT
								   E1.OFFICE_CODE 	
						         , E1.ITEM_CODE
								 , E2.EVENT_PRODUCT_TYPE
								 , E2.EVENT_UPDATE_SEQ
								 , E3.EVENT_SEQ
								 , E3.EVENT_SUB_SEQ
								 , E3.EVENT_PRODUCT_CODE
								 , E3.EVENT_DETAIL_SEQ								 
								 , E3.PRD_ITEM_CODE		
								 , E2.EVENT_CNT			
								 , E3.REMARK
								 , E3.SORT_ORDER
							 FROM ALL_EVENT_PRODUCT_INFO E1
								  INNER JOIN EVENT_PRODUCT_SURGICAL E2
									 ON E1.OFFICE_CODE        = E2.OFFICE_CODE
									AND E1.EVENT_UPDATE_SEQ   = E2.EVENT_UPDATE_SEQ
									AND E1.EVENT_SEQ		  = E2.EVENT_SEQ
									AND E1.EVENT_SUB_SEQ      = E2.EVENT_SUB_SEQ
									AND E1.EVENT_PRODUCT_CODE = E2.EVENT_PRODUCT_CODE			
								  INNER JOIN EVENT_PRODUCT_SURGICAL_ITEM E3
									 ON E2.OFFICE_CODE	      = E3.OFFICE_CODE
									AND E2.EVENT_UPDATE_SEQ   = E3.EVENT_UPDATE_SEQ
									AND E2.EVENT_SEQ	 	  = E3.EVENT_SEQ
									AND E2.EVENT_SUB_SEQ 	  = E3.EVENT_SUB_SEQ
									AND E2.EVENT_PRODUCT_CODE = E3.EVENT_PRODUCT_CODE
							WHERE E1.OFFICE_CODE   = #{officeCode} 
							  AND E1.ITEM_CODE 	   = #{resGroupCode} 
						) X
					) Y
			 ORDER BY Y.RES_GROUP_CODE, Y.GROUP_SEQ, Y.SORT_ORDER
		]]>
	</insert>
	
	<delete id="deleteUserReserveItem" parameterType="com.wwl.app.domain.res.dto.ResUserDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.deleteUserReserveItem
			 * Description : 예약 상품 제거
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.11.01  이승현      최초 생성
			 * 2022.11.12  이승현      신규 접수시 임시 테이블 사용
		     */
		]]>
		<choose>
			<when test='isNew == "Y"'>	<!-- 신규 접수 -->
				<![CDATA[
					DELETE U1, U2 
					  FROM USER_RESERVE_ITEM_TMP U1
					  	   INNER JOIN USER_RESERVE_ITEM_DETAIL_TMP U2
					  	      ON U1.OFFICE_CODE    = U2.OFFICE_CODE
					  	     AND U1.RES_NO		   = U2.RES_NO
					  	     AND U1.RES_GROUP_CODE = U2.RES_GROUP_CODE
					 WHERE U1.OFFICE_CODE    = #{officeCode}
					   AND U1.RES_NO		 = #{resNo}
					   AND U1.RES_GROUP_CODE = #{resGroupCode} 			   
				]]>
			</when>
			<otherwise>
				<![CDATA[
					DELETE U1, U2 
					  FROM USER_RESERVE_ITEM U1
					  	   INNER JOIN USER_RESERVE_ITEM_DETAIL U2
					  	      ON U1.OFFICE_CODE    = U2.OFFICE_CODE
					  	     AND U1.RES_NO		   = U2.RES_NO
					  	     AND U1.RES_GROUP_CODE = U2.RES_GROUP_CODE
					  	     AND U1.RES_GROUP_SEQ  = U2.RES_GROUP_SEQ
					  	   INNER JOIN (SELECT MAX(U3.RES_GROUP_SEQ) AS RES_GROUP_SEQ
			   							 FROM USER_RESERVE_ITEM U3
			   							WHERE OFFICE_CODE    = #{officeCode}
			   							  AND RES_NO		 = #{resNo}
			   							  AND RES_GROUP_CODE = #{resGroupCode}) U4
					 	      ON U1.RES_GROUP_SEQ = U4.RES_GROUP_SEQ
					 WHERE U1.OFFICE_CODE    = #{officeCode}
					   AND U1.RES_NO		 = #{resNo}
					   AND U1.RES_GROUP_CODE = #{resGroupCode} 			   
				]]>
			</otherwise>
		</choose>		
	</delete>
	
	<select id="getEnableReserveCount" parameterType="com.wwl.app.domain.res.dto.ResUserDTO" resultType="camelHashMap">
		<![CDATA[
			/*
			 * SQL ID      : res.getEnableReserveCount
			 * Description : 예약 가능 인원 가져오기
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.07.19  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			SELECT 
				   MAX(H1.MAX_CNT) AS MAX_CNT
				 , IFNULL(H2.TOTAL_RES_CNT, 0) AS TOTAL_RES_CNT
			  FROM HOSPITAL_RESERVE H1
				   LEFT OUTER JOIN (
								   SELECT COUNT(RES_NO) AS TOTAL_RES_CNT
									  FROM USER_RESERVE
									 WHERE OFFICE_CODE   = #{officeCode}
									   AND RES_DATE      = #{resDate} 
									   AND RES_TIME      = #{resTime}
									   AND VISIT_STATUS  = 'Y'
									   AND USE_STATUS 	 = 'Y'
									 GROUP BY RES_TIME
			       ) H2 ON 1=1
			 WHERE H1.OFFICE_CODE   = #{officeCode}
			   AND (H1.RES_DATE, H1.DATA_DAY) IN (SELECT IFNULL(MAX(RES_DATE), '00000000') 
									 				   , IF(IFNULL(MAX(RES_DATE), '00000000') = '00000000', DAYOFWEEK(#{resDate})-1, '0')
												    FROM HOSPITAL_RESERVE_MASTER A
												   WHERE OFFICE_CODE   = #{officeCode}
													 AND RES_DATE      = #{resDate})
			   AND SUBSTR(H1.HHMM,1,4) = #{resTime}
		]]>
	</select>	
	
	<update id="updateReserveItemCrmReset" parameterType="com.wwl.app.domain.res.dto.ResCrmDTO">	
		<![CDATA[
			/*
			 * SQL ID      : res.updateReserveItemCrmReset
			 * Description : 예약 상품 CRM 전송 상태 초기화
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.12.28  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			UPDATE USER_RESERVE_ITEM_DETAIL      
			   SET CRM_SEND_YN  = 'N'
			     , CRM_SEND_CNT = 0
			 WHERE OFFICE_CODE  = #{officeCode}
			   AND RES_NO		= #{resNo}
		]]>	
	</update>
	
	<update id="updateReserveItemCrmYn" parameterType="com.wwl.app.domain.res.dto.ResCrmDTO">	
		<![CDATA[
			/*
			 * SQL ID      : res.updateReserveItemCrmYn
			 * Description : 예약 상품 CRM 전송 데이터 체크
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.11.21  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			UPDATE USER_RESERVE_ITEM_DETAIL U1
				   LEFT OUTER JOIN (
									SELECT ITEM_SEQ
										 , COUNT(ITEM_SEQ) AS ITEM_CNT
									  FROM (
		]]>
		<foreach collection="reserveList" item="item" index="index" separator="UNION ALL">
 			SELECT #{item} AS ITEM_SEQ
		</foreach>
		<![CDATA[	
										   ) A
									GROUP BY ITEM_SEQ
			      ) U2
			      ON U1.ITEM_SEQ   = U2.ITEM_SEQ       
			  SET U1.CRM_SEND_YN   = IF(U1.ITEM_SEQ = U2.ITEM_SEQ, 'Y', 'N')
			    , U1.CRM_SEND_CNT  = IF(U1.ITEM_SEQ = U2.ITEM_SEQ, U2.ITEM_CNT, 0)
			WHERE U1.OFFICE_CODE   = #{officeCode}
			  AND U1.RES_NO		   = #{resNo}
		]]>	
	</update>
	
	<update id="updateProductItemCrmReset" parameterType="com.wwl.app.domain.res.dto.ResCrmDTO">	
		<![CDATA[
			/*
			 * SQL ID      : res.updateProductItemCrmYn
			 * Description : 남은 시술권 CRM 전송 상태 초기화
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.12.28  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			UPDATE USER_PRODUCT_ITEM    
			   SET CRM_SEND_YN  = 'N'
			     , CRM_SEND_CNT = 0
			 WHERE OFFICE_CODE  = #{officeCode}
			   AND USER_ID	    = #{userId}
		]]>
	</update>
	
	<update id="updateProductItemCrmYn" parameterType="com.wwl.app.domain.res.dto.ResCrmDTO">	
		<![CDATA[
			/*
			 * SQL ID      : res.updateProductItemCrmYn
			 * Description : 남은 시술권 CRM 전송 데이터 체크
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.11.21  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			UPDATE USER_PRODUCT_ITEM U1
			       LEFT OUTER JOIN (
									SELECT ITEM_SEQ
										 , COUNT(ITEM_SEQ) AS ITEM_CNT
									  FROM (
		]]>
		<foreach collection="productList" item="item" index="index" separator="UNION ALL">
 			SELECT #{item} AS ITEM_SEQ
		</foreach>
		<![CDATA[	
										   ) A
									GROUP BY ITEM_SEQ
			      ) U2
			       ON U1.ITEM_SEQ  = U2.ITEM_SEQ       
			  SET U1.CRM_SEND_YN   = IF(U1.ITEM_SEQ = U2.ITEM_SEQ, 'Y', 'N')
			    , U1.CRM_SEND_CNT  = IF(U1.ITEM_SEQ = U2.ITEM_SEQ, U2.ITEM_CNT, 0)
			WHERE U1.OFFICE_CODE   = #{officeCode}
			  AND U1.USER_ID	   = #{userId}
		]]>
	</update>
	
	<insert id="insertCrmData" parameterType="com.wwl.app.domain.res.dto.ResCrmDTO">	
		<![CDATA[
			/*
			 * SQL ID      : res.insertCrmData
			 * Description : CRM 전송 데이터 저장
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.11.02  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			INSERT INTO CRM_DATA_HISTORY (
				  OFFICE_CODE
				, RES_NO
				, HIS_NO
				, HIS_CONTENT
				, CREATE_DATE
			) VALUES (
				  #{officeCode}
				, #{resNo}
				, (SELECT IFNULL(MAX(HIS_NO), 0) + 1
					 FROM CRM_DATA_HISTORY A
					WHERE OFFICE_CODE   = #{officeCode}
					  AND RES_NO		= #{resNo})
				, #{hisContent}
				, NOW()
			)		
		]]>	
	</insert>	
	
	<insert id="insertUserReserveInfo" parameterType="com.wwl.app.domain.res.dto.ResCrmDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.insertUserReserveInfo
			 * Description : 회원 예약 정보 저장
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.07.18  이승현      최초 생성
			 * 2022.09.07  이승현      병원직원 예약 접수시 바로 최종 확인이 되도록 수정
		     */
		]]> 
		<![CDATA[
			INSERT INTO USER_RESERVE (
				  OFFICE_CODE	
				, RES_NO	
				, USER_ID					
				, RES_DATE	
				, RES_TIME
				, RES_TYPE				
				, HOSPITAL_NOTE
				, RES_NOTE	
				, RES_STATUS
				, ADVICE_YN	
				, VISIT_STATUS
				, USE_STATUS
				, ALARM_YN
				, RES_SALE	
				, UPDATE_USER
			   	, UPDATE_DATE
			   	, SAVE_YN																		
				, CREATE_DATE											
			) VALUES (
			  	  #{officeCode}	
				, #{resNo}
				, #{userId}					
				, #{resDate}	
				, #{resTime}
				, #{resType}	
				, #{hospitalNote}
				, #{resNote}
				, 0
				, #{adviceYn}	
				, 'Y'	
				, 'Y'		
				, 'N'
				, #{resSale}
				, #{createUser}
				, NOW()
			   	, 'N'			
				, NOW()
			)
		]]>			
	</insert>
	
	<update id="updateUserReserveStatus" parameterType="com.wwl.app.domain.res.dto.ResCrmDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.updateUserReserveStatus
			 * Description : CRM 저장 상태 변경 => 확인시간 초기화
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.11.22  이승현      최초 생성
		     */
		]]>
		<![CDATA[		
			UPDATE USER_RESERVE U1
			       INNER JOIN USER_RESERVE U2
			          ON U1.OFFICE_CODE = U2.OFFICE_CODE
			         AND U1.RES_NO		= U2.RES_NO
			   SET U1.RES_DATE		= #{resDate}
			   	 , U1.RES_TIME      = #{resTime}
			   	 , U1.RES_STATUS    = IF(U2.RES_STATUS = 2, 2, 3) 
			   	 , U1.UPDATE_USER   = #{createUser}
			   	 , U1.UPDATE_DATE   = NOW()
			   	 , U1.CONFIRM_USER  = ''
			   	 , U1.CONFIRM_DATE  = NULL
			 WHERE U1.OFFICE_CODE   = #{officeCode}
			   AND U1.RES_NO		 = #{resNo}
		]]>		   
	</update>
	
	<insert id="insertReserveItemTmpToReal" parameterType="com.wwl.app.domain.res.dto.ResCrmDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.insertReserveItemTmpToReal
			 * Description : (신규 접수)임시 예약 상품 테이블 -> 실제 예약 상품
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.11.12  이승현      최초 생성
		     */
		]]>
		<![CDATA[		
			INSERT INTO USER_RESERVE_ITEM
			SELECT 
				   OFFICE_CODE	
				 , RES_NO	
				 , RES_GROUP_CODE	
				 , 1 AS RES_GROUP_SEQ	
				 , ITEM_TYPE	
				 , 'R'   AS ITEM_STATUS	
				 , NOW() AS CREATE_DATE
			  FROM USER_RESERVE_ITEM_TMP
			 WHERE OFFICE_CODE   = #{officeCode}
			   AND RES_NO		 = #{resNo}
		]]>		
	</insert>
	
	<insert id="insertReserveItemDetailTmpToReal" parameterType="com.wwl.app.domain.res.dto.ResCrmDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.insertReserveItemDetailTmpToReal
			 * Description : (신규 접수)임시 예약 상품상세 테이블 -> 실제 예약 상품상세
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.11.12  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			INSERT INTO USER_RESERVE_ITEM_DETAIL
			SELECT 
				  OFFICE_CODE	
				, RES_NO	
				, RES_GROUP_CODE	
				, 1 AS RES_GROUP_SEQ	
				, ITEM_SEQ	
				, GROUP_SEQ	
				, UPDATE_SEQ	
				, PRD_ITEM_CODE	
				, MAX_CNT	
				, DEDUCT_CNT	
				, SERVICE_YN	
				, CRM_SEND_YN
				, CRM_SEND_CNT
			 FROM USER_RESERVE_ITEM_DETAIL_TMP
			WHERE OFFICE_CODE   = #{officeCode}
			  AND RES_NO  	    = #{resNo}
		]]>
	</insert>
	
	<delete id="deleteTmpReserveItem" parameterType="com.wwl.app.domain.res.dto.ResCrmDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.deleteTmpReserveItem
			 * Description : 임시 예약 상품 데이터 제거
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.11.14  이승현      최초 생성
		     */
		]]>
		<![CDATA[		
			DELETE U1, U2
			  FROM USER_RESERVE_ITEM_TMP U1
			       INNER JOIN USER_RESERVE_ITEM_DETAIL_TMP U2
			          ON U1.OFFICE_CODE    = U2.OFFICE_CODE
			         AND U1.RES_NO		   = U2.RES_NO
			         AND U1.RES_GROUP_CODE = U2.RES_GROUP_CODE
			         AND U1.RES_GROUP_SEQ  = U2.RES_GROUP_SEQ
			 WHERE U1.OFFICE_CODE   = #{officeCode}
			   AND U1.RES_NO 	    = #{resNo}			   
		]]>
	</delete>
	
	<delete id="deleteReserveItem" parameterType="com.wwl.app.domain.res.dto.ResCrmDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.deleteReserveItem
			 * Description : 예약 상품 데이터 제거
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.12.28  이승현      최초 생성
		     */
		]]>
		<![CDATA[		
			DELETE U1, U2
			  FROM USER_RESERVE_ITEM U1
			       INNER JOIN USER_RESERVE_ITEM_DETAIL U2
			          ON U1.OFFICE_CODE    = U2.OFFICE_CODE
			         AND U1.RES_NO		   = U2.RES_NO
			         AND U1.RES_GROUP_CODE = U2.RES_GROUP_CODE
			         AND U1.RES_GROUP_SEQ  = U2.RES_GROUP_SEQ
			 WHERE U1.OFFICE_CODE   = #{officeCode}
			   AND U1.RES_NO 	    = #{resNo}	
			   AND U1.RES_GROUP_CODE NOT IN      								   
		]]>
		<foreach collection="resGroupList" item="item" open="(" close=")" separator=",">
 			#{item}
		</foreach>
	</delete>
	
	<update id="updateReserveConfirm" parameterType="com.wwl.app.domain.res.dto.ResUserDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.updateReserveConfirm
			 * Description : 시술권 저장 - 예약정보 최종확인
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.06.03  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			UPDATE USER_RESERVE U1
			       INNER JOIN USER_RESERVE U2
			          ON U1.OFFICE_CODE   = U2.OFFICE_CODE
			         AND U1.RES_NO		  = U2.RES_NO
			   SET U1.RES_TYPE	    = #{resType}
				 , U1.RES_NOTE	    = #{resNote}		
				 -- 상담대기 상태에서 저장되는 경우는 상담종료(4), 이외에는 확인완료(5)	   	 			   	 
				 , U1.RES_STATUS    = IF(U2.RES_STATUS = 2, 4, 5)
				 , U1.HOSPITAL_NOTE = #{hospitalNote}
				 , U1.ADVICE_YN	    = #{adviceYn}
				 , U1.CONFIRM_YN    = 'Y'			   	 
				 , U1.CONFIRM_USER  = #{createUser}
				 , U1.CONFIRM_DATE  = NOW()
				 , U1.RES_SALE	    = #{resSale}
				 -- 도착 처리없이 시술권을 저장하는 경우에 대한 처리
				 , U1.CHECKIN_USER  = IF(IFNULL(U2.CHECKIN_USER, '') = '', #{createUser}, U2.CHECKIN_USER)
				 , U1.CHECKIN_DATE  = IF(IFNULL(U2.CHECKIN_DATE, '') = '', NOW(), U2.CHECKIN_DATE)
				 , U1.SAVE_YN		= 'Y' 
			 WHERE U1.OFFICE_CODE   = #{officeCode}
			   AND U1.RES_NO	    = #{resNo}
		]]>
	</update>
	
	<insert id="insertUserProduct" parameterType="com.wwl.app.domain.res.dto.ResUserDTO">
		<![CDATA[
			/* 
			 * SQL ID      : res.insertUserProduct
			 * Description : 신규 시술권 등록
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.10.31  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			INSERT INTO USER_PRODUCT
			SELECT 
				   U1.OFFICE_CODE
			     , #{userId} AS USER_ID
			     , U1.RES_NO
			     , U1.RES_GROUP_CODE
			     , (SELECT IFNULL(MAX(RES_GROUP_SEQ),0) + 1
					  FROM USER_PRODUCT
					 WHERE OFFICE_CODE    = U1.OFFICE_CODE
					   AND RES_NO		  = U1.RES_NO
					   AND RES_GROUP_CODE = U1.RES_GROUP_CODE) AS RES_GROUP_SEQ
			     , U1.ITEM_TYPE
			     , #{createUser} AS CREATE_USER
			     , NOW() 		 AS CREATE_DATE
			  FROM USER_RESERVE_ITEM U1
			  	   INNER JOIN (		 			
								SELECT DISTINCT U.RES_NO
									 , U.RES_GROUP_CODE	 		
									 , (SELECT MAX(RES_GROUP_SEQ) AS RES_GROUP_SEQ
										  FROM USER_RESERVE_ITEM
										 WHERE OFFICE_CODE    = U.OFFICE_CODE
										   AND RES_NO		  = U.RES_NO
										   AND RES_GROUP_CODE = U.RES_GROUP_CODE) AS RES_GROUP_SEQ							 
								  FROM USER_RESERVE_ITEM_DETAIL U
									   INNER JOIN (
													SELECT ITEM_SEQ
													  FROM USER_RESERVE_ITEM_DETAIL A
													 WHERE OFFICE_CODE   = #{officeCode}
													   AND RES_NO		 = #{resNo}
													   AND ITEM_SEQ	IN
		]]>
		<foreach collection="reserveList" item="item" open="(" close=")" separator=",">
 			#{item}
		</foreach>
		<![CDATA[
									   ) TMP ON U.ITEM_SEQ = TMP.ITEM_SEQ
								 WHERE U.OFFICE_CODE = #{officeCode}
								   AND U.RES_NO		 = #{resNo}
			       ) U2
			        ON U1.RES_NO         = U2.RES_NO
				   AND U1.RES_GROUP_CODE = U2.RES_GROUP_CODE
				   AND U1.RES_GROUP_SEQ  = U2.RES_GROUP_SEQ 
			 WHERE U1.OFFICE_CODE   = #{officeCode}
			   AND U1.RES_NO		= #{resNo}
		]]>	
	</insert>
	
	<insert id="insertUserProductItem" parameterType="com.wwl.app.domain.res.dto.ResUserDTO">
		<![CDATA[ 
			/*
			 * SQL ID      : res.insertUserProductItem
			 * Description : 신규 시술권 상세 내용 저장 및 사용처리
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.10.31  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			INSERT INTO USER_PRODUCT_ITEM
			SELECT
				   U4.OFFICE_CODE
			     , U4.USER_ID
			     , U4.RES_NO
			     , U4.RES_GROUP_CODE
			     , U4.RES_GROUP_SEQ
				 , @ROWNUM := @ROWNUM + 1 AS ITEM_SEQ
			     , U4.GROUP_SEQ
			     , U4.UPDATE_SEQ
			     , U4.PRD_ITEM_CODE
			     , U4.MAX_CNT
			     , U4.DEDUCT_CNT
			     , U4.CONFIRM_CNT
			     , U4.CONFIRM_STATUS
			     , U4.DELETE_STATUS
			     , U4.SERVICE_YN
			     , 'N' AS CRM_SEND_YN
			     , 0   AS CRM_SEND_CNT
			  FROM (
			  		SELECT 
						   U1.OFFICE_CODE
						 , #{userId} AS USER_ID
						 , U1.RES_NO
						 , U1.RES_GROUP_CODE
						 , (SELECT IFNULL(MAX(RES_GROUP_SEQ), 0) + 1
		                      FROM USER_PRODUCT_ITEM U
						 	 WHERE OFFICE_CODE    = U1.OFFICE_CODE
		                       AND USER_ID		  = #{userId}
		                       AND RES_NO 		  = U1.RES_NO
		                       AND RES_GROUP_CODE = U1.RES_GROUP_CODE) AS RES_GROUP_SEQ
						 , U1.GROUP_SEQ
						 , U1.UPDATE_SEQ
						 , U1.PRD_ITEM_CODE
						 , U1.MAX_CNT
						 , U1.DEDUCT_CNT              
						 , CASE WHEN U0.ITEM_TYPE = 'E' THEN CASE WHEN (U1.RES_GROUP_CODE = U2.RES_GROUP_CODE AND U1.RES_GROUP_SEQ = U2.RES_GROUP_SEQ) THEN 1
						 										  ELSE 0
			  			 									  END 
						 		ELSE CASE WHEN U1.ITEM_SEQ = U3.ITEM_SEQ THEN U3.ITEM_CNT
										  ELSE 0
									  END
						    END AS CONFIRM_CNT             
						 , CASE WHEN U0.ITEM_TYPE = 'E' THEN CASE WHEN (U1.RES_GROUP_CODE = U2.RES_GROUP_CODE AND U1.RES_GROUP_SEQ = U2.RES_GROUP_SEQ) THEN 'Y'
						 										  ELSE 'N'
			  			 									  END 
						 		ELSE CASE WHEN U1.ITEM_SEQ = U3.ITEM_SEQ THEN CASE WHEN U0.ITEM_TYPE = 'C' THEN IF(U1.SERVICE_YN = 'Y', 'Y', 'N')
				 			 													   ELSE 'Y'
									 										   END
							    		  ELSE 'N'
			  				    	  END
						    END AS CONFIRM_STATUS		
						 , 'N'  AS DELETE_STATUS     
						 , U1.SERVICE_YN	     
						 , U1.CRM_SEND_YN
						 , U1.CRM_SEND_CNT
					  FROM USER_RESERVE_ITEM U0
					  	   INNER JOIN USER_RESERVE_ITEM_DETAIL U1
					  	      ON U0.OFFICE_CODE    = U1.OFFICE_CODE
					  	     AND U0.RES_NO		   = U1.RES_NO
					  	     AND U0.RES_GROUP_CODE = U1.RES_GROUP_CODE
						   	 AND U0.RES_GROUP_SEQ  = U1.RES_GROUP_SEQ
						   INNER JOIN (
										SELECT 
											   U.RES_NO
											 , U.RES_GROUP_CODE
											 , MAX(U.RES_GROUP_SEQ) AS RES_GROUP_SEQ
										  FROM USER_RESERVE_ITEM_DETAIL U
											   INNER JOIN (
															SELECT ITEM_SEQ
															  FROM USER_RESERVE_ITEM_DETAIL A
															 WHERE OFFICE_CODE   = #{officeCode}
															   AND RES_NO		 = #{resNo}
															   AND ITEM_SEQ	IN
					]]>
					<foreach collection="reserveList" item="item" open="(" close=")" separator=",">
		 				#{item}
					</foreach>
					<![CDATA[    
											    ) TMP ON U.ITEM_SEQ = TMP.ITEM_SEQ
										  WHERE U.OFFICE_CODE   = #{officeCode}
											AND U.RES_NO		= #{resNo}
										  GROUP BY 
										  		U.RES_NO, U.RES_GROUP_CODE, U.RES_GROUP_SEQ																		
				             ) U2
					        ON U0.RES_NO         = U2.RES_NO
						   AND U0.RES_GROUP_CODE = U2.RES_GROUP_CODE
						   AND U0.RES_GROUP_SEQ  = U2.RES_GROUP_SEQ 
						  LEFT OUTER JOIN (
						    				SELECT ITEM_SEQ
												 , COUNT(ITEM_SEQ) AS ITEM_CNT
											  FROM (
					]]>
					<foreach collection="reserveList" item="item" index="index" separator="UNION ALL">
 						SELECT #{item} AS ITEM_SEQ
					</foreach>
					<![CDATA[	
													) A
											 GROUP BY ITEM_SEQ
							) U3 
						   ON U1.ITEM_SEQ   = U3.ITEM_SEQ
					 WHERE U0.OFFICE_CODE   = #{officeCode}
					   AND U0.RES_NO		= #{resNo} 
					 ORDER BY U1.RES_GROUP_CODE, U1.GROUP_SEQ, U1.ITEM_SEQ
			  	   ) U4 INNER JOIN (
									SELECT @ROWNUM := (SELECT IFNULL(MAX(ITEM_SEQ), 0)
										  		 	     FROM USER_PRODUCT_ITEM
													    WHERE OFFICE_CODE   = #{officeCode}
														  AND USER_ID		= #{userId})
			       ) RN         			
		]]>	
	</insert>
		
	<update id="insertFirstEvent" parameterType="com.wwl.app.domain.res.dto.ResUserDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.insertFirstEvent
			 * Description : 고객별 이벤트 1회 체험 상품 사용체크
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.12.26  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			INSERT USER_FIRST_EVENT
			SELECT 
				   E1.OFFICE_CODE
				 , #{userId} AS USER_ID
				 , @ROWNUM := @ROWNUM + 1
				 , E1.EVENT_UPDATE_SEQ	
			  	 , E1.EVENT_SEQ	
				 , E1.EVENT_SUB_SEQ	
				 , E1.EVENT_PRODUCT_CODE	 
				 , NOW() AS CREATE_DATE
			  FROM EVENT_PRODUCT_SURGICAL E1
			  	   INNER JOIN (
								SELECT 
									   EVENT_UPDATE_SEQ 
									 , EVENT_SEQ 
									 , EVENT_SUB_SEQ 
									 , EVENT_PRODUCT_CODE 
								  FROM ALL_EVENT_PRODUCT_INFO  	   
								 WHERE OFFICE_CODE = #{officeCode}
								   AND ITEM_CODE IN 
		]]>
		<foreach collection="resGroupList" item="item" open="(" close=")" separator=",">
			#{item}
		</foreach>
		<![CDATA[
				   ) E2
				   ON E1.EVENT_UPDATE_SEQ   = E2.EVENT_UPDATE_SEQ
				  AND E1.EVENT_SEQ 	        = E2.EVENT_SEQ
				  AND E1.EVENT_SUB_SEQ      = E2.EVENT_SUB_SEQ
				  AND E1.EVENT_PRODUCT_CODE = E2.EVENT_PRODUCT_CODE
				  INNER JOIN (
			  				  SELECT @ROWNUM := (SELECT IFNULL(MAX(USER_SEQ), 0)
								  				   FROM USER_FIRST_EVENT
												  WHERE OFFICE_CODE = #{officeCode}
													AND USER_ID	    = #{userId})
				  ) E3 ON 1=1
			WHERE E1.OFFICE_CODE = #{officeCode}
			  AND E1.EVENT_PRODUCT_TYPE = 'E'			  
		]]>
	</update>
	
	<update id="updateUserProduct" parameterType="com.wwl.app.domain.res.dto.ResUserDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.updateUserProduct
			 * Description : 남은 시술권 사용처리
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.06.07  이승현      최초 생성
			 * 2022.11.01  이승현      회원 관리 개선에 따라 저장 로직 변경
		     */
		]]>
		<![CDATA[	
			UPDATE USER_PRODUCT U1
				   INNER JOIN USER_PRODUCT_ITEM U2
					  ON U1.OFFICE_CODE    = U2.OFFICE_CODE
					 AND U1.RES_NO		   = U2.RES_NO
					 AND U1.RES_GROUP_CODE = U2.RES_GROUP_CODE
				   LEFT OUTER JOIN (
				    				SELECT ITEM_SEQ
										 , COUNT(ITEM_SEQ) AS ITEM_CNT
									  FROM (

 		]]>
		<foreach collection="productList" item="item" index="index" separator="UNION ALL">
 			SELECT #{item} AS ITEM_SEQ
		</foreach>
		<![CDATA[	

										) A
											 GROUP BY ITEM_SEQ
					) U3
				   ON U2.ITEM_SEQ 	 = U3.ITEM_SEQ
			   SET U2.CONFIRM_STATUS = CASE WHEN U2.ITEM_SEQ = U3.ITEM_SEQ THEN CASE WHEN U1.ITEM_TYPE = 'C' THEN IF(U2.SERVICE_YN = 'Y', 'Y', 'N')
			   																		 ELSE 'Y'
			   																	 END
			   								ELSE U2.CONFIRM_STATUS
			   						    END 			   
			     , U2.CONFIRM_CNT    = U2.CONFIRM_CNT + IF(U2.ITEM_SEQ = U3.ITEM_SEQ, U3.ITEM_CNT, 0)
			     , U2.CRM_SEND_YN    = 'N'
			     , U2.CRM_SEND_CNT   = 0
			 WHERE U1.OFFICE_CODE    = #{officeCode}
			   AND U1.USER_ID 	     = #{userId}
		]]>
	</update>
	
	<update id="updateUserProudctCrmStatus" parameterType="com.wwl.app.domain.res.dto.ResUserDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.updateUserProudctCrmStatus
			 * Description : 남은 시술권 CRM 전송상태 초기화
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.11.21  이승현      최초 생성
		     */
		]]>
		<![CDATA[	
			UPDATE USER_PRODUCT_ITEM
			   SET U2.CRM_SEND_YN    = 'N'
			     , U2.CRM_SEND_CNT   = 0
			 WHERE U1.OFFICE_CODE    = #{officeCode}
			   AND U1.USER_ID 	     = #{userId}
		]]>
	</update>
	
	<insert id="insertUserReserveProduct" parameterType="com.wwl.app.domain.res.dto.ResCrmDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.insertUserReserveProduct
			 * Description : 남은 시술권 사용 예약
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.11.15  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			INSERT INTO USER_RESERVE_PRODUCT
			SELECT
				   X.OFFICE_CODE
				 , X.RES_NO
			     , @ROWNUM := @ROWNUM + 1 AS PRD_RES_SEQ				 
			     , X.PRD_RES_NO
			     , X.RES_GROUP_CODE
			     , X.RES_GROUP_SEQ
			     , X.ITEM_SEQ	 
			  FROM (					
					SELECT 
						   UP.OFFICE_CODE
						 , #{resNo}	  AS RES_NO				 				
						 , UP.RES_NO  AS PRD_RES_NO
						 , UP.RES_GROUP_CODE
						 , UP.RES_GROUP_SEQ
						 , UPI.ITEM_SEQ
					  FROM USER_PRODUCT UP
					       INNER JOIN USER_PRODUCT_ITEM UPI
					          ON UP.OFFICE_CODE    = UPI.OFFICE_CODE
					         AND UP.USER_ID		   = UPI.USER_ID
					         AND UP.RES_NO		   = UPI.RES_NO
					         AND UP.RES_GROUP_CODE = UPI.RES_GROUP_CODE
					         AND UP.RES_GROUP_SEQ  = UPI.RES_GROUP_SEQ
					 WHERE UP.OFFICE_CODE	= #{officeCode}
					   AND UP.USER_ID		= #{userId}
					   AND UPI.ITEM_SEQ IN 
		]]>
		<foreach collection="productList" item="item" open="(" close=")" separator=",">
			#{item}
		</foreach>				
					ORDER BY UPI.ITEM_SEQ
				) X INNER JOIN (
								SELECT @ROWNUM := (SELECT IFNULL(MAX(PRD_RES_SEQ), 0)
													 FROM USER_RESERVE_PRODUCT
													WHERE OFFICE_CODE   = #{officeCode}
													  AND RES_NO		= #{resNo})
				) Y					 
	</insert>
	
	<insert id="insertReserveUseHistory" parameterType="com.wwl.app.domain.res.dto.ResUserDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.insertReserveUseHistory
			 * Description : 시술권 사용내역 등록 - 예약 상품
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.11.03  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			INSERT INTO USER_PRODUCT_ITEM_HISTORY
			SELECT 
				   Y.OFFICE_CODE
			     , Y.USER_ID
			     , @ROWNUM := @ROWNUM + 1 AS HISTORY_SEQ
			     , Y.ITEM_SEQ
			     , Y.CONFIRM_STATUS
			     , 'Y' AS DISPLAY_YN
			     , Y.UPDATE_USER
			     , Y.UPDATE_DATE
			  FROM (
			  		SELECT
						   X.OFFICE_CODE
					     , X.USER_ID					     
					     , X.ITEM_SEQ     				 
						 , 'Y'			 AS CONFIRM_STATUS
					     , #{createUser} AS UPDATE_USER
					     , NOW() 		 AS UPDATE_DATE
					  FROM (
							SELECT
								   U.OFFICE_CODE
								 , U.USER_ID			 
								 , U.ITEM_SEQ     
							  FROM USER_PRODUCT_ITEM U
								   INNER JOIN (
												SELECT 
													   U1.RES_NO
													 , U1.RES_GROUP_CODE
													 , U1.RES_GROUP_SEQ
													 , U2.ITEM_SEQ
													 , U2.GROUP_SEQ
													 , U2.UPDATE_SEQ
													 , U2.PRD_ITEM_CODE	 
												  FROM USER_RESERVE_ITEM U1
		                                               INNER JOIN USER_RESERVE_ITEM_DETAIL U2
		                                                  ON U1.OFFICE_CODE    = U2.OFFICE_CODE
		                                                 AND U1.RES_NO		   = U2.RES_NO
		                                                 AND U1.RES_GROUP_CODE = U2.RES_GROUP_CODE
		                                                 AND U1.RES_GROUP_SEQ  = U2.RES_GROUP_SEQ
												 WHERE U1.OFFICE_CODE    = #{officeCode}
												   AND U1.RES_NO		 = #{resNo}
												   AND U2.ITEM_SEQ 		 = #{itemSeq}
								  ) R
								   ON U.RES_NO 	 	   = R.RES_NO
								  AND U.RES_GROUP_CODE = R.RES_GROUP_CODE
								  AND U.RES_GROUP_SEQ  = R.RES_GROUP_SEQ
								  AND U.GROUP_SEQ      = R.GROUP_SEQ
								  AND U.UPDATE_SEQ     = R.UPDATE_SEQ
								  AND U.PRD_ITEM_CODE  = R.PRD_ITEM_CODE
							WHERE U.OFFICE_CODE   = #{officeCode}
							  AND U.USER_ID	      = #{userId}							
							) X	
			  		) Y INNER JOIN (
			  						SELECT @ROWNUM := (SELECT IFNULL(MAX(HISTORY_SEQ), 0)
													     FROM USER_PRODUCT_ITEM_HISTORY
													    WHERE OFFICE_CODE   = #{officeCode}
													      AND USER_ID		= #{userId})
			  		) Z ON 1=1
		]]>
	</insert>
	
	<insert id="insertProductUseHistory" parameterType="com.wwl.app.domain.res.dto.ResUserDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.insertProductUseHistory
			 * Description : 시술권 사용내역 등록 - 남은 시술권
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.11.03  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			INSERT INTO USER_PRODUCT_ITEM_HISTORY
			SELECT 
				   Y.OFFICE_CODE
			     , Y.USER_ID
			     , (SELECT IFNULL(MAX(HISTORY_SEQ), 0) + 1
					  FROM USER_PRODUCT_ITEM_HISTORY
					 WHERE OFFICE_CODE   = #{officeCode}
					   AND USER_ID		 = #{userId})
			     , Y.ITEM_SEQ
			     , Y.CONFIRM_STATUS
			     , 'Y' AS DISPLAY_YN
			     , Y.UPDATE_USER
			     , Y.UPDATE_DATE
			  FROM (			  		
					SELECT 
						  OFFICE_CODE
			            , USER_ID
						, ITEM_SEQ
						, 'Y'			AS CONFIRM_STATUS
					    , #{createUser} AS UPDATE_USER
					    , NOW() 		AS UPDATE_DATE
					 FROM USER_PRODUCT_ITEM
					WHERE OFFICE_CODE   = #{officeCode}
					  AND USER_ID	    = #{userId}
					  AND ITEM_SEQ      = #{itemSeq}											
			  		) Y 
		]]>
	</insert>
	
	<delete id="deleteNewReserveItem" parameterType="com.wwl.app.domain.res.dto.ResUserDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.deleteNewReserveItem
			 * Description : 신규 예약 상품 제거
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.11.14  이승현      최초 생성
		     */
		]]>
		<![CDATA[		
			DELETE U1, U2
			  FROM USER_RESERVE_ITEM U1
			       INNER JOIN USER_RESERVE_ITEM_DETAIL U2
			          ON U1.OFFICE_CODE    = U2.OFFICE_CODE
			         AND U1.RES_NO		   = U2.RES_NO
			         AND U1.RES_GROUP_CODE = U2.RES_GROUP_CODE
			         AND U1.RES_GROUP_SEQ  = U2.RES_GROUP_SEQ
			 WHERE U1.OFFICE_CODE   = #{officeCode}
			   AND U1.RES_NO 	    = #{resNo}
			   AND U1.ITEM_STATUS   = 'N'
		]]>
	</delete>
	
	<select id="getUserTotalPay" parameterType="com.wwl.app.domain.res.dto.ResUserDTO" resultType="com.wwl.app.domain.res.dto.ResUserDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.getUserTotalPay
			 * Description : 회원 총 시술누적금액 계산 + 등급 산정하기
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.06.10  이승현      최초 생성
		     */
		]]>
		<![CDATA[				
			SELECT 
				   Z.OFFICE_CODE
				 , Z.USER_ID	 
			       -- 의료진 지정 조건이 추가되는 경우
			     , CASE WHEN P.DOCTOR_FIXED = 'Y' THEN 
						CASE WHEN Z.FIXED_DOCTOR = 'Y' THEN P.GRADE_CODE
			                 ELSE ''
						  END
						ELSE P.GRADE_CODE
					END GRADE_CODE
			  FROM (
			  		SELECT 
						   U1.OFFICE_CODE
						 , U1.USER_ID
						 , IF(IFNULL(CONCAT(U1.FIXED_DOCTOR, U1.FIXED_STAFF),'') = '', 'N', 'Y') AS FIXED_DOCTOR
						 , IFNULL(U2.USER_TOTAL_PAY, 0) + #{totalPrice} AS USER_TOTAL_PAY
					  FROM USER_INFO U1
					  	   LEFT OUTER JOIN (
											SELECT 	
												   X.USER_ID
												 , SUM(X.TOTAL_PRICE) AS USER_TOTAL_PAY
											  FROM (
													SELECT 
														   U.USER_ID
														 , SUM(P.PRICE) AS TOTAL_PRICE
													  FROM USER_PRODUCT U
														   INNER JOIN ALL_PRODUCT_INFO A
															  ON U.OFFICE_CODE    = A.OFFICE_CODE
															 AND U.RES_GROUP_CODE = A.ITEM_CODE
														   INNER JOIN PRODUCT_SURGICAL_ITEM P
															  ON A.OFFICE_CODE   = P.OFFICE_CODE
															 AND A.UPDATE_SEQ	 = P.UPDATE_SEQ
															 AND A.PRD_ITEM_CODE = P.PRD_ITEM_CODE
													 WHERE U.OFFICE_CODE   = #{officeCode}
													   AND U.USER_ID	   = #{userId}
													   AND U.ITEM_TYPE	   = 'N'
													 GROUP BY U.RES_NO
													 UNION ALL
													SELECT 
														   U.USER_ID
														 , SUM(E.EVENT_SALE) AS TOTAL_PRICE
													  FROM USER_PRODUCT U
														   INNER JOIN ALL_EVENT_PRODUCT_INFO A
															  ON U.OFFICE_CODE    = A.OFFICE_CODE
															 AND U.RES_GROUP_CODE = A.ITEM_CODE
														   INNER JOIN EVENT_PRODUCT_SURGICAL E
															  ON A.OFFICE_CODE   	  = E.OFFICE_CODE
															 AND A.EVENT_UPDATE_SEQ	  = E.EVENT_UPDATE_SEQ
															 AND A.EVENT_SEQ		  = E.EVENT_SEQ
															 AND A.EVENT_SUB_SEQ	  = E.EVENT_SUB_SEQ         
															 AND A.EVENT_PRODUCT_CODE = E.EVENT_PRODUCT_CODE       
													 WHERE U.OFFICE_CODE   = #{officeCode}
													   AND U.USER_ID	   = #{userId}
													   AND U.ITEM_TYPE	  <> 'N'
													 GROUP BY U.RES_NO
													) X
											GROUP BY X.USER_ID  
						  	) U2
						  ON U1.USER_ID = U2.USER_ID
					WHERE U1.OFFICE_CODE   = #{officeCode}
 					  AND U1.USER_ID	   = #{userId}
					) Z LEFT OUTER JOIN (
										SELECT 
			                                  GRADE_CODE
			                                , DOCTOR_FIXED
											, TOTAL_PAY
											, LEAD(TOTAL_PAY) OVER (ORDER BY TOTAL_PAY) NEXT_PAY
										  FROM USER_GRADE
										 WHERE OFFICE_CODE   = #{officeCode}
										 ORDER BY TOTAL_PAY
			        ) P ON 1=1        
			           AND P.TOTAL_PAY <= Z.USER_TOTAL_PAY           
					   AND IF(IFNULL(P.NEXT_PAY, 'N') = 'N', 1, P.NEXT_PAY) > IF(IFNULL(P.NEXT_PAY, 'N') = 'N', 0, Z.USER_TOTAL_PAY)
		]]>
	</select>		

	<update id="updateUserGradeIncrease" parameterType="com.wwl.app.domain.res.dto.ResUserDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.updateUserGradeIncrease
			 * Description : 회원 등급 변경
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.06.10  이승현      최초 생성
		     */
		]]>
		<![CDATA[	
			UPDATE USER_INFO
			   SET GRADE_CODE    = #{gradeCode}
			 WHERE OFFICE_CODE	 = #{officeCode}
			   AND USER_ID	     = #{userId} 	
		]]>
	</update>
	
	<select id="getEventPackageList" parameterType="com.wwl.app.domain.res.dto.ResUserDTO" resultType="camelHashMap">
		<![CDATA[
			/*
			 * SQL ID      : res.getEventPackageList
			 * Description : 이벤트 패키지 회차 조회
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.07.04  이승현      최초 생성
		     */
		]]>
		<choose>
			<when test="view == 'reserve'">
				<![CDATA[	
					SELECT
			   		       GROUP_SEQ AS CODE
					     , CONCAT(GROUP_SEQ, '회') AS NAME
					  FROM USER_RESERVE_ITEM_DETAIL
					 WHERE OFFICE_CODE    = #{officeCode}
					   AND RES_NO		  = #{resNo}
					   AND RES_GROUP_CODE = #{resGroupCode}
					   AND RES_GROUP_SEQ  = (SELECT MAX(RES_GROUP_SEQ)
					   						   FROM USER_RESERVE_ITEM_DETAIL A
					   						  WHERE OFFICE_CODE    = #{officeCode}
					   						    AND RES_NO		   = #{resNo}
					   						    AND RES_GROUP_CODE = #{resGroupCode})
					 GROUP BY GROUP_SEQ
				]]>
			</when>
			<otherwise>
				<![CDATA[	
					SELECT
			   		       GROUP_SEQ AS CODE
					     , CONCAT(GROUP_SEQ, '회') AS NAME
					  FROM USER_PRODUCT_ITEM
					 WHERE OFFICE_CODE    = #{officeCode}
					   AND USER_ID		  = #{userId}
					   AND RES_NO		  = #{resNo}
					   AND RES_GROUP_CODE = #{resGroupCode}
					 GROUP BY GROUP_SEQ
				]]>
			</otherwise>			
		</choose>
	</select>
	
	<select id="getServiceProductItem" parameterType="com.wwl.app.domain.prd.dto.PrdProductDTO" resultType="camelHashMap">
		<![CDATA[
			/*
			 * SQL ID      : res.getServiceProductItem
			 * Description : 서비스 시술명 검색 
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.07.05  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			SELECT 
				   X.ITEM_CODE
				 , X.ITEM_NAME     
				 , FORMAT(X.ITEM_PRICE, 0) AS ITEM_PRICE
			  FROM (
					-- 일반시술
					SELECT 
						   CONCAT(A.UPDATE_SEQ, A.PRD_ITEM_CODE) AS ITEM_CODE			 
						 , A.PRD_ITEM_NAME  AS ITEM_NAME	 
						 , A.PRICE 			AS ITEM_PRICE			
						 , D.PRD_CODE		-- 중분류코드
						 , D.PRD_SUB_CODE	-- 소분류코드						 
					  FROM PRODUCT_SURGICAL_ITEM A
						   INNER JOIN (
										SELECT MAX(EVENT_UPDATE_SEQ) UPDATE_SEQ
										  FROM EVENT_MASTER
										 WHERE OFFICE_CODE   = #{officeCode}
										   AND DATE_FORMAT(NOW(), '%Y%m%d') BETWEEN START_DATE AND END_DATE
						   ) B
						   ON A.UPDATE_SEQ = B.UPDATE_SEQ
						   LEFT OUTER JOIN (
											SELECT 
												  PSS.UPDATE_SEQ
												, PSS.PRD_SUB_CODE
												, PSS.PRD_CODE
											 FROM PRODUCT_SURGICAL_SUB PSS
												  INNER JOIN PRODUCT_SURGICAL PS
													 ON PSS.OFFICE_CODE   = PS.OFFICE_CODE
													AND PSS.UPDATE_SEQ	  = PS.UPDATE_SEQ
													AND PSS.PRD_CODE      = PS.PRD_CODE
											 WHERE PSS.OFFICE_CODE   = #{officeCode}
											 GROUP BY PSS.UPDATE_SEQ, PSS.PRD_SUB_CODE
							) D
							ON A.UPDATE_SEQ   = D.UPDATE_SEQ
						   AND A.PRD_SUB_CODE = D.PRD_SUB_CODE    
					 WHERE A.OFFICE_CODE   = #{officeCode}	
					) X
			WHERE X.ITEM_NAME LIKE TRIM(CONCAT('%', #{field}, '%'))
		]]>
		<if test="prdCode != null and prdCode != ''">		<!-- 중분류 검색 -->
			AND X.PRD_CODE = #{prdCode}
		</if>
		<if test="prdSubCode != null and prdSubCode != ''">	<!-- 소분류 검색 -->
			AND X.PRD_SUB_CODE = #{prdSubCode}
		</if>
			 ORDER BY X.ITEM_NAME				
	</select>	
	
	<select id="getUserServiceProductList" parameterType="com.wwl.app.domain.res.dto.ResUserDTO" resultType="camelHashMap">
		<![CDATA[
			/*
			 * SQL ID      : res.getUserServiceProductList
			 * Description : 서비스 시술 조회
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.07.05  이승현      최초 생성
		     */
		]]>
		<![CDATA[	
			SELECT 
				   CONCAT(P1.UPDATE_SEQ, P1.PRD_ITEM_CODE) AS ITEM_CODE
			     , P2.PRD_ITEM_NAME AS ITEM_NAME
			     , P2.PRICE 		AS ITEM_PRICE
			  FROM USER_PRODUCT_ITEM P1
				   INNER JOIN PRODUCT_SURGICAL_ITEM P2
			          ON P1.OFFICE_CODE   = P2.OFFICE_CODE
			         AND P1.UPDATE_SEQ	  = P2.UPDATE_SEQ
			         AND P1.PRD_ITEM_CODE = P2.PRD_ITEM_CODE
			 WHERE P1.OFFICE_CODE    = #{officeCode}
			   AND P1.USER_ID	     = #{userId}
			   AND P1.RES_NO		 = #{resNo}
			   AND P1.RES_GROUP_CODE = #{resGroupCode}
			   AND P1.GROUP_SEQ      = (SELECT CASE WHEN UP.ITEM_TYPE = 'C' THEN MAX(UPI.GROUP_SEQ)
			     								    ELSE #{groupSeq}
			     								END 
			   							  FROM USER_PRODUCT UP
			   							  	   INNER JOIN USER_PRODUCT_ITEM UPI
			   							  	      ON UP.OFFICE_CODE    = UPI.OFFICE_CODE
			   							  	     AND UP.USER_ID		   = UPI.USER_ID
			   							  	     AND UP.RES_NO		   = UPI.RES_NO
			   							  	     AND UP.RES_GROUP_CODE = UPI.RES_GROUP_CODE
			   							 WHERE UP.OFFICE_CODE    = #{officeCode}
			   							   AND UP.USER_ID		 = #{userId}
			   							   AND UP.RES_NO		 = #{resNo}
			   							   AND UP.RES_GROUP_CODE = #{resGroupCode})
			   AND P1.SERVICE_YN     = 'Y'
		]]>
	</select>
	
	<select id="getAddServiceReserveList" parameterType="com.wwl.app.domain.res.dto.ResUserDTO" resultType="camelHashMap">
		<![CDATA[
			/*
			 * SQL ID      : res.getAddServiceReserveList
			 * Description : 예약 상품의 서비스 시술로 등록할 리스트 생성
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.11.04  이승현      최초 생성
		     */
		]]>
		<![CDATA[	
			SELECT 
				   P1.OFFICE_CODE	
			     , P2.RES_NO
			     , P2.RES_GROUP_CODE
			     , P2.RES_GROUP_SEQ
			     , REPLACE(FORMAT(@ROWNUM := @ROWNUM + 1,0),'0','') AS ITEM_SEQ
			     , P2.GROUP_SEQ					     	         
				 , P1.UPDATE_SEQ      
			     , P1.PRD_ITEM_CODE	 	
			     , P1.PRD_ITEM_NAME    AS ITEM_NAME
	 		     , FORMAT(P1.PRICE, 0) AS ITEM_PRICE 
			     , P2.EVENT_CNT
			     , P2.DEDUCT_CNT
			  FROM PRODUCT_SURGICAL_ITEM P1
				   LEFT OUTER JOIN (
									SELECT 
										   U1.OFFICE_CODE										 
										 , U1.RES_NO
										 , U1.RES_GROUP_CODE			
										 , U1.RES_GROUP_SEQ							 									
										 , CASE -- 패키지인 경우 해당 그룹 서비스시술로 등록
												WHEN U1.ITEM_TYPE = 'P' THEN #{groupSeq}
												-- 차감인 경우 마지막 그룹으로 등록
												WHEN U1.ITEM_TYPE = 'C' THEN (SELECT MAX(GROUP_SEQ)
		]]>
		<choose>
			<when test='isNew == "Y"'>	<!-- 신규 예약시 -->
			<![CDATA[
				FROM USER_RESERVE_ITEM_DETAIL_TMP			  
			]]>
			</when>
			<otherwise>
			<![CDATA[
				FROM USER_RESERVE_ITEM_DETAIL
			]]>			
			</otherwise>
		</choose>
		<![CDATA[					
																			   WHERE OFFICE_CODE    = U1.OFFICE_CODE			
																				 AND RES_NO		    = U1.RES_NO
																				 AND RES_GROUP_CODE = U1.RES_GROUP_CODE
							                                                     AND RES_GROUP_SEQ	= U1.RES_GROUP_SEQ)
												-- 이외에는 모두 그룹SEQ가 1로 고정
												ELSE 1
											END GROUP_SEQ 										 										 
										 , 0   AS EVENT_CNT
										 , 0   AS DEDUCT_CNT     
		]]>
		<choose>
			<when test='isNew == "Y"'>	<!-- 신규 예약시 -->
			<![CDATA[
				FROM USER_RESERVE_ITEM_TMP U1			  
			]]>
			</when>
			<otherwise>
			<![CDATA[
				FROM USER_RESERVE_ITEM U1			  
			]]>			
			</otherwise>
		</choose>
		<![CDATA[  
									 WHERE U1.OFFICE_CODE    = #{officeCode}							   
									   AND U1.RES_NO		 = #{resNo}	
									   AND U1.RES_GROUP_CODE = #{resGroupCode}
									   AND U1.RES_GROUP_SEQ  = #{resGroupSeq}
									 LIMIT 1
			       ) P2 
			        ON P1.OFFICE_CODE   = P2.OFFICE_CODE
			        LEFT OUTER JOIN (
									 SELECT @ROWNUM := (SELECT IFNULL(MAX(ITEM_SEQ),0)
		]]>
		<choose>
			<when test='isNew == "Y"'>	<!-- 신규 예약시 -->
			<![CDATA[
				FROM USER_RESERVE_ITEM_DETAIL_TMP			  
			]]>
			</when>
			<otherwise>
			<![CDATA[
				FROM USER_RESERVE_ITEM_DETAIL
			]]>			
			</otherwise>
		</choose>
		<![CDATA[														  
														 WHERE OFFICE_CODE = #{officeCode}
														   AND RES_NO	   = #{resNo})									   
				    ) TMP ON 1=1
			 WHERE P1.OFFICE_CODE   = #{officeCode}
			   AND CONCAT(P1.UPDATE_SEQ, P1.PRD_ITEM_CODE) IN
		]]>
   		<foreach collection="productList" item="item" open="(" close=")" separator=",">
 			#{item}
		</foreach>				
	</select>
	
	<insert id="insertReserveServiceItem" parameterType="list">
		<![CDATA[
			/*
			 * SQL ID      : res.insertReserveServiceItem
			 * Description : 서비스 시술 등록(예약 상품)
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.11.01  이승현      최초 생성
		     */ 
		]]>
		<![CDATA[
			INSERT INTO USER_RESERVE_ITEM_DETAIL (
					  OFFICE_CODE
					, RES_NO
					, RES_GROUP_CODE	
					, RES_GROUP_SEQ
					, ITEM_SEQ				
					, GROUP_SEQ	
					, UPDATE_SEQ	
					, PRD_ITEM_CODE	
					, MAX_CNT	
					, DEDUCT_CNT						
					, SERVICE_YN	
					, CRM_SEND_YN
					, CRM_SEND_CNT			
				) VALUES 
		]]>
		<foreach collection="list" item="item" separator=",">
		(
	    	#{item.officeCode}
	      , #{item.resNo}			
	      , #{item.resGroupCode}
	      , #{item.resGroupSeq}
	      , #{item.itemSeq}		      		      
	      , #{item.groupSeq}
	      , #{item.updateSeq}
	      , #{item.prdItemCode}
	      , #{item.eventCnt}
	      , #{item.deductCnt}
	      , 'Y'
	      , 'N'
	      , 0
	    ) 
	    </foreach>
	</insert>
	
	<insert id="insertReserveServiceItemTmp" parameterType="list">
		<![CDATA[
			/*
			 * SQL ID      : res.insertReserveServiceItemTmp
			 * Description : 서비스 시술 등록(임시 예약 상품)
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.11.14  이승현      최초 생성
		     */ 
		]]>
		<![CDATA[
			INSERT INTO USER_RESERVE_ITEM_DETAIL_TMP (
					  OFFICE_CODE
					, RES_NO
					, RES_GROUP_CODE	
					, RES_GROUP_SEQ
					, ITEM_SEQ				
					, GROUP_SEQ	
					, UPDATE_SEQ	
					, PRD_ITEM_CODE	
					, MAX_CNT	
					, DEDUCT_CNT						
					, SERVICE_YN	
					, CRM_SEND_YN
					, CRM_SEND_CNT				
				) VALUES 
		]]>
		<foreach collection="list" item="item" separator=",">
		(
	    	#{item.officeCode}
	      , #{item.resNo}			
	      , #{item.resGroupCode}
	      , #{item.resGroupSeq}
	      , #{item.itemSeq}  		      
	      , #{item.groupSeq}
	      , #{item.updateSeq}
	      , #{item.prdItemCode}
	      , #{item.eventCnt}
	      , #{item.deductCnt}
	      , 'Y'
	      , 'N'
	      , 0
	    ) 
	    </foreach>
	</insert>
	
	<select id="getAddServiceProductList" parameterType="com.wwl.app.domain.res.dto.ResUserDTO" resultType="camelHashMap">
		<![CDATA[
			/*
			 * SQL ID      : res.getAddServiceProductList
			 * Description : 남은 시술권의 서비스 시술로 등록할 리스트 생성
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.07.05  이승현      최초 생성
		     */
		]]>
		<![CDATA[	
			SELECT 
				   P1.OFFICE_CODE	 			     
			     , P2.USER_ID
			     , P2.RES_NO
			     , P2.RES_GROUP_CODE
			     , P2.RES_GROUP_SEQ
			     , @ROWNUM := @ROWNUM + 1 AS ITEM_SEQ
			     , P2.GROUP_SEQ			          
				 , P1.UPDATE_SEQ      
			     , P1.PRD_ITEM_CODE	 
			     , P1.PRD_ITEM_NAME    AS ITEM_NAME
			     , FORMAT(P1.PRICE, 0) AS ITEM_PRICE	 
			     , P2.EVENT_CNT
			     , P2.DEDUCT_CNT
			  FROM PRODUCT_SURGICAL_ITEM P1
				   LEFT OUTER JOIN (
									SELECT 
										   U1.OFFICE_CODE
										 , U1.USER_ID
										 , U1.RES_NO
										 , U1.RES_GROUP_CODE				
										 , U1.RES_GROUP_SEQ						 									
										 , CASE -- 패키지인 경우 해당 그룹 서비스시술로 등록
										 		WHEN U1.ITEM_TYPE = 'P' THEN #{groupSeq}
										 		-- 차감인 경우 마지막 그룹으로 등록
												WHEN U1.ITEM_TYPE = 'C' THEN (SELECT MAX(GROUP_SEQ)
																				FROM USER_PRODUCT_ITEM
																			   WHERE OFFICE_CODE    = U1.OFFICE_CODE
									                                             AND USER_ID	    = U1.USER_ID		
																				 AND RES_NO		    = U1.RES_NO
																				 AND RES_GROUP_CODE = U1.RES_GROUP_CODE)
												-- 이외에는 모두 그룹SEQ가 1로 고정
												ELSE 1
											END GROUP_SEQ 										 										 
										 , 0   AS EVENT_CNT
										 , 0   AS DEDUCT_CNT     
									  FROM USER_PRODUCT U1
									       INNER JOIN USER_PRODUCT_ITEM U2
									          ON U1.OFFICE_CODE    = U2.OFFICE_CODE
									         AND U1.RES_NO		   = U2.RES_NO
									         AND U1.RES_GROUP_CODE = U2.RES_GROUP_CODE
									         AND U1.RES_GROUP_SEQ  = U2.RES_GROUP_SEQ
									 WHERE U1.OFFICE_CODE    = #{officeCode}
									   AND U1.USER_ID		 = #{userId}
									   AND U1.RES_NO		 = #{resNo}
									   AND U1.RES_GROUP_CODE = #{resGroupCode}
									   AND U1.RES_GROUP_SEQ  = #{resGroupSeq}
									   AND U2.GROUP_SEQ  	 = #{groupSeq}
									 LIMIT 1
			       ) P2 
			        ON P1.OFFICE_CODE = P2.OFFICE_CODE
			        LEFT OUTER JOIN (
			       					SELECT @ROWNUM := (SELECT IFNULL(MAX(ITEM_SEQ),0)
			       										 FROM USER_PRODUCT_ITEM
			       										WHERE OFFICE_CODE = #{officeCode}
			       										  AND USER_ID	  = #{userId})				       					  
			       ) TMP ON 1=1
			 WHERE P1.OFFICE_CODE   = #{officeCode}
			   AND CONCAT(P1.UPDATE_SEQ, P1.PRD_ITEM_CODE) IN
		]]>
   		<foreach collection="productList" item="item" open="(" close=")" separator=",">
 			#{item}
		</foreach>				
	</select>
	
	<insert id="insertProductServiceItem" parameterType="list">
		<![CDATA[
			/*
			 * SQL ID      : res.insertProductServiceItem
			 * Description : 서비스 시술 등록(남은 시술권)
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.11.01  이승현      최초 생성
		     */
		]]>
		<![CDATA[	
			INSERT INTO USER_PRODUCT_ITEM (
				  OFFICE_CODE
				, USER_ID
				, RES_NO
				, RES_GROUP_CODE	
				, RES_GROUP_SEQ
				, ITEM_SEQ				
				, GROUP_SEQ	
				, UPDATE_SEQ	
				, PRD_ITEM_CODE	
				, MAX_CNT	
				, DEDUCT_CNT
				, CONFIRM_CNT
				, CONFIRM_STATUS					
				, SERVICE_YN
				, CRM_SEND_YN
				, CRM_SEND_CNT					
			) VALUES 
		]]>
		<foreach collection="list" item="item" separator=",">
		(
	    	#{item.officeCode}
	      , #{item.userId}
	      , #{item.resNo}			
	      , #{item.resGroupCode}    
	      , #{item.resGroupSeq} 
	      , #{item.itemSeq}      		      
	      , #{item.groupSeq}
	      , #{item.updateSeq}
	      , #{item.prdItemCode}
	      , #{item.eventCnt}
	      , #{item.deductCnt}   
	      , 0
	      , 'N'
	      , 'Y'
	      , 'N'
	      , 0
	    ) 
	    </foreach>				
	</insert>
	
	<select id="getProductType" parameterType="com.wwl.app.domain.res.dto.ResUserDTO" resultType="String">
		<![CDATA[
			/*
			 * SQL ID      : res.getProductType
			 * Description : 시술권 타입 가져오기
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.07.13  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			SELECT ITEM_TYPE 
			  FROM USER_PRODUCT
			 WHERE OFFICE_CODE    = #{officeCode}
			   AND RES_NO		  = #{resNo}
			   AND RES_GROUP_CODE = #{resGroupCode}
			   AND RES_GROUP_SEQ  = #{resGroupSeq}
		]]>		
	</select>
	
	<select id="getRefundProductList" parameterType="com.wwl.app.domain.res.dto.ResUserDTO" resultType="camelHashMap">
		<![CDATA[
			/*
			 * SQL ID      : res.getRefundProductList
			 * Description : 환불 시술권 조회
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.07.13  이승현      최초 생성
		     */
		]]>
		<choose>
			<when test='view == "P"'>	<!-- 패키지 -->
				<![CDATA[
					SELECT 
						   Z.GROUP_SEQ		-- 패키지 횟수
						 , Z.RES_NO			-- 예약번호
						 , Z.RES_GROUP_CODE	-- 예약그룹코드
						 , Z.RES_GROUP_SEQ	-- 예약그룹SEQ
						 , Z.ITEM_SEQ		-- 아이템SEQ
						 , Z.ITEM_TITLE		-- 0일때 대표상품명, 이외 패키지상품명  
						 , Z.ITEM_PRICE		-- 상품가격
						 , Z.REFUND_AMOUNT	-- 환불금액
					  FROM (
							SELECT 
								   X.GROUP_SEQ		
								 , X.RES_NO		
							     , X.RES_GROUP_CODE
							     , X.RES_GROUP_SEQ	
							     , X.ITEM_SEQ	
							     , IF(X.GROUP_SEQ = 0, 
							     		X.ITEM_TITLE,
							     		CONCAT('[', X.GROUP_SEQ, '회] ', X.ITEM_TITLE)
							       ) AS ITEM_TITLE
							     , X.ITEM_PRICE	
							     , IFNULL(FORMAT(Y.REFUND_AMOUNT, 0), 0) AS REFUND_AMOUNT
							  FROM (
									SELECT 
										   UP.OFFICE_CODE
										 , 0 AS GROUP_SEQ
										 , UP.RES_NO
										 , UP.RES_GROUP_CODE
										 , UP.RES_GROUP_SEQ
										 , 0 AS ITEM_SEQ
										 , EPS.EVENT_PRODUCT_TITLE  AS ITEM_TITLE
										 , FORMAT(EPS.EVENT_SALE,0) AS ITEM_PRICE
									  FROM USER_PRODUCT UP
										   INNER JOIN ALL_EVENT_PRODUCT_INFO API
							                  ON UP.OFFICE_CODE    = API.OFFICE_CODE
							                 AND UP.RES_GROUP_CODE = API.ITEM_CODE
										   INNER JOIN EVENT_PRODUCT_SURGICAL EPS
							                  ON API.OFFICE_CODE   	    = EPS.OFFICE_CODE
							                 AND API.EVENT_UPDATE_SEQ   = EPS.EVENT_UPDATE_SEQ
							                 AND API.EVENT_SEQ	        = EPS.EVENT_SEQ
							                 AND API.EVENT_SUB_SEQ      = EPS.EVENT_SUB_SEQ
							                 AND API.EVENT_PRODUCT_CODE = EPS.EVENT_PRODUCT_CODE
									 WHERE UP.OFFICE_CODE    = #{officeCode}
									   AND UP.RES_NO		 = #{resNo}
									   AND UP.RES_GROUP_CODE = #{resGroupCode}
									   AND UP.RES_GROUP_SEQ  = #{resGroupSeq}
									 UNION ALL
									 SELECT 
										   UP.OFFICE_CODE
							             , UPI.GROUP_SEQ
										 , UP.RES_NO
										 , UP.RES_GROUP_CODE
										 , UP.RES_GROUP_SEQ
										 , UPI.ITEM_SEQ
										 , GROUP_CONCAT(PSI.PRD_ITEM_NAME SEPARATOR '+')  AS ITEM_TITLE
										 , 0 AS ITEM_PRICE
									  FROM USER_PRODUCT UP
										   INNER JOIN USER_PRODUCT_ITEM UPI
											  ON UP.OFFICE_CODE     = UPI.OFFICE_CODE
											 AND UP.RES_NO		    = UPI.RES_NO
											 AND UP.RES_GROUP_CODE  = UPI.RES_GROUP_CODE 
											 AND UP.RES_GROUP_SEQ   = UPI.RES_GROUP_SEQ    									 
											 AND UPI.SERVICE_YN     = 'N'
											 AND UPI.CONFIRM_STATUS = 'N'
										   INNER JOIN PRODUCT_SURGICAL_ITEM PSI
											  ON UPI.OFFICE_CODE   = PSI.OFFICE_CODE
											 AND UPI.UPDATE_SEQ	   = PSI.UPDATE_SEQ
											 AND UPI.PRD_ITEM_CODE = PSI.PRD_ITEM_CODE	   
									 WHERE UP.OFFICE_CODE    = #{officeCode}
									   AND UP.RES_NO		 = #{resNo}
									   AND UP.RES_GROUP_CODE = #{resGroupCode}
									   AND UP.RES_GROUP_SEQ  = #{resGroupSeq}
									 GROUP BY 
									 	UPI.GROUP_SEQ, UPI.ITEM_SEQ
								) X LEFT OUTER JOIN USER_REFUND_PRODUCT Y
								ON X.OFFICE_CODE    = Y.OFFICE_CODE
							   AND X.RES_NO		    = Y.RES_NO
							   AND X.RES_GROUP_CODE = Y.RES_GROUP_CODE
							   AND X.RES_GROUP_SEQ  = Y.RES_GROUP_SEQ
							   AND X.ITEM_SEQ		= Y.ITEM_SEQ
						) Z
					WHERE Z.REFUND_AMOUNT = 0		
				]]>
			</when>			
			<when test='view == "C"'>	<!-- 차감 -->
				<![CDATA[
					SELECT 
						   X.GROUP_SEQ				-- 패키지제외모두1로고정
						 , X.RES_NO					-- 예약번호
					     , X.RES_GROUP_CODE			-- 예약그룹코드
					     , X.ITEM_TITLE				-- 대표상품명
					     , X.ITEM_PRICE				-- 상품가격
					     , IFNULL(Y.ITEM_SEQ, 1)   AS ITEM_SEQ
					     , IFNULL(Y.REFUND_CNT, 0) AS REFUND_CNT 				   -- 환불횟수
					     , IFNULL(FORMAT(Y.REFUND_AMOUNT, 0), 0) AS REFUND_AMOUNT  -- 환불금액
					  FROM (
							SELECT 			   
								   UP.OFFICE_CODE
					             , 1 AS GROUP_SEQ
					             , MAX(UP.RES_NO)     	  	  AS RES_NO
								 , MAX(UP.RES_GROUP_CODE) 	  AS RES_GROUP_CODE
								 , MAX(UP.RES_GROUP_SEQ) 	  AS RES_GROUP_SEQ
								 , MAX(EPS.EVENT_PRODUCT_TITLE) AS ITEM_TITLE
			 					 , FORMAT(EPS.EVENT_SALE,0)     AS ITEM_PRICE							 
							  FROM USER_PRODUCT UP												       
								   INNER JOIN USER_PRODUCT_ITEM UPI
									  ON UP.OFFICE_CODE    = UPI.OFFICE_CODE
									 AND UP.USER_ID		   = UPI.USER_ID
									 AND UP.RES_NO		   = UPI.RES_NO
									 AND UP.RES_GROUP_CODE = UPI.RES_GROUP_CODE		
									 AND UP.RES_GROUP_SEQ  = UPI.RES_GROUP_SEQ		
								   INNER JOIN ALL_EVENT_PRODUCT_INFO API
					                  ON UP.OFFICE_CODE    = API.OFFICE_CODE
					                 AND UP.RES_GROUP_CODE = API.ITEM_CODE
								   INNER JOIN EVENT_PRODUCT_SURGICAL EPS
					                  ON API.OFFICE_CODE   	    = EPS.OFFICE_CODE
					                 AND API.EVENT_UPDATE_SEQ   = EPS.EVENT_UPDATE_SEQ
					                 AND API.EVENT_SEQ	        = EPS.EVENT_SEQ
					                 AND API.EVENT_SUB_SEQ      = EPS.EVENT_SUB_SEQ
					                 AND API.EVENT_PRODUCT_CODE = EPS.EVENT_PRODUCT_CODE			  
							 WHERE UP.OFFICE_CODE    = #{officeCode}
							   AND UP.RES_NO		 = #{resNo}
							   AND UP.RES_GROUP_CODE = #{resGroupCode}
							   AND UP.RES_GROUP_SEQ  = #{resGroupSeq}
							 GROUP BY 
								   UP.RES_NO, UP.RES_GROUP_CODE, UP.RES_GROUP_SEQ
						) X LEFT OUTER JOIN USER_REFUND_PRODUCT Y
						ON X.OFFICE_CODE    = Y.OFFICE_CODE
					   AND X.RES_NO		    = Y.RES_NO
					   AND X.RES_GROUP_CODE = Y.RES_GROUP_CODE
					   AND X.RES_GROUP_SEQ  = Y.RES_GROUP_SEQ
				]]>
			</when>
			<otherwise>				<!-- 일반,이벤트(기본) -->
				<![CDATA[
					SELECT
						   X.GROUP_SEQ		-- 패키지제외모두1로고정
						 , X.RES_NO			-- 예약번호
						 , X.RES_GROUP_CODE	-- 예약그룹코드
						 , X.RES_GROUP_SEQ	-- 예약그룹SEQ
						 , X.ITEM_SEQ		-- 아이템SEQ
						 , X.ITEM_TITLE		-- 대표상품명
						 , X.ITEM_PRICE		-- 상품가격
						 , IFNULL(FORMAT(Y.REFUND_AMOUNT,0), 0) AS REFUND_AMOUNT -- 환불금액
					  FROM (
							SELECT 
								   UP.OFFICE_CODE
								 , UPI.GROUP_SEQ
								 , UP.RES_NO
								 , UP.RES_GROUP_CODE
								 , UP.RES_GROUP_SEQ
								 , UPI.ITEM_SEQ
								 , IF(UP.ITEM_TYPE = 'N', PSI.PRD_ITEM_NAME, EPS.EVENT_PRODUCT_TITLE) AS ITEM_TITLE
								 , FORMAT(IF(UP.ITEM_TYPE = 'N', PSI.PRICE, EPS.EVENT_SALE), 0)       AS ITEM_PRICE
							  FROM USER_PRODUCT UP
								   INNER JOIN USER_PRODUCT_ITEM UPI
									  ON UP.OFFICE_CODE     = UPI.OFFICE_CODE
									 AND UP.RES_NO		    = UPI.RES_NO
									 AND UP.RES_GROUP_CODE  = UPI.RES_GROUP_CODE
									 AND UP.RES_GROUP_SEQ   = UPI.RES_GROUP_SEQ      
									 AND UPI.CONFIRM_STATUS = 'N'
									 AND UPI.SERVICE_YN     = 'N'
								   INNER JOIN PRODUCT_SURGICAL_ITEM PSI
					                  ON UPI.OFFICE_CODE    = PSI.OFFICE_CODE
					                 AND UPI.UPDATE_SEQ	    = PSI.UPDATE_SEQ
					                 AND UPI.PRD_ITEM_CODE  = PSI.PRD_ITEM_CODE
								    LEFT OUTER JOIN ALL_EVENT_PRODUCT_INFO API
									  ON UP.OFFICE_CODE     = API.OFFICE_CODE
									 AND UP.RES_GROUP_CODE  = API.ITEM_CODE
									LEFT OUTER JOIN EVENT_PRODUCT_SURGICAL EPS
									  ON API.OFFICE_CODE   	    = EPS.OFFICE_CODE
									 AND API.EVENT_UPDATE_SEQ   = EPS.EVENT_UPDATE_SEQ
									 AND API.EVENT_SEQ	        = EPS.EVENT_SEQ
									 AND API.EVENT_SUB_SEQ      = EPS.EVENT_SUB_SEQ
									 AND API.EVENT_PRODUCT_CODE = EPS.EVENT_PRODUCT_CODE	
							 WHERE UP.OFFICE_CODE    = #{officeCode}
							   AND UP.RES_NO		 = #{resNo}
							   AND UP.RES_GROUP_CODE = #{resGroupCode}
							   AND UP.RES_GROUP_SEQ  = #{resGroupSeq}
						  ) X LEFT OUTER JOIN USER_REFUND_PRODUCT Y
						ON X.OFFICE_CODE    = Y.OFFICE_CODE
					   AND X.RES_NO		    = Y.RES_NO
					   AND X.RES_GROUP_CODE = Y.RES_GROUP_CODE
					   AND X.RES_GROUP_SEQ  = Y.RES_GROUP_SEQ
					   AND X.ITEM_SEQ		= Y.ITEM_SEQ					 
				]]>
			</otherwise>
		</choose>	
	</select>
	
	<delete id="deleteRefundProduct" parameterType="com.wwl.app.domain.res.dto.ResReserveDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.deleteRefundProduct
			 * Description : 차감 시술권 환불 내용 삭제
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.07.19  이승현      최초 생성
		     */
		]]>
		<![CDATA[	
			DELETE FROM USER_REFUND_PRODUCT
			 WHERE OFFICE_CODE    = #{officeCode}
			   AND RES_NO		  = #{resNo}
			   AND RES_GROUP_CODE = #{resGroupCode}
		]]>
	</delete>
	
	<update id="updateRefundProduct" parameterType="com.wwl.app.domain.res.dto.ResUserDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.updateRefundProduct
			 * Description : 환불 시술권 등록
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.07.13  이승현      최초 생성
		     */
		]]>
		<![CDATA[	
			INSERT INTO USER_REFUND_PRODUCT (
				  OFFICE_CODE	
				, RES_NO	
				, RES_GROUP_CODE	
				, RES_GROUP_SEQ
				, ITEM_SEQ	
				, REFUND_CNT
				, REFUND_AMOUNT	
				, CREATE_USER	
				, CREATE_DATE				
			) VALUES (
			      #{officeCode}	
				, #{resNo}
				, #{resGroupCode}
				, #{resGroupSeq}	
				, #{itemSeq}
				, #{refundCnt}
				, REPLACE(#{refundAmount},',','')	
				, #{createUser}
				, NOW()		
			)
			ON DUPLICATE KEY
			UPDATE REFUND_CNT	 = IF(#{refundCnt} = 0, #{refundCnt}, 
				 										REFUND_CNT + #{refundCnt}) 	
				 , REFUND_AMOUNT = REPLACE(#{refundAmount},',','')			     
				 , CREATE_USER   = #{createUser}
				 , CREATE_DATE   = NOW()
		]]> 
	</update>
		
	<select id="getSearchUserList" parameterType="com.wwl.app.domain.res.dto.ResUserDTO" resultType="camelHashMap">
		<![CDATA[
			/*
			 * SQL ID      : res.getSearchUserList 
			 * Description : 회원 정보 조회
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.06.14    진가영      최초 생성
			 * 2022.11.07    이승현      회원 관리 개편에 따라 수정
		     */
		]]>
		<![CDATA[	
			SELECT 
				   U1.USER_ID		-- 아이디
			     , U1.NAME			-- 이름
			     , U1.MEMBER_YN		-- 회원여부
				 , U1.GENDER 		-- 성별
				 , U1.MOBILE		-- 연락처
			     , U1.BIRTHDATE		-- 생년월일
				 , FN_GET_AGE(U1.BIRTHDATE) AS AGE	-- 나이
				 , U1.GRADE_CODE	-- 등급코드
				 , U2.GRADE_NAME	-- 등급표시
				 , U2.GRADE_DISPLAY	-- 등급미리보기
			     , U2.GRADE_COLOR	-- 등급색상	
				 , U1.FIXED_DOCTOR	-- 지정의료진
				 , U1.FIXED_STAFF
				 , (SELECT CONCAT('(', CC.COMMON_NAME, ')', SUI.SYS_NAME)
					  FROM SYS_USER_INFO SUI
						   LEFT OUTER JOIN COMMON_CODE CC
							 ON CC.GROUP_CODE	 = 'POS001'
						    AND SUI.SYS_POSITION = CC.COMMON_CODE
					 WHERE SUI.OFFICE_CODE	 = U1.OFFICE_CODE
					   AND SUI.SYS_USER_ID   = U1.FIXED_DOCTOR) AS FIXED_DOCTOR_NAME
				 , (SELECT CONCAT('(', CC.COMMON_NAME, ')', SUI.SYS_NAME)
					  FROM SYS_USER_INFO SUI
						   LEFT OUTER JOIN COMMON_CODE CC
							 ON CC.GROUP_CODE	 = 'POS001'
						    AND SUI.SYS_POSITION = CC.COMMON_CODE
					 WHERE SUI.OFFICE_CODE	 = U1.OFFICE_CODE
					   AND SUI.SYS_USER_ID   = U1.FIXED_STAFF) AS FIXED_STAFF_NAME
				 , IF(IFNULL(U3.PRODUCT_CNT, 0) = 0, '초진', '재진') AS VISIT_TYPE	-- 초진/재진여부
			     , FORMAT(IFNULL(
					   (SELECT SUM(PAY_AMOUNT * PAY_TYPE) 
						  FROM USER_PAYMENT
						 WHERE OFFICE_CODE   = U1.OFFICE_CODE
						   AND USER_ID		 = U1.USER_ID
						   AND PAY_SEQ	    <= (SELECT MAX(PAY_SEQ)
												FROM USER_PAYMENT A							 
												WHERE OFFICE_CODE   = U1.OFFICE_CODE
												  AND USER_ID		= U1.USER_ID)), 0), 0) AS REMAIN_AMOUNT	-- 남은금액
			  FROM USER_INFO U1				     	 
			       LEFT OUTER JOIN USER_GRADE U2 
					 ON U1.OFFICE_CODE   = U2.OFFICE_CODE
			        AND U1.GRADE_CODE    = U2.GRADE_CODE
			        LEFT OUTER JOIN (
									SELECT USER_ID
										 , COUNT(USER_ID) AS PRODUCT_CNT
									  FROM USER_PRODUCT 
									 WHERE OFFICE_CODE = #{officeCode}    
									 GROUP BY USER_ID
				  ) U3
                   ON U1.USER_ID = U3.USER_ID				  
             WHERE U1.OFFICE_CODE = #{officeCode}               
               AND U1.NAME LIKE TRIM(CONCAT('%', #{userId}, '%'))
               AND U1.USE_YN = 'Y'
		]]>
	</select>	
	
	<select id="getUserInfo" parameterType="com.wwl.app.domain.res.dto.ResUserDTO" resultType="com.wwl.app.domain.res.dto.ResUserDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.getUserInfo
			 * Description : 회원 정보 조회
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.11.16  이승현      최초 생성
		     */
		]]>
		<![CDATA[	
			SELECT 
				   U1.USER_ID				-- 아이디
			     , U1.NAME					-- 이름
			     , U1.MEMBER_YN				-- 회원여부
				 , U1.GENDER 				-- 성별
				 , U1.MOBILE				-- 연락처
			     , U1.BIRTHDATE				-- 생년월일				 
				 , U1.GRADE_CODE			-- 등급코드				
				 , U1.FIXED_DOCTOR			-- 의료진 지정 의사
				 , U1.FIXED_STAFF   		-- 의료진 지정				
				 , U1.MARKETING_YN			-- 마케팅수신여부
			     , U1.PUSH_RESERVE_YN		-- 예약정보Push알림
			     , U1.TEMP_NOTE				-- 특이사항
				 , FORMAT(IFNULL(U2.TOTAL_PRICE, 0), 0) AS TOTAL_PRICE				-- 총결제금액
				 , IF(IFNULL(U2.TOTAL_PRICE, 0) = 0, '초진', '재진') AS VISIT_TYPE	-- 초진/재진여부
			     , IFNULL(U4.RESERVE_CNT, 0) AS RESERVE_CNT 	-- 시술 횟수			     
			  FROM USER_INFO U1
				   LEFT OUTER JOIN (-- 총 결제 금액
				   				    SELECT SUM(X.TOTAL_PRICE) AS TOTAL_PRICE
									  FROM (       
											SELECT SUM(P2.PRICE) AS TOTAL_PRICE
											  FROM USER_PRODUCT U1
												   INNER JOIN ALL_PRODUCT_INFO P1
													  ON U1.OFFICE_CODE    = P1.OFFICE_CODE
													 AND U1.RES_GROUP_CODE = P1.ITEM_CODE
												   INNER JOIN PRODUCT_SURGICAL_ITEM P2
													  ON P1.OFFICE_CODE    = P2.OFFICE_CODE
													 AND P1.UPDATE_SEQ	   = P2.UPDATE_SEQ
													 AND P1.PRD_ITEM_CODE  = P2.PRD_ITEM_CODE
											 WHERE U1.OFFICE_CODE   = #{officeCode}
											   AND U1.USER_ID		= #{userId}
											   AND U1.ITEM_TYPE	    = 'N'											 
											UNION ALL
											SELECT SUM(P2.EVENT_SALE) AS TOTAL_PRICE
											  FROM USER_PRODUCT U1
												   INNER JOIN ALL_EVENT_PRODUCT_INFO P1
													  ON U1.OFFICE_CODE        = P1.OFFICE_CODE
													 AND U1.RES_GROUP_CODE     = P1.ITEM_CODE
												   INNER JOIN EVENT_PRODUCT_SURGICAL P2
													  ON P1.OFFICE_CODE        = P2.OFFICE_CODE
													 AND P1.EVENT_UPDATE_SEQ   = P2.EVENT_UPDATE_SEQ
													 AND P1.EVENT_SEQ		   = P2.EVENT_SEQ
													 AND P1.EVENT_SUB_SEQ      = P2.EVENT_SUB_SEQ
													 AND P1.EVENT_PRODUCT_CODE = P2.EVENT_PRODUCT_CODE
											 WHERE U1.OFFICE_CODE   = #{officeCode}
											   AND U1.USER_ID		= #{userId}
											   AND U1.ITEM_TYPE	   <> 'N'
											) X
				   ) U2 ON 1=1			  	  
			       LEFT OUTER JOIN USER_GRADE U3
					 ON U1.OFFICE_CODE   = U3.OFFICE_CODE
			        AND U1.GRADE_CODE    = U3.GRADE_CODE
				   LEFT OUTER JOIN (
									SELECT 
											X.USER_ID
										  , SUM(X.RES_CNT) AS RESERVE_CNT
									  FROM (
											SELECT USER_ID
												 , RES_NO     
												 , COUNT(RES_GROUP_CODE) AS RES_CNT
											  FROM USER_PRODUCT
											 WHERE OFFICE_CODE   = #{officeCode}
											 GROUP BY 
												USER_ID, RES_NO
											) X
									 GROUP BY X.USER_ID
			       ) U4 ON U1.USER_ID = U4.USER_ID
             WHERE U1.OFFICE_CODE   = #{officeCode}               
               AND U1.USER_ID		= #{userId}
		]]>
	</select>		
	
	<update id="updateUserProductDelete" parameterType="com.wwl.app.domain.res.dto.ResUserDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.updateUserProductDelete
			 * Description : 남은 시술권 삭제(복구가능)
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.11.01  이승현      최초 생성
		     */
		]]>
		<![CDATA[	
			UPDATE USER_PRODUCT_ITEM X
				   INNER JOIN (
								SELECT DISTINCT 
									   U1.RES_NO
									 , U1.RES_GROUP_CODE
			                         , U1.RES_GROUP_SEQ
								  FROM USER_PRODUCT_ITEM U1
									  INNER JOIN USER_PRODUCT U2
										 ON U1.OFFICE_CODE    = U2.OFFICE_CODE
										AND U1.RES_NO		  = U2.RES_NO
										AND U1.RES_GROUP_CODE = U2.RES_GROUP_CODE	   
										AND U1.RES_GROUP_SEQ  = U2.RES_GROUP_SEQ
								 WHERE U1.OFFICE_CODE   = #{officeCode}
								   AND U1.USER_ID 	    = #{userId}
								   AND U1.ITEM_SEQ IN
		]]>
   		<foreach collection="productList" item="item" open="(" close=")" separator=",">
 			#{item}
		</foreach>
		<![CDATA[					   
			       ) Y
			        ON X.RES_NO 		= Y.RES_NO
			       AND X.RES_GROUP_CODE = Y.RES_GROUP_CODE
			       AND X.RES_GROUP_SEQ  = Y.RES_GROUP_SEQ
			   SET X.DELETE_STATUS = 'R'
			   	 , X.CRM_SEND_YN   = 'N' 
			   	 , X.CRM_SEND_CNT  = 0
			 WHERE X.OFFICE_CODE   = #{officeCode}
			   AND X.USER_ID 	   = #{userId}
		]]>		
	</update>
	
	<insert id="insertUserDeleteProduct" parameterType="com.wwl.app.domain.res.dto.ResUserDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.insertUserDeleteProduct
			 * Description : 삭제 시술권 내역 등록(복구 가능)
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.11.08  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			SET @ROWNUM := (SELECT IFNULL(MAX(HISTORY_SEQ), 0)
							  FROM USER_PRODUCT_ITEM_HISTORY
							 WHERE OFFICE_CODE   = #{officeCode}
							   AND USER_ID		 = #{userId});	          
	          	
			INSERT INTO USER_PRODUCT_ITEM_HISTORY
			SELECT
				   X.OFFICE_CODE
			     , X.USER_ID
			     , @ROWNUM := @ROWNUM + 1
			     , X.ITEM_SEQ     
				 , 'D'  		 AS CONFIRM_STATUS
				 , 'Y'			 AS DISPLAY_YN	
			     , #{createUser} AS UPDATE_USER
			     , NOW() 		 AS UPDATE_DATE
			  FROM (				
				   SELECT 
						  OFFICE_CODE
			            , USER_ID
						, ITEM_SEQ
					 FROM USER_PRODUCT_ITEM
					WHERE OFFICE_CODE   = #{officeCode}
					  AND USER_ID	     = #{userId}
					  AND ITEM_SEQ IN
			]]>
			<foreach collection="productList" item="item" open="(" close=")" separator=",">
			 	#{item}
			</foreach>							
					) X		
	</insert>
	
	<select id="getUserProductHistory" parameterType="com.wwl.app.domain.res.dto.ResUserDTO" resultType="camelHashMap">
		<![CDATA[
			/*
			 * SQL ID      : res.getUserProductHistory
			 * Description : 시술권 사용기록 확인
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.06.07  이승현      최초 생성
		     */
		]]>
		<![CDATA[	
			SELECT 	
				   Y.USER_ID
				 , Y.UPDATE_DATE     
			     , IF(Y.GROUP_CODE = LAG(Y.GROUP_CODE) OVER (ORDER BY Y.HISTORY_DATE DESC, Y.GROUP_CODE), 'N', 'Y') AS GROUP_TITLE			     
				 , Y.HISTORY_SEQ	  			     		
   			     , Y.PRODUCT_PRICE    
			     , Y.ITEM_TITLE
			     , Y.ITEM_TYPE
			     , Y.CONFIRM_STATUS
			     , Y.PRD_ITEM_NAME
			     , Y.UPDATE_USER
			  FROM (
					SELECT 
						   X.USER_ID
						 , DATE_FORMAT(X.UPDATE_DATE,'%Y년 %m월 %d일') AS UPDATE_DATE			
						 , X.HISTORY_SEQ	
						 , X.GROUP_CODE
 						 , X.PRODUCT_PRICE
						 , X.GROUP_SEQ
						 , X.ITEM_TITLE
						 , X.ITEM_TYPE
						 , X.CONFIRM_STATUS
						 , X.PRD_ITEM_NAME
						 , X.UPDATE_USER
						 , X.HISTORY_DATE
						 , X.CREATE_DATE
						FROM (
							SELECT 
								   H1.OFFICE_CODE
								 , H1.USER_ID
								 , DATE_FORMAT(H1.UPDATE_DATE, '%Y%m%d')     AS UPDATE_DATE
								 , DATE_FORMAT(H1.UPDATE_DATE, '%Y%m%d%H%i') AS HISTORY_DATE					 								 												 		
 								 , H1.HISTORY_SEQ		 
								 , CONCAT(H2.RES_NO, H2.RES_GROUP_CODE, H2.RES_GROUP_SEQ) AS GROUP_CODE		
								 , H2.PRODUCT_PRICE
								 , H2.GROUP_SEQ
								 , H2.ITEM_TYPE
								 , H2.ITEM_TITLE	 
								 , H1.CONFIRM_STATUS
								 , CASE WHEN H2.ITEM_TYPE = 'P' THEN CONCAT('[', H2.GROUP_SEQ, '회] ', H2.PRD_ITEM_NAME)
										WHEN H2.ITEM_TYPE = 'C' THEN CONCAT(H2.PRD_ITEM_NAME, ' (-', H2.DEDUCT_CNT, ' Point 차감)')
										ELSE H2.PRD_ITEM_NAME
									END PRD_ITEM_NAME					 	 
								 , CONCAT('(', S1.SYS_NAME, ' - ', DATE_FORMAT(H1.UPDATE_DATE, '%H:%i'), ')') AS UPDATE_USER
								 , H2.CREATE_DATE 
							  FROM USER_PRODUCT_ITEM_HISTORY H1
								   INNER JOIN (
												SELECT 
													   UP.OFFICE_CODE
													 , UP.USER_ID
													 , UP.RES_NO
													 , UP.RES_GROUP_CODE
													 , UP.RES_GROUP_SEQ
					 								 , FORMAT(IF(UP.ITEM_TYPE = 'N', PSI.PRICE, EPS.EVENT_SALE) ,0) AS PRODUCT_PRICE	
													 , UP.ITEM_TYPE
													 , IF(UP.ITEM_TYPE = 'N', 
															TTL.ITEM_TITLE,
															CONCAT('[EVENT] ', EPS.EVENT_PRODUCT_TITLE)) AS ITEM_TITLE    
													 , UPI.ITEM_SEQ
													 , UPI.GROUP_SEQ
													 , UPI.UPDATE_SEQ
													 , UPI.PRD_ITEM_CODE
													 , IF(UPI.SERVICE_YN = 'Y', CONCAT('[서비스] ', PSI.PRD_ITEM_NAME), PSI.PRD_ITEM_NAME) AS PRD_ITEM_NAME
													 , UPI.DEDUCT_CNT
													 , UPI.SERVICE_YN
													 , UP.CREATE_DATE
												  FROM USER_PRODUCT UP
													   INNER JOIN USER_PRODUCT_ITEM UPI
														  ON UP.OFFICE_CODE    		= UPI.OFFICE_CODE
														 AND UP.USER_ID		   		= UPI.USER_ID
														 AND UP.RES_NO		   		= UPI.RES_NO
														 AND UP.RES_GROUP_CODE 		= UPI.RES_GROUP_CODE
														 AND UP.RES_GROUP_SEQ  		= UPI.RES_GROUP_SEQ
													   INNER JOIN PRODUCT_SURGICAL_ITEM PSI
														  ON UPI.OFFICE_CODE   		= PSI.OFFICE_CODE
														 AND UPI.UPDATE_SEQ	        = PSI.UPDATE_SEQ
														 AND UPI.PRD_ITEM_CODE 	    = PSI.PRD_ITEM_CODE	  
														LEFT OUTER JOIN ALL_EVENT_PRODUCT_INFO API
														  ON UPI.OFFICE_CODE        = API.OFFICE_CODE
														 AND UPI.RES_GROUP_CODE     = API.ITEM_CODE
														LEFT OUTER JOIN EVENT_PRODUCT_SURGICAL EPS
														  ON API.OFFICE_CODE   	    = EPS.OFFICE_CODE
														 AND API.EVENT_UPDATE_SEQ   = EPS.EVENT_UPDATE_SEQ
														 AND API.EVENT_SEQ		    = EPS.EVENT_SEQ
														 AND API.EVENT_SUB_SEQ	    = EPS.EVENT_SUB_SEQ
														 AND API.EVENT_PRODUCT_CODE = EPS.EVENT_PRODUCT_CODE
														LEFT OUTER JOIN (
																		 SELECT 
																			   U1.RES_NO
																			 , U1.RES_GROUP_CODE
																			 , U1.RES_GROUP_SEQ
																			 , U1.GROUP_SEQ
																			 , U2.PRD_ITEM_NAME AS ITEM_TITLE 
																		  FROM USER_PRODUCT_ITEM U1
																			   INNER JOIN PRODUCT_SURGICAL_ITEM U2
																				  ON U1.OFFICE_CODE   = U2.OFFICE_CODE
																				 AND U1.UPDATE_SEQ	  = U2.UPDATE_SEQ
																				 AND U1.PRD_ITEM_CODE = U2.PRD_ITEM_CODE
																		 WHERE U1.OFFICE_CODE   = #{officeCode}
																		   AND U1.USER_ID       = #{userId}
																		   AND U1.SERVICE_YN	= 'N'	-- 서비스 제외
																		 GROUP BY 
																			U1.RES_NO, U1.RES_GROUP_CODE, U1.RES_GROUP_SEQ, U1.GROUP_SEQ
														) TTL
														ON UPI.RES_NO 		  = TTL.RES_NO
													   AND UPI.RES_GROUP_CODE = TTL.RES_GROUP_CODE
													   AND UPI.RES_GROUP_SEQ  = TTL.RES_GROUP_SEQ
													   AND UPI.GROUP_SEQ	  = TTL.GROUP_SEQ   	  
												WHERE UP.OFFICE_CODE   = #{officeCode}
												  AND UP.USER_ID	   = #{userId}
								   ) H2
									  ON H1.OFFICE_CODE	  = H2.OFFICE_CODE
									 AND H1.USER_ID		  = H2.USER_ID
									 AND H1.ITEM_SEQ	  = H2.ITEM_SEQ			
								   INNER JOIN (
												SELECT MAX(DATE_FORMAT(UPDATE_DATE, '%Y-%m-%d')) AS MAXDATE
												  FROM USER_PRODUCT_ITEM_HISTORY
												 WHERE OFFICE_CODE = #{officeCode}
												   AND USER_ID     = #{userId}
									) H3
 									  ON 1=1										   
									LEFT OUTER JOIN SYS_USER_INFO S1												
									  ON H1.UPDATE_USER   = S1.SYS_USER_ID     
							 WHERE H1.OFFICE_CODE	= #{officeCode}
							   AND H1.USER_ID		= #{userId}
  							   AND H1.DISPLAY_YN    = 'Y' 
				]]>
				<choose>
					<when test="itemStatus == null or itemStatus == ''">	<!-- 최근 3일 데이터만 조회 -->	
						<![CDATA[							
							AND H1.CONFIRM_STATUS <> 'D'
							AND DATE_FORMAT(H1.UPDATE_DATE,'%Y%m%d') > 
								DATE_FORMAT(STR_TO_DATE(H3.MAXDATE, '%Y-%m-%d') - INTERVAL 3 DAY,'%Y%m%d')
						]]>					
					</when>			
					<otherwise>	<!-- 시술 사용기록 검색시  -->
							AND H1.CONFIRM_STATUS = 'Y'
							<if test="field != null and field != ''">	
				           	AND (H2.ITEM_TITLE LIKE TRIM(CONCAT('%', #{field}, '%')) OR
								 H2.PRD_ITEM_NAME LIKE TRIM(CONCAT('%', #{field}, '%')))
							</if>
							<if test="start != null and start != '' and end != null and end != ''">	
								AND DATE_FORMAT(H1.UPDATE_DATE, '%Y%m%d') BETWEEN #{start} AND #{end}
							</if>          	
					</otherwise>
				</choose>				
							) X
					) Y
	</select>

	<update id="updateUserProductHistoryDisplay" parameterType="com.wwl.app.domain.res.dto.ResUserDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.updateUserProductHistoryDisplay
			 * Description : 시술 사용기록 삭제
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.11.30    진가영    최초 생성
		     */
		]]>
		<![CDATA[	
			UPDATE USER_PRODUCT_ITEM_HISTORY
			   SET DISPLAY_YN  = 'N'	
  			 WHERE OFFICE_CODE = #{officeCode}
  			   AND USER_ID     = #{userId}
 		]]>
		<if test="historyList != null and historyList != ''">
		       AND HISTORY_SEQ IN	
			<foreach collection="historyList" item="item" open="(" close=")" separator=",">
	 			#{item}
			</foreach>
		</if>
	</update>
	
	<select id="getOneProductHistory" parameterType="com.wwl.app.domain.res.dto.ResUserDTO" resultType="camelHashMap">
		<![CDATA[
			/*
			 * SQL ID      : res.getOneProductHistory
			 * Description : 특정 시술 사용기록 조회
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.06.30  이승현      최초 생성
		     */
		]]>
		<![CDATA[		
			SELECT 
				   H1.USER_ID
				 , DATE_FORMAT(H1.UPDATE_DATE, '%Y%m%d') AS UPDATE_DATE	
				 , H2.GROUP_SEQ
				 , H2.ITEM_TYPE
				 , H2.ITEM_TITLE	 
				 , H1.CONFIRM_STATUS     
				 , CASE WHEN H2.ITEM_TYPE = 'P' THEN CONCAT('[', H2.GROUP_SEQ, '회] ', P1.PRD_ITEM_NAME)
						WHEN H2.ITEM_TYPE = 'C' THEN CONCAT(P1.PRD_ITEM_NAME, ' (',CONCAT('-', H2.DEDUCT_CNT), ' Point 차감)')
						ELSE P1.PRD_ITEM_NAME
					END PRD_ITEM_NAME					
				 , CONCAT('(', S1.SYS_NAME, ' - ', DATE_FORMAT(H1.UPDATE_DATE, '%y.%m.%d %H:%i'), ')') AS UPDATE_USER	 
			  FROM USER_PRODUCT_ITEM_HISTORY H1
				   INNER JOIN (
			  	   				SELECT 									   
			  	   					   UPI.OFFICE_CODE
									 , UP.USER_ID								     										    
									 , UP.ITEM_TYPE
									 , IF(UP.ITEM_TYPE = 'N', PSI.PRD_ITEM_NAME, CONCAT('[EVENT] ', EPS.EVENT_PRODUCT_TITLE)) AS ITEM_TITLE     
									 , UPI.ITEM_SEQ
								     , UPI.GROUP_SEQ
								     , UPI.UPDATE_SEQ
								     , UPI.PRD_ITEM_CODE
								     , UPI.DEDUCT_CNT     
								  FROM USER_PRODUCT UP
									   INNER JOIN USER_PRODUCT_ITEM UPI
										  ON UP.OFFICE_CODE    = UPI.OFFICE_CODE
										 AND UP.USER_ID		   = UPI.USER_ID
										 AND UP.RES_NO		   = UPI.RES_NO
										 AND UP.RES_GROUP_CODE = UPI.RES_GROUP_CODE
										 AND UP.RES_GROUP_SEQ  = UPI.RES_GROUP_SEQ
									   INNER JOIN PRODUCT_SURGICAL_ITEM PSI
									      ON UPI.OFFICE_CODE    = PSI.OFFICE_CODE
										 AND UPI.UPDATE_SEQ	    = PSI.UPDATE_SEQ
										 AND UPI.PRD_ITEM_CODE  = PSI.PRD_ITEM_CODE
										LEFT OUTER JOIN ALL_EVENT_PRODUCT_INFO API
										  ON UPI.OFFICE_CODE    = API.OFFICE_CODE
										 AND UPI.RES_GROUP_CODE = API.UPDATE_SEQ
										LEFT OUTER JOIN EVENT_PRODUCT_SURGICAL EPS
									      ON API.OFFICE_CODE   	    = EPS.OFFICE_CODE
									  	 AND API.EVENT_UPDATE_SEQ   = EPS.EVENT_UPDATE_SEQ
									  	 AND API.EVENT_SEQ		    = EPS.EVENT_SEQ
									  	 AND API.EVENT_SUB_SEQ	    = EPS.EVENT_SUB_SEQ
									  	 AND API.EVENT_PRODUCT_CODE = EPS.EVENT_PRODUCT_CODE
								 WHERE UP.OFFICE_CODE   = #{officeCode}
								   AND UP.USER_ID	    = #{userId}					  	   
			  	   ) H2
					  ON H1.OFFICE_CODE	  = H2.OFFICE_CODE
					 AND H1.USER_ID		  = H2.USER_ID
					 AND H1.ITEM_SEQ	  = H2.ITEM_SEQ				
				   INNER JOIN PRODUCT_SURGICAL_ITEM P1
					  ON H2.OFFICE_CODE   = P1.OFFICE_CODE
					 AND H2.UPDATE_SEQ	  = P1.UPDATE_SEQ
					 AND H2.PRD_ITEM_CODE = P1.PRD_ITEM_CODE
				    LEFT OUTER JOIN SYS_USER_INFO S1												
					  ON H1.UPDATE_USER   = S1.SYS_USER_ID 
			 WHERE H1.OFFICE_CODE   = #{officeCode}
			   AND H1.USER_ID	    = #{userId}
			   AND H1.ITEM_SEQ IN (
									SELECT ITEM_SEQ
									  FROM USER_PRODUCT_ITEM
									 WHERE OFFICE_CODE    = #{officeCode}
									   AND USER_ID	      = #{userId}
									   AND RES_NO         = #{resNo}
			                           AND RES_GROUP_CODE = #{resGroupCode}
									) 
		]]>	
	</select>
	
	<select id="getUserReserveHistory" parameterType="com.wwl.app.domain.res.dto.ResUserDTO" resultType="camelHashMap">
		<![CDATA[
			/*
			 * SQL ID      : res.getUserReserveHistory
			 * Description : 회원 예약 내역 조회
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.06.30  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			SELECT 
				   UR.RES_NO					 
				 , UR.USER_ID
				 , UI.NAME
				 , IF(UI.GENDER = 'male', '남', '여') AS GENDER
				 , IF(UI.BIRTHDATE = '', '', (DATE_FORMAT(NOW(), '%Y') - SUBSTR(UI.BIRTHDATE, 1, 4) + 1)) AS AGE 
				 , UI.MOBILE
				 , IFNULL(UG.GRADE_DISPLAY, '일반')  AS GRADE_DISPLAY
 				 , GRADE_COLOR
				 , (SELECT COMMON_NAME
					  FROM COMMON_CODE
					 WHERE GROUP_CODE  = 'RES001'
					   AND COMMON_CODE = UR.RES_TYPE) AS RES_TYPE
				 , IF(IFNULL(UP.USER_ID, 'Y') = 'Y', '초진', '재진') AS VISIT_TYPE
				 , (SELECT CONCAT(SUI.SYS_NAME, ' ' , COMMON_NAME)
					 FROM SYS_USER_INFO SUI
						  LEFT OUTER JOIN COMMON_CODE CC
							ON CC.GROUP_CODE	= 'POS001'
						   AND SUI.SYS_POSITION = CC.COMMON_CODE
					WHERE SUI.OFFICE_CODE	= UR.OFFICE_CODE
					  AND SUI.SYS_USER_ID   = UI.FIXED_DOCTOR) AS FIXED_DOCTOR_NAME
				 , (SELECT CONCAT(SUI.SYS_NAME, ' ' , COMMON_NAME)
					 FROM SYS_USER_INFO SUI
						  LEFT OUTER JOIN COMMON_CODE CC
							ON CC.GROUP_CODE	= 'POS001'
						   AND SUI.SYS_POSITION = CC.COMMON_CODE
					WHERE SUI.OFFICE_CODE	= UR.OFFICE_CODE
					  AND SUI.SYS_USER_ID   = UI.FIXED_STAFF) AS FIXED_STAFF_NAME				
				 , UH.HIS_CONTENT     AS ITEM_NAME	  -- 예약내용
			     , UH.HIS_PRICE       AS ITEM_PRICE   -- 상품가격
			     , UH.HIS_TOTAL_PRICE AS TOTAL_PRICE  -- 총합계
				 , UH.RES_NOTE        				  -- 예약메모
				 , UH.HOSPITAL_NOTE	  				  -- 병원메모				 
				 , UH.ADVICE_YN       				  -- 상담희망여부
				 , UH.VISIT_STATUS    				  -- 방문상태(Y:확정,N:미확정,C:마감)
				 , UH.ALARM_YN						  -- 알림톡발송여부
				 , UH.USE_STATUS					  -- 상태(Y:예약,N:예약취소(회원),C:예약변경,D:예약취소(병원))
				 , UH.RES_DATE	      				  -- 희망예약일
				 , UH.CREATE_DATE     				  -- 예약신청일
			  FROM USER_RESERVE UR
				   INNER JOIN USER_INFO UI
					  ON UR.OFFICE_CODE	  = UI.OFFICE_CODE
					 AND UR.USER_ID		  = UI.USER_ID                                  
					LEFT OUTER JOIN USER_GRADE UG
					  ON UI.OFFICE_CODE	  = UG.OFFICE_CODE
					 AND UI.GRADE_CODE    = UG.GRADE_CODE	
					LEFT OUTER JOIN ( -- 초친/재진 구분
									SELECT OFFICE_CODE
										 , USER_ID
									 FROM USER_PRODUCT
									GROUP BY OFFICE_CODE, USER_ID 
					 ) UP
					 ON UR.OFFICE_CODE   = UP.OFFICE_CODE
					AND UR.USER_ID		 = UP.USER_ID	  
				  INNER JOIN USER_RESERVE_INFO_HISTORY UH
			         ON UR.OFFICE_CODE   = UH.OFFICE_CODE
			        AND UR.RES_NO		 = UH.RES_NO
			 WHERE UR.OFFICE_CODE	= #{officeCode}
			   AND UR.USER_ID	    = #{userId}
			 ORDER BY UR.CREATE_DATE DESC, UH.HIS_NO DESC					 
		]]>
	</select>
	
	<select id="getDeleteProductHistory" parameterType="com.wwl.app.domain.res.dto.ResUserDTO" resultType="camelHashMap">
		<![CDATA[
			/*
			 * SQL ID      : res.getDeleteProductHistory
			 * Description : 삭제된 시술권 조회
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.07.01  이승현      최초 생성
		     */
		]]>
		<![CDATA[		
			SELECT 
				   Y.RES_NO
				 , Y.RES_GROUP_CODE
				 , Y.RES_GROUP_SEQ
				 , Y.ITEM_TYPE
			     , Y.PRODUCT_TITLE
			     , Y.ITEM_TITLE
			     , Y.CONFIRM_STATUS
			     , Y.UPDATE_USER
				 , Z.DELETE_USER
			  FROM (
					SELECT 
						   X.RES_NO
						 , X.RES_GROUP_CODE
						 , X.RES_GROUP_SEQ
						 , X.ITEM_TYPE
						 , X.PRODUCT_TITLE			 
						 , GROUP_CONCAT(X.ITEM_TITLE SEPARATOR '\n') 	 AS ITEM_TITLE
			             , GROUP_CONCAT(X.CONFIRM_STATUS SEPARATOR '\n') AS CONFIRM_STATUS
						 , GROUP_CONCAT(X.UPDATE_USER SEPARATOR '\n')	 AS UPDATE_USER	
					  FROM (
							SELECT 
								   U1.RES_NO
								 , U1.RES_GROUP_CODE
								 , U1.RES_GROUP_SEQ
								 , U1.ITEM_TYPE
								 , IF(U1.ITEM_TYPE = 'N', P1.PRD_ITEM_NAME, CONCAT('[EVENT] ', E1.EVENT_PRODUCT_TITLE)) AS PRODUCT_TITLE
								 , H0.CONFIRM_STATUS
								 , CASE WHEN U1.ITEM_TYPE = 'P' THEN CONCAT('[', U2.GROUP_SEQ, '회] ', IF(U2.SERVICE_YN = 'Y', CONCAT('[서비스] ', P1.PRD_ITEM_NAME), P1.PRD_ITEM_NAME))
										WHEN U1.ITEM_TYPE = 'C' THEN CONCAT('[', U2.DEDUCT_CNT, 'p] ', IF(U2.SERVICE_YN = 'Y', CONCAT('[서비스] ', P1.PRD_ITEM_NAME), P1.PRD_ITEM_NAME))
										WHEN U1.ITEM_TYPE = 'E' THEN IF(U2.SERVICE_YN = 'Y', CONCAT('[서비스] ', P1.PRD_ITEM_NAME), P1.PRD_ITEM_NAME)
										ELSE IF(U2.SERVICE_YN = 'Y', CONCAT('[서비스] ', P1.PRD_ITEM_NAME), P1.PRD_ITEM_NAME)
									END ITEM_TITLE   		
								 , CONCAT('(', S0.SYS_NAME, ' - ', DATE_FORMAT(H0.UPDATE_DATE, '%y.%m.%d %H:%i'), ')') AS UPDATE_USER
							  FROM USER_PRODUCT U1
								   INNER JOIN USER_PRODUCT_ITEM U2
									  ON U1.OFFICE_CODE    = U2.OFFICE_CODE
									 AND U1.USER_ID 	   = U2.USER_ID
									 AND U1.RES_NO 		   = U2.RES_NO
									 AND U1.RES_GROUP_CODE = U2.RES_GROUP_CODE
									 AND U1.RES_GROUP_SEQ  = U2.RES_GROUP_SEQ
								   INNER JOIN USER_PRODUCT_ITEM_HISTORY H0
									  ON U2.OFFICE_CODE    = H0.OFFICE_CODE
									 AND U2.USER_ID		   = H0.USER_ID
									 AND U2.ITEM_SEQ       = H0.ITEM_SEQ	
									 AND H0.CONFIRM_STATUS = 'Y'
								   INNER JOIN SYS_USER_INFO S0
									  ON H0.UPDATE_USER = S0.SYS_USER_ID
								   INNER JOIN (
												SELECT DISTINCT
													   UP.USER_ID
													 , UP.RES_NO
													 , UP.RES_GROUP_CODE
													 , UP.RES_GROUP_SEQ						 
												  FROM USER_PRODUCT UP
													   INNER JOIN USER_PRODUCT_ITEM UPI
														  ON UP.OFFICE_CODE    = UPI.OFFICE_CODE
														 AND UP.USER_ID		   = UPI.USER_ID
														 AND UP.RES_NO		   = UPI.RES_NO
														 AND UP.RES_GROUP_CODE = UPI.RES_GROUP_CODE
														 AND UP.RES_GROUP_SEQ  = UPI.RES_GROUP_SEQ
													  INNER JOIN (
																  SELECT 
																		 H1.USER_ID
																	   , H1.ITEM_SEQ
																	FROM USER_PRODUCT_ITEM_HISTORY H1	   
																   WHERE H1.OFFICE_CODE	   = #{officeCode}
																	 AND H1.USER_ID		   = #{userId}
																	 AND H1.CONFIRM_STATUS = 'D'
																	 AND H1.UPDATE_DATE   > DATE_SUB(NOW(), INTERVAL 3 MONTH) -- 최근 3개월 데이터만 조회
													  ) UPH
													   ON UPI.USER_ID  = UPH.USER_ID
													  AND UPI.ITEM_SEQ = UPH.ITEM_SEQ
												WHERE UP.OFFICE_CODE   = #{officeCode}
												  AND UP.USER_ID	   = #{userId}
									) H1
									 ON U1.USER_ID 	 	  	  = H1.USER_ID
									AND U1.RES_NO 		  	  = H1.RES_NO
									AND U1.RES_GROUP_CODE 	  = H1.RES_GROUP_CODE
									AND U1.RES_GROUP_SEQ  	  = H1.RES_GROUP_SEQ
								  INNER JOIN PRODUCT_SURGICAL_ITEM P1
									 ON U2.OFFICE_CODE   	  = P1.OFFICE_CODE
									AND U2.UPDATE_SEQ		  = P1.UPDATE_SEQ
									AND U2.PRD_ITEM_CODE 	  = P1.PRD_ITEM_CODE   
								   LEFT OUTER JOIN ALL_EVENT_PRODUCT_INFO A1
									 ON U2.OFFICE_CODE    	  = A1.OFFICE_CODE
									AND U2.RES_GROUP_CODE 	  = A1.ITEM_CODE
								   LEFT OUTER JOIN EVENT_PRODUCT_SURGICAL E1
									 ON A1.OFFICE_CODE   	  = E1.OFFICE_CODE
									AND A1.EVENT_UPDATE_SEQ   = E1.EVENT_UPDATE_SEQ
									AND A1.EVENT_SEQ		  = E1.EVENT_SEQ
									AND A1.EVENT_SUB_SEQ	  = E1.EVENT_SUB_SEQ
									AND A1.EVENT_PRODUCT_CODE = E1.EVENT_PRODUCT_CODE
							 WHERE U1.OFFICE_CODE	 = #{officeCode}
							   AND U1.USER_ID		 = #{userId}
							   AND U2.DELETE_STATUS  <> 'A'   
							) X
					 GROUP BY 
						 X.RES_NO, X.RES_GROUP_CODE, X.RES_GROUP_SEQ
					) Y	INNER JOIN (
									 SELECT DISTINCT
											U1.RES_NO
			                              , U1.RES_GROUP_CODE
			                              , U1.RES_GROUP_SEQ
										  , CONCAT((SELECT S1.SYS_NAME
												      FROM SYS_USER_INFO S1
													  WHERE S1.SYS_USER_ID = H1.UPDATE_USER), ' - ', DATE_FORMAT(H1.UPDATE_DATE, '%y.%m.%d %H:%i')) AS DELETE_USER
									   FROM USER_PRODUCT_ITEM_HISTORY H1	   
										    INNER JOIN USER_PRODUCT_ITEM U1
			                                   ON H1.OFFICE_CODe   = U1.OFFICE_CODE
			 								  AND H1.USER_ID 	   = U1.USER_ID
			                                  AND H1.ITEM_SEQ	   = U1.ITEM_SEQ
									  WHERE H1.OFFICE_CODE	  = #{officeCode}
										AND H1.USER_ID		  = #{userId}
										AND H1.CONFIRM_STATUS = 'D'
										AND H1.UPDATE_DATE   > DATE_SUB(NOW(), INTERVAL 3 MONTH) -- 최근 3개월 데이터만 조회						
			        ) Z
			         ON Y.RES_NO 	     = Z.RES_NO
			        AND Y.RES_GROUP_CODE = Z.RES_GROUP_CODE
			        AND Y.RES_GROUP_SEQ  = Z.RES_GROUP_SEQ		 
		]]>
	</select>
	
	<update id="updateRestoreUserProduct" parameterType="com.wwl.app.domain.res.dto.ResUserDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.updateRestoreUserProduct
			 * Description : 시술권 복구(이전 상태로 복구)
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.06.07  이승현      최초 생성
		     */
		]]>
		<![CDATA[	
			UPDATE USER_PRODUCT_ITEM 				   				   
			   SET DELETE_STATUS  = 'N'
			 WHERE OFFICE_CODE    = #{officeCode}
			   AND RES_NO		  = #{resNo}
			   AND RES_GROUP_CODE = #{resGroupCode}
			   AND RES_GROUP_SEQ  = #{resGroupSeq}
		]]>
	</update>
	
	<delete id="deleteUserProductHistory" parameterType="com.wwl.app.domain.res.dto.ResUserDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.deleteUserProductHistory
			 * Description : 시술권 복구(삭제 상태인 시술권 제거)
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.06.08  이승현      최초 생성
		     */
		]]>
		<![CDATA[	
			DELETE U1 
			  FROM USER_PRODUCT_ITEM_HISTORY U1
				   INNER JOIN (
							   SELECT 
								      OFFICE_CODE
			                        , USER_ID
								    , ITEM_SEQ
								  FROM USER_PRODUCT_ITEM
								 WHERE OFFICE_CODE    = #{officeCode}
								   AND RES_NO		  = #{resNo}
								   AND RES_GROUP_CODE = #{resGroupCode}
								   AND RES_GROUP_SEQ  = #{resGroupSeq}
					 ) U2
					ON U1.OFFICE_CODE    = U2.OFFICE_CODE
			       AND U1.USER_ID	     = U2.USER_ID
			       AND U1.ITEM_SEQ       = U2.ITEM_SEQ
			       AND U1.CONFIRM_STATUS = 'D'
		]]>
	</delete>		
	
	<update id="updateDeleteUserProduct" parameterType="com.wwl.app.domain.res.dto.ResUserDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.updateDeleteUserProduct
			 * Description : 시술권 완전 제거
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.11.07  이승현      최초 생성
			 * 2022.11.09  이승현      삭제 필드로 구분해 데이터는 보존
		     */
		]]>
		<![CDATA[	
			UPDATE USER_PRODUCT_ITEM				   			   
			   SET DELETE_STATUS  = 'A'
			 WHERE OFFICE_CODE    = #{officeCode}
			   AND RES_NO		  = #{resNo}
			   AND RES_GROUP_CODE = #{resGroupCode}
			   AND RES_GROUP_SEQ  = #{resGroupSeq}
		]]>
	</update>
	
	<select id="getReplyBasicTemplate" parameterType="com.wwl.app.domain.res.dto.ResSendDTO" resultType="camelHashMap">
		<![CDATA[
			/*
			 * SQL ID      : res.getReplyBasicTemplate
			 * Description : 문자 템플릿 조회(기본 정보)
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.07.11  이승현      최초 생성
		     */
		]]>
		<![CDATA[	
			SELECT 
				   H1.OFFICE_NAME		-- 병원지점명
				 , H1.OFFICE_PHONE		-- 대표번호
			     , H1.KAKAO_NAME		-- 카카오톡명
			     , H2.OFFICE_SITE		-- 홈페이지주소
			     , IFNULL(FORMAT(SUM(U1.PAY_AMOUNT * U1.PAY_TYPE), 0), 0) AS TOTAL_PAY	-- 남은 금액
			  FROM HOME_BASIC H1
				   INNER JOIN HOSPITAL_OFFICE_INFO H2
			          ON H1.OFFICE_CODE   = H2.OFFICE_CODE         
				    LEFT OUTER JOIN USER_PAYMENT U1
			          ON H1.OFFICE_CODE   = U1.OFFICE_CODE
			         AND U1.USER_ID = #{userId}
			 WHERE H1.OFFICE_CODE   = #{officeCode}
	   ]]>
	</select>
	
	<select id="getReplyProductTemplate" parameterType="com.wwl.app.domain.res.dto.ResSendDTO" resultType="camelHashMap">
		<![CDATA[
			/*
			 * SQL ID      : res.getReplyProductTemplate
			 * Description : 문자 템플릿 조회(남은 시술권)
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.07.11  이승현      최초 생성
		     */
		]]>
		<![CDATA[	
			SELECT 
				   X.RES_NO
				 , X.RES_GROUP_CODE
				 , IF(X.RES_CODE = LAG(X.RES_CODE) OVER (ORDER BY X.RES_CODE), 'N', 'Y')  AS GROUP_TITLE	 
				 , X.ITEM_TYPE
				 , X.PRODUCT_TITLE			  
				 , X.ITEM_TITLE			     
			  FROM (
					-- 보유중인 시술권 중 미사용한 일반/이벤트(이벤트,패키지) 시술권
					SELECT 
						   A.OFFICE_CODE
						 , A.RES_NO			             
						 , A.RES_GROUP_CODE
                         , A.RES_GROUP_SEQ
						 , CONCAT(A.RES_NO, A.RES_GROUP_CODE, A.RES_GROUP_SEQ) AS RES_CODE						 
						 , A.GROUP_SEQ
						 , A.ITEM_TYPE
						 , A.PRODUCT_TITLE
						 , A.ITEM_SEQ
						 , A.CONFIRM_STATUS
						 , A.ITEM_TITLE						 
					  FROM (  
							SELECT   
								   UP.OFFICE_CODE
								 , UP.RES_NO
								 , UP.RES_GROUP_CODE	 
                                 , UP.RES_GROUP_SEQ
								 , UPI.GROUP_SEQ
								 , UP.ITEM_TYPE
								 , IF(UP.ITEM_TYPE = 'P', EPS.EVENT_PRODUCT_TITLE, '') AS PRODUCT_TITLE
								 , GROUP_CONCAT(UPI.ITEM_SEQ)    AS ITEM_SEQ
								 , GROUP_CONCAT(UPI.CONFIRM_STATUS) AS CONFIRM_STATUS
								 , CASE WHEN UP.ITEM_TYPE = 'P' THEN CONCAT('[', UPI.GROUP_SEQ, '회] '
																   , GROUP_CONCAT(IF(UPI.SERVICE_YN = 'Y', 
																					CONCAT('[서비스] ', PSI.PRD_ITEM_NAME),
                                                                                    PSI.PRD_ITEM_NAME) SEPARATOR ' + '))
										ELSE IFNULL(CONCAT(IF(UP.ITEM_TYPE = 'E', CONCAT('[EVENT] ', EPS.EVENT_PRODUCT_TITLE), PSI.PRD_ITEM_NAME)
													, ' + ',                                            
													GROUP_CONCAT(IF(UPI.SERVICE_YN = 'N', NULL,
																	CONCAT('[서비스] ', PSI.PRD_ITEM_NAME)) ORDER BY UPI.ITEM_SEQ SEPARATOR ' + ')), 
                                                            IF(UP.ITEM_TYPE = 'E', CONCAT('[EVENT] ', EPS.EVENT_PRODUCT_TITLE), PSI.PRD_ITEM_NAME))
									END ITEM_TITLE
							  FROM USER_PRODUCT UP
								   INNER JOIN USER_PRODUCT_ITEM UPI
									  ON UP.OFFICE_CODE     	= UPI.OFFICE_CODE
									 AND UP.USER_ID		    	= UPI.USER_ID
									 AND UP.RES_NO		    	= UPI.RES_NO
									 AND UP.RES_GROUP_CODE  	= UPI.RES_GROUP_CODE
                                     AND UP.RES_GROUP_SEQ   	= UPI.RES_GROUP_SEQ
									 AND UPI.CONFIRM_STATUS 	= 'N'
								   INNER JOIN PRODUCT_SURGICAL_ITEM PSI
									  ON UPI.OFFICE_CODE   		= PSI.OFFICE_CODE
									 AND UPI.UPDATE_SEQ	  		= PSI.UPDATE_SEQ
									 AND UPI.PRD_ITEM_CODE 		= PSI.PRD_ITEM_CODE	
								   LEFT OUTER JOIN ALL_EVENT_PRODUCT_INFO API
                                      ON UPI.OFFICE_CODE    	= API.OFFICE_CODE
									 AND UPI.RES_GROUP_CODE 	= API.ITEM_CODE
								   LEFT OUTER JOIN EVENT_PRODUCT_SURGICAL EPS
									  ON API.OFFICE_CODE   	    = EPS.OFFICE_CODE
									 AND API.EVENT_UPDATE_SEQ	= EPS.EVENT_UPDATE_SEQ
									 AND API.EVENT_SEQ 	        = EPS.EVENT_SEQ
									 AND API.EVENT_SUB_SEQ 	    = EPS.EVENT_SUB_SEQ
									 AND API.EVENT_PRODUCT_CODE = EPS.EVENT_PRODUCT_CODE
							 WHERE UP.OFFICE_CODE	= #{officeCode}
							   AND UP.USER_ID       = #{userId}
							   AND UP.ITEM_TYPE     <> 'C'							   
							 GROUP BY 
								UP.RES_NO, UP.RES_GROUP_CODE, UP.RES_GROUP_SEQ, UPI.GROUP_SEQ
						   ) A
					UNION ALL
					-- 보유중인 시술권 중 차감 횟수가 남은 이벤트(차감) 시술권
					SELECT 
						   UP.OFFICE_CODE
						 , UP.RES_NO			            
						 , UP.RES_GROUP_CODE 
                         , UP.RES_GROUP_SEQ
						 , CONCAT(UP.RES_NO, UP.RES_GROUP_CODE, UP.RES_GROUP_SEQ) AS RES_CODE
						 , UPI.GROUP_SEQ
						 , UP.ITEM_TYPE
						 , '' AS PRODUCT_TITLE	
						 , 0  AS ITEM_SEQ
						 , GROUP_CONCAT(UPI.CONFIRM_STATUS) AS CONFIRM_STATUS			 
			             , CONCAT(EPS.EVENT_PRODUCT_TITLE, ' (남은 포인트 ', RST.REMAIN_CNT, 'p)') AS ITEM_TITLE
					  FROM USER_PRODUCT UP
						   INNER JOIN USER_PRODUCT_ITEM UPI
							  ON UP.OFFICE_CODE   		= UPI.OFFICE_CODE
							 AND UP.USER_ID		   		= UPI.USER_ID
							 AND UP.RES_NO		   		= UPI.RES_NO
							 AND UP.RES_GROUP_CODE 		= UPI.RES_GROUP_CODE
                             AND UP.RES_GROUP_SEQ  		= UPI.RES_GROUP_SEQ
						   INNER JOIN ALL_EVENT_PRODUCT_INFO API
							  ON UPI.OFFICE_CODE    	= API.OFFICE_CODE
							 AND UPI.RES_GROUP_CODE 	= API.ITEM_CODE
						   INNER JOIN EVENT_PRODUCT_SURGICAL EPS
							  ON API.OFFICE_CODE   	    = EPS.OFFICE_CODE
							 AND API.EVENT_UPDATE_SEQ	= EPS.EVENT_UPDATE_SEQ
							 AND API.EVENT_SEQ 	        = EPS.EVENT_SEQ
							 AND API.EVENT_SUB_SEQ 	    = EPS.EVENT_SUB_SEQ
							 AND API.EVENT_PRODUCT_CODE = EPS.EVENT_PRODUCT_CODE
						   INNER JOIN (
										SELECT 	   
											   A.RES_NO
											 , A.RES_GROUP_CODE
											 , A.RES_GROUP_SEQ
											 , A.MAX_CNT 
											 , A.MAX_CNT - SUM(A.DEDUCT_CNT * A.CONFIRM_CNT) - A.REFUND_CNT AS REMAIN_CNT
										  FROM (
												SELECT 
													   MAX(UP.RES_NO)     	    AS RES_NO
													 , MAX(UP.RES_GROUP_CODE)   AS RES_GROUP_CODE
													 , MAX(UP.RES_GROUP_SEQ)    AS RES_GROUP_SEQ
													 , MAX(UPI.MAX_CNT)    	    AS MAX_CNT
													 , MAX(UPI.DEDUCT_CNT) 	    AS DEDUCT_CNT
													 , SUM(UPI.CONFIRM_CNT)     AS CONFIRM_CNT
													 , IFNULL(UFP.REFUND_CNT,0) AS REFUND_CNT
												  FROM USER_PRODUCT UP												       
													   INNER JOIN USER_PRODUCT_ITEM UPI
														  ON UP.OFFICE_CODE    = UPI.OFFICE_CODE
														 AND UP.USER_ID		   = UPI.USER_ID
														 AND UP.RES_NO		   = UPI.RES_NO
														 AND UP.RES_GROUP_CODE = UPI.RES_GROUP_CODE
														 AND UP.RES_GROUP_SEQ  = UPI.RES_GROUP_SEQ
														LEFT OUTER JOIN USER_REFUND_PRODUCT UFP
														  ON UPI.OFFICE_CODE    = UFP.OFFICE_CODE
														 AND UPI.RES_NO		    = UFP.RES_NO
														 AND UPI.RES_GROUP_CODE = UFP.RES_GROUP_CODE	
														 AND UPI.RES_GROUP_SEQ  = UFP.RES_GROUP_SEQ 
												 WHERE UP.OFFICE_CODE   = #{officeCode}
												   AND UP.USER_ID		= #{userId}
												   AND UP.ITEM_TYPE     = 'C'   
												 GROUP BY 
													UP.RES_NO, UP.RES_GROUP_CODE, UP.RES_GROUP_SEQ, UPI.GROUP_SEQ
												) A
										GROUP BY 
											A.RES_NO, A.RES_GROUP_CODE, A.RES_GROUP_SEQ
						   ) RST
                            ON UP.RES_NO 		 = RST.RES_NO
						   AND UP.RES_GROUP_CODE = RST.RES_GROUP_CODE
                           AND UP.RES_GROUP_SEQ  = RST.RES_GROUP_SEQ
                           AND RST.MAX_CNT 		 > RST.REMAIN_CNT
					 WHERE UP.OFFICE_CODE   = #{officeCode}
					   AND UP.USER_ID       = #{userId}
					 GROUP BY 
						UP.RES_NO, UP.RES_GROUP_CODE, UP.RES_GROUP_SEQ
					) X 
					INNER JOIN USER_RESERVE Y
					   ON X.OFFICE_CODE   = Y.OFFICE_CODE
					  AND X.RES_NO	      = Y.RES_NO 				
				 ORDER BY 
					Y.CREATE_DATE DESC, X.RES_GROUP_CODE, X.RES_GROUP_SEQ, X.GROUP_SEQ ASC
		]]>
	</select>
		
	<select id="getUserProductReplyList" parameterType="com.wwl.app.domain.res.dto.ResSendDTO" resultType="com.wwl.app.domain.res.dto.ResSendDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.getUserProductReplyList
			 * Description : 남은 시술권 전송 기록 조회
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.07.01  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			SELECT 
				   U1.REPLY_CONTENT	
				 , S1.SYS_NAME AS REPLY_USER
				 , CONCAT(DATE_FORMAT(U1.REPLY_DATE, '%Y. %m. %d')
												   , CASE DAYOFWEEK(U1.REPLY_DATE) 
														  WHEN '1' THEN '(일)'
														  WHEN '2' THEN '(월)'		
														  WHEN '3' THEN '(화)'		
														  WHEN '4' THEN '(수)'		
														  WHEN '5' THEN '(목)'		
														  WHEN '6' THEN '(금)'		
														  WHEN '7' THEN '(토)'
													  END) AS REPLY_DATE
			 FROM USER_PRODUCT_REPLY U1
				  INNER JOIN SYS_USER_INFO S1
					 ON U1.REPLY_USER = S1.SYS_USER_ID
			WHERE U1.OFFICE_CODE   = #{officeCode}
			  AND U1.USER_ID	   = #{userId}
			ORDER BY U1.REPLY_DATE DESC 
		]]>
	</select>
	
	<select id="getAccessKey" parameterType="com.wwl.app.domain.res.dto.ResUserDTO" resultType="camelHashMap">
		<![CDATA[
			/*
			 * SQL ID      : res.getAccessKey
			 * Description : 앱접속 병원코드 가져오기
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.11.02  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			SELECT 
				   H3.HOSPITAL_NAME
				 , FN_GET_HOSPITAL_NAME(U1.OFFICE_CODE) AS OFFICE_NAME
				 , H1.ACCESS_KEY
			  FROM USER_INFO U1
				   INNER JOIN HOSPITAL_ACCESS_INFO H1
			          ON U1.OFFICE_CODE   = H1.OFFICE_CODE   
				   INNER JOIN HOSPITAL_OFFICE_INFO H2
			          ON H1.OFFICE_CODE   = H2.OFFICE_CODE
				   INNER JOIN HOSPITAL_INFO H3
			          ON H2.HOSPITAL_CODE = H3.HOSPITAL_CODE
					 AND H2.USE_YN        = 'Y'   
			 WHERE U1.OFFICE_CODE = #{officeCode}
			   AND U1.USER_ID	  = #{userId}
		]]>
	</select>
	
	<insert id="insertUserProductReply" parameterType="com.wwl.app.domain.res.dto.ResSendDTO">
		<![CDATA[
			/*
			 * SQL ID      : res.insertUserProductReply
			 * Description : 남은 시술권 전송 
			 * Modification Information
		     * Date        Author      Content
			 * ----------  ----------  ----------------------
			 * 2022.07.01  이승현      최초 생성
		     */
		]]>
		<![CDATA[
			INSERT INTO USER_PRODUCT_REPLY (
				  OFFICE_CODE	
				, USER_ID	
				, REPLY_SEQ	
				, REPLY_CONTENT	
				, REPLY_USER	
				, REPLY_DATE	
				, RES_NO							
			) VALUES (
				  #{officeCode}	
				, #{userId}
				, (SELECT IFNULL(MAX(REPLY_SEQ),0) + 1
				     FROM USER_PRODUCT_REPLY A
				    WHERE OFFICE_CODE   = #{officeCode}
				      AND USER_ID       = #{userId})	
				, #{replyContent}	
				, #{replyUser}	
				, NOW()	
				, #{resNo}
			)
		]]>	
	</insert>	
</mapper>